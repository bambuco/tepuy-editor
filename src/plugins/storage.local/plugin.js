import { templates } from './templates';

const empty = {
    id:'0',
    preview:'',
    description: "Plantilla en blanco",
    createdAt: '',
    name:'En blanco',
    category:'',
    license:'GPL',
    createdBy:"",
    url: "",
    baseUrl: 'http://tepuy.bambuco.co/rutatic/plantilla/'
};

const store = window.localStorage;
const categories = ['Category 1', 'Category 2', 'Category 3'];
const collections = {};

function getCollection(name, defaultValue) {
    if (!collections[name]) {
        collections[name] = readStoreKey(name, defaultValue);
    }
    return collections[name];
}

function readStoreKey(key, defaultValue = null) {
    let value = store.getItem(key);
    if (!value && defaultValue) {
        value = defaultValue;
        updateStoreKey(key, defaultValue);
    }
    else {
        value = JSON.parse(value);
    }
    return value;
}

function updateStoreKey(key, value) {
    store.setItem(key, JSON.stringify(value));
}

export class StorageLocal {
    constructor(app) {
        this.app = app;
        this.name = 'LocalStorage';
        //initialize store
        this.initializeStore();
    }

    initializeStore() {
    }

    getTemplateCategories() {
        return categories;
    }

    getTemplates(filter) {
        return [empty, ...templates.filter(item => {
            var matchCat = null;
            if (filter.categories && filter.categories.length) {
                matchCat = filter.categories.indexOf(item.category) >= 0;
            }

            var matchKeyword = null;
            if (filter.keyword && filter.keyword != '') {
                var re = new RegExp(filter.keyword, 'i');
                matchKeyword = re.test(item.description) || re.test(item.name)  || re.test(item.category);
            }

            return (matchKeyword == null || matchKeyword) && (matchCat == null || matchCat);
        })];
    }

    getObjects(filter) {
        return getCollection('objects', []);
    }

    save(dco) {
        let objects = getCollection('objects');
        if (!dco.id) {
            dco.id = 'dco_' + (new Date().getTime());
        }

        let index = objects.findIndex(o => o.id == dco.id);
        if (index >= 0) {
            objects[index] = dco;
        }
        else {
            objects.push(dco);
        }
        updateStoreKey('objects', objects);
        return Promise.resolve(dco);
    }

    download(dco) {
    }

    share(dco) {
    }

    /*
    Object resources methods
    */
    /*
    List all resouces (files and folder) at an specified path of the object e.g (/, /content)
    returns: Array with the list of objects in the given path. 
    */
    getResources(dco, path) {
        const resources = getCollection('res_'+dco.id, []);
        return Promise.resolve(resources.filter(r => r.path.substr(0, r.path.lastIndexOf('/')+1) == path));
    }
    /*
    Will rename a file in the object directory structure
    returns: { succeed: true | false, message: string };
    */
    renameResource(dco, res, newName) {
        const key = 'res_'+dco.id;
        const resources = getCollection(key, []);
        const newPath = res.path.substr(0, res.path.lastIndexOf('/')+1) + newName;
        if (resources.find(r => r.path == newPath)) return Promise.reject('An item with the same path already exists');
        const item = resources.find(r => r.path == res.path);
        if (!item) Promise.reject('Resource not found');
        item.name = newName;
        const oldPath = item.path + '/';
        item.path = newPath;
        resources.filter(r => r.path.startsWith(oldPath)).map(r => r.path = r.path.replace(oldPath, newPath+'/'));
        updateStoreKey(key, resources);
        return Promise.resolve(item);
    }
    /*
    Will delete a file in the object directory structure
    returns: { succeed: true | false, message: string };
    */
    deleteResource(dco, path) {
        const key = 'res_'+dco.id;
        const resources = getCollection(key, []);
        const basePath = path + '/';
        collections[key] = resources.filter(r => !(r.path == path || r.path.startsWith(basePath)));
        updateStoreKey(key, collections[key]);
        return Promise.resolve(true);
    }
    /*
    Will add a new resource in the directory structure at the given path
    resouce: { type: F|D, name: string, file: Blob | null }
    returns: { succeed: true | false, message: string };
    */
    addResource(dco, res, basepath){
        const key = 'res_'+dco.id;
        const resources = getCollection(key, []);
        const { type, name, size, createdAt, extension } = res;
        if (!/\/$/.test(basepath)) basepath += '/';
        const path = [basepath, name].join('');
        let item = resources.find(r => r.path == path);
        if (item) {
            return Promise.reject('An item with the same path already exists');
        }
        item = {type, path, name, size, createdAt, extension, parent: basepath };
        resources.push(item);
        updateStoreKey(key, resources);
        return Promise.resolve(item);
    }

    /*
    Will get the Index page content for a given dco
    dco: { id: string }
    returns: Promise<base64string>;
    */
    getIndex(dco) {
        const key = 'index_'+dco.id;
        const value = readStoreKey(key, "PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICAgIDx0aXRsZT5JbmljaW88L3RpdGxlPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCBtYXhpbXVtLXNjYWxlPTEsIHVzZXItc2NhbGFibGU9bm8iPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSJpbWcvaWNvbi5zdmciPgogICAgPGxpbmsgaHJlZj0iY29tcG9uZW50cy9qcXVlcnkvY3NzL2N1c3RvbS9qcXVlcnktdWkubWluLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyI+CiAgICA8bGluayBocmVmPSJjb21wb25lbnRzL2lvbmljb25zL2Nzcy9pb25pY29ucy5taW4uY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIj4KICAgIDxsaW5rIGhyZWY9ImNzcy9zY29ybXBsYXllci5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPgoKICAgIDxzY3JpcHQgc3JjPSJjb21wb25lbnRzL2pxdWVyeS9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJjb21wb25lbnRzL2pxdWVyeS9qcXVlcnktdWkubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9hcHAuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2xhbmcuZXMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImNvbXBvbmVudHMvc2Nvcm0vcGxheWVyLmpzIj4gPC9zY3JpcHQ+Cgo8L2hlYWQ+Cjxib2R5IGRhdGEtYXV0b2xvYWQ9ImZhbHNlIiBkYXRhLWRpc3BsYXktd2luZG93PSJtb2RhbCIgZGF0YS13aW5kb3ctd2lkdGg9IjEwMCIgZGF0YS13aW5kb3ctaGVpZ2h0PSIxMDAiPgogICAgPGRpdiBpZD0iYm9keSI+CiAgICAgICAgPGhlYWRlcj4KICAgICAgICAgICAgPGgxPk5vbWJyZSBkZWwgPGJyIC8+PHNwYW4+Y29tcG9uZW50ZTwvc3Bhbj4gPHNwYW4gY2xhc3M9ImxldmVsIj5OaXZlbDwvc3Bhbj48L2gxPgogICAgICAgICAgICA8aDI+VMOtdHVsbyBkZSBsYSBhY3RpdmlkYWQ8L2gyPgogICAgICAgICAgICA8aW1nIHNyYz0iaW1nL3BvcnRhZGEucG5nIiB0aXRsZT0iSW5pY2lvIiAvPgogICAgICAgIDwvaGVhZGVyPgoKICAgICAgICA8bWFpbiBpZD0iY29udGVudCI+CiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPk9iamV0aXZvOjwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgIGV4cGxvcmFyIGVsIGVzdGlsbyBkZSBhcHJlbmRpemFqZSBwcmVkb21pbmFudGUgZGUgbG9zIHBhcnRpY2lwYW50ZXMsIGNvbiBlbCBmaW4gZGUgYXBvcnRhciBoZXJyYW1pZW50YXMgYWwgcGVuc2FtaWVudG8gY3LDrXRpY28sIHJlZmxleGl2bywgYXJndW1lbnRhdGl2byB5IGNyZWF0aXZvIHBhcmEgZ3VpYXIgbGEgZW5zZcOxYW56YS1hcHJlbmRpemFqZSBlbiBsYXMgw6FyZWFzIGRlIGxhIHNhbHVkLgogICAgICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+TW9kYWxpZGFkOjwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgIGluZGl2aWR1YWwKICAgICAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICBFc3RhIGFjdGl2aWRhZCBlc3TDoSBvcmdhbml6YWRhIGVuIHRyZXMgcGFydGVzOgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPG9sPgogICAgICAgICAgICAgICAgICAgIDxsaT5VbmEgYnJldmUgaW50cm9kdWNjacOzbiByZXNwZWN0byBhIGxvcyBFc3RpbG9zIGRlIGFwcmVuZGl6YWplLjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPlVuYSBwcnVlYmEgZGVsIEN1ZXN0aW9uYXJpbyBDQU1FQSBwYXJhIHJlY29ub2NlciBsYXMgY2FyYWN0ZXLDrXN0aWNhcyBkZSBzdSBlc3RpbG8gZGUgYXByZW5kaXphamUgaW1wZXJhbnRlIGVuIERlc2N1YnJhIHN1IGVzdGlsbyBkZSBhcHJlbmRpemFqZS48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT5VbmEgYWN0aXZpZGFkIGRlIHJlcGFzbyBzb2JyZSBsb3MgZXN0aWxvcyBkZSBhcHJlbmRpemFqZS48L2xpPgogICAgICAgICAgICAgICAgPC9vbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgaWQ9ImR1cmF0aW9uIj4KICAgICAgICAgICAgICAgIER1cmFjacOzbjoKICAgICAgICAgICAgICAgIDxzcGFuPjQ8L3NwYW4+CiAgICAgICAgICAgICAgICBob3JhcwogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L21haW4+CiAgICAgICAgPGRpdiBpZD0icGxheV9zY29ybSI+PC9kaXY+CiAgICA8L2Rpdj4KPC9ib2R5Pgo8L2h0bWw+Cg==");
        return Promise.resolve(value);
    }

    /*
    Will add a new resource in the directory structure at the given path
    resouce: { type: F|D, name: string, file: Blob | null }
    returns: { succeed: true | false, message: string };
    */
    getContent(dco) {
        const key = 'content_'+dco.id;
        const value = readStoreKey(key, "");
        return Promise.resolve(value);
    }

    updateIndex(dco, index) {
        const key = 'index_'+dco.id;
        updateStoreKey(key, index);
    }

    updateContent(dco, content) {
        const key = 'content_'+dco.id;
        updateStoreKey(key, content);
    }
}