import { templates } from './templates';
import { specs } from './specs';

const empty = {
    id:'0',
    preview:'',
    description: "Plantilla en blanco",
    createdAt: '',
    name:'En blanco',
    category:'',
    license:'GPL',
    createdBy:"",
    url: "",
    baseUrl: 'http://boa.nuestroscursos.net/api/c/repositorio-de-pruebas/resources/MURGMzk4NUYtMEM5Ny00RjI1LThDNTUtNTQ5QjRFNzI0QTNGQGJvYS51ZGVhLmVkdS5jbw==/!/'
};

const store = window.localStorage;
const categories = ['Category 1', 'Category 2', 'Category 3'];
const collections = {};

function getCollection(name, defaultValue) {
    if (!collections[name]) {
        collections[name] = readStoreKey(name, defaultValue);
    }
    return collections[name];
}

function readStoreKey(key, defaultValue = null) {
    let value = store.getItem(key);
    if (!value && defaultValue) {
        value = defaultValue;
        updateStoreKey(key, defaultValue);
    }
    else {
        value = JSON.parse(value);
    }
    return value;
}

function updateStoreKey(key, value) {
    store.setItem(key, JSON.stringify(value));
}

export class StorageLocal {
    constructor(app) {
        this.app = app;
        this.name = 'LocalStorage';
        //initialize store
        this.initializeStore();
    }

    initializeStore() {
    }

    getTemplateCategories() {
        return Promise.resolve('123'.split('').map(id => ({value: id, text: 'Category ' + id})));
    }

    getTemplates(filter) {
        return Promise.resolve([empty, ...templates.filter(item => {
            var matchCat = null;
            if (filter.categories && filter.categories.length) {
                matchCat = filter.categories.indexOf(item.categoryId) >= 0;
            }

            var matchKeyword = null;
            if (filter.keyword && filter.keyword != '') {
                var re = new RegExp(filter.keyword, 'i');
                matchKeyword = re.test(item.description) || re.test(item.name)  || re.test(item.category);
            }

            return (matchKeyword == null || matchKeyword) && (matchCat == null || matchCat);
        })]);
    }

    getObjects(filter) {
        return Promise.resolve(getCollection('objects', []));
    }

    getSpecList() {
        const specs = [
            { id: 'rea', name: 'Recurso educativo abierto' },
            { id: 'obi', name: 'Objeto informativo' },
            { id: 'red', name: 'Recurso digital' }
        ];

        return Promise.resolve(specs);
    }

    getSpec(id) {
        return Promise.resolve(specs[id]);
    }

    createObject(properties) {
        const manifest = Object.assign({}, properties);
        const template = templates.find(t => t.id == manifest.templateId);
        manifest.baseUrl = template.baseUrl;
        delete manifest.templateId;
        return this.save(manifest);
    }

    save(dco) {
        let objects = getCollection('objects', []);
        if (!dco.id) {
            dco.id = 'dco_' + (new Date().getTime());
        }

        let index = objects.findIndex(o => o.id == dco.id);
        if (index >= 0) {
            objects[index] = dco;
        }
        else {
            objects.push(dco);
        }
        updateStoreKey('objects', objects);
        return Promise.resolve(dco);
    }

    delete(dco) {
        if (!dco.id) return;
        let objects = getCollection('objects');
        let index = objects.findIndex(o => o.id == dco.id);
        console.log(index);
        console.log(dco);
        if (index >= 0) {
            objects.splice(index, 1);
            updateStoreKey('objects', objects);
            return Promise.resolve(dco);
        }
        return Promise.resolve(false);
    }

    download(dco) {
        return Promise.resolve('plugins/storage.local/plantilla.zip'); // https://workupload.com/start/c2kh9NB'
    }

    share(dco) {
    }

    /*
    Object resources methods
    */
    /*
    List all resouces (files and folder) at an specified path of the object e.g (/, /content)
    returns: Array with the list of objects in the given path. 
    */
    getResources(dco, path) {
        const resources = getCollection('res_'+dco.id, []);
        return Promise.resolve(resources.filter(r => r.path.substr(0, r.path.lastIndexOf('/')+1) == path));
    }
    /*
    Will rename a file in the object directory structure
    returns: { succeed: true | false, message: string };
    */
    renameResource(dco, res, newName) {
        const key = 'res_'+dco.id;
        const resources = getCollection(key, []);
        const newPath = res.path.substr(0, res.path.lastIndexOf('/')+1) + newName;
        if (resources.find(r => r.path == newPath)) return Promise.reject('An item with the same path already exists');
        const item = resources.find(r => r.path == res.path);
        if (!item) Promise.reject('Resource not found');
        item.name = newName;
        const oldPath = item.path + '/';
        item.path = newPath;
        resources.filter(r => r.path.startsWith(oldPath)).map(r => r.path = r.path.replace(oldPath, newPath+'/'));
        updateStoreKey(key, resources);
        return Promise.resolve(item);
    }
    /*
    Will delete a file in the object directory structure
    returns: { succeed: true | false, message: string };
    */
    deleteResource(dco, path) {
        const key = 'res_'+dco.id;
        const resources = getCollection(key, []);
        const basePath = path + '/';
        collections[key] = resources.filter(r => !(r.path == path || r.path.startsWith(basePath)));
        updateStoreKey(key, collections[key]);
        return Promise.resolve(true);
    }
    /*
    Will add a new resource in the directory structure at the given path
    resouce: { type: F|D, name: string, file: Blob | null }
    returns: { succeed: true | false, message: string };
    */
    addResource(dco, res, basepath){
        const key = 'res_'+dco.id;
        const resources = getCollection(key, []);
        const { type, name, size, createdAt, extension } = res;
        if (!/\/$/.test(basepath)) basepath += '/';
        const path = [basepath, name].join('');
        let item = resources.find(r => r.path == path);
        if (item) {
            return Promise.reject('An item with the same path already exists');
        }
        item = {type, path, name, size, createdAt, extension, parent: basepath };
        resources.push(item);
        updateStoreKey(key, resources);
        return Promise.resolve(item);
    }

    /*
    Will get the Index page content for a given dco
    dco: { id: string }
    returns: Promise<base64string>;
    */
    getIndex(dco) {
        const key = 'index_'+dco.id;
        //const value = readStoreKey(key, "PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICAgIDx0aXRsZT5JbmljaW88L3RpdGxlPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCBtYXhpbXVtLXNjYWxlPTEsIHVzZXItc2NhbGFibGU9bm8iPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSJpbWcvaWNvbi5zdmciPgogICAgPGxpbmsgaHJlZj0iY29tcG9uZW50cy9qcXVlcnkvY3NzL2N1c3RvbS9qcXVlcnktdWkubWluLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyI+CiAgICA8bGluayBocmVmPSJjb21wb25lbnRzL2lvbmljb25zL2Nzcy9pb25pY29ucy5taW4uY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIj4KICAgIDxsaW5rIGhyZWY9ImNzcy9zY29ybXBsYXllci5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPgoKICAgIDxzY3JpcHQgc3JjPSJjb21wb25lbnRzL2pxdWVyeS9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJjb21wb25lbnRzL2pxdWVyeS9qcXVlcnktdWkubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9hcHAuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2xhbmcuZXMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImNvbXBvbmVudHMvc2Nvcm0vcGxheWVyLmpzIj4gPC9zY3JpcHQ+Cgo8L2hlYWQ+Cjxib2R5IGRhdGEtYXV0b2xvYWQ9ImZhbHNlIiBkYXRhLWRpc3BsYXktd2luZG93PSJtb2RhbCIgZGF0YS13aW5kb3ctd2lkdGg9IjEwMCIgZGF0YS13aW5kb3ctaGVpZ2h0PSIxMDAiPgogICAgPGRpdiBpZD0iYm9keSI+CiAgICAgICAgPGhlYWRlcj4KICAgICAgICAgICAgPGgxPk5vbWJyZSBkZWwgPGJyIC8+PHNwYW4+Y29tcG9uZW50ZTwvc3Bhbj4gPHNwYW4gY2xhc3M9ImxldmVsIj5OaXZlbDwvc3Bhbj48L2gxPgogICAgICAgICAgICA8aDI+VMOtdHVsbyBkZSBsYSBhY3RpdmlkYWQ8L2gyPgogICAgICAgICAgICA8aW1nIHNyYz0iaW1nL3BvcnRhZGEucG5nIiB0aXRsZT0iSW5pY2lvIiAvPgogICAgICAgIDwvaGVhZGVyPgoKICAgICAgICA8bWFpbiBpZD0iY29udGVudCI+CiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPk9iamV0aXZvOjwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgIGV4cGxvcmFyIGVsIGVzdGlsbyBkZSBhcHJlbmRpemFqZSBwcmVkb21pbmFudGUgZGUgbG9zIHBhcnRpY2lwYW50ZXMsIGNvbiBlbCBmaW4gZGUgYXBvcnRhciBoZXJyYW1pZW50YXMgYWwgcGVuc2FtaWVudG8gY3LDrXRpY28sIHJlZmxleGl2bywgYXJndW1lbnRhdGl2byB5IGNyZWF0aXZvIHBhcmEgZ3VpYXIgbGEgZW5zZcOxYW56YS1hcHJlbmRpemFqZSBlbiBsYXMgw6FyZWFzIGRlIGxhIHNhbHVkLgogICAgICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+TW9kYWxpZGFkOjwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgIGluZGl2aWR1YWwKICAgICAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICBFc3RhIGFjdGl2aWRhZCBlc3TDoSBvcmdhbml6YWRhIGVuIHRyZXMgcGFydGVzOgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPG9sPgogICAgICAgICAgICAgICAgICAgIDxsaT5VbmEgYnJldmUgaW50cm9kdWNjacOzbiByZXNwZWN0byBhIGxvcyBFc3RpbG9zIGRlIGFwcmVuZGl6YWplLjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPlVuYSBwcnVlYmEgZGVsIEN1ZXN0aW9uYXJpbyBDQU1FQSBwYXJhIHJlY29ub2NlciBsYXMgY2FyYWN0ZXLDrXN0aWNhcyBkZSBzdSBlc3RpbG8gZGUgYXByZW5kaXphamUgaW1wZXJhbnRlIGVuIERlc2N1YnJhIHN1IGVzdGlsbyBkZSBhcHJlbmRpemFqZS48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT5VbmEgYWN0aXZpZGFkIGRlIHJlcGFzbyBzb2JyZSBsb3MgZXN0aWxvcyBkZSBhcHJlbmRpemFqZS48L2xpPgogICAgICAgICAgICAgICAgPC9vbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgaWQ9ImR1cmF0aW9uIj4KICAgICAgICAgICAgICAgIER1cmFjacOzbjoKICAgICAgICAgICAgICAgIDxzcGFuPjQ8L3NwYW4+CiAgICAgICAgICAgICAgICBob3JhcwogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L21haW4+CiAgICAgICAgPGRpdiBpZD0icGxheV9zY29ybSI+PC9kaXY+CiAgICA8L2Rpdj4KPC9ib2R5Pgo8L2h0bWw+Cg==");
        const value = readStoreKey(key, "PCFET0NUWVBFIGh0bWw+DQo8aHRtbD4NCjxoZWFkPg0KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4NCiAgICA8dGl0bGU+SW5pY2lvPC90aXRsZT4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIG1heGltdW0tc2NhbGU9MSwgdXNlci1zY2FsYWJsZT1ubyI+DQogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSJpbWcvaWNvbi5zdmciPg0KICAgIDxsaW5rIGhyZWY9ImNvbXBvbmVudHMvanF1ZXJ5L2Nzcy9jdXN0b20vanF1ZXJ5LXVpLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KICAgIDxsaW5rIGhyZWY9ImNzcy9zY29ybXBsYXllci5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KDQogICAgPHNjcmlwdCBzcmM9ImNvbXBvbmVudHMvanF1ZXJ5L2pxdWVyeS5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPSJjb21wb25lbnRzL2pxdWVyeS9qcXVlcnktdWkubWluLmpzIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0ianMvYXBwLmpzIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0ianMvbGFuZy5lcy5qcyI+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCBzcmM9ImNvbXBvbmVudHMvc2Nvcm0vcGxheWVyLmpzIj4gPC9zY3JpcHQ+DQoNCjwvaGVhZD4NCjxib2R5IGRhdGEtYXV0b2xvYWQ9ImZhbHNlIiBkYXRhLWRpc3BsYXktd2luZG93PSJtb2RhbCIgZGF0YS13aW5kb3ctd2lkdGg9IjEwMCIgZGF0YS13aW5kb3ctaGVpZ2h0PSIxMDAiPg0KICAgIDxkaXYgaWQ9ImJvZHkiPg0KICAgICAgICA8ZGl2IGlkPSJjb250ZW50Ij4NCg0KICAgICAgICAgICAgPGgxPlByZXNlbnRhY2nDs248L2gxPg0KICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgRXN0YSBww6FnaW5hIGVzIGxhIHF1ZSBzZSBjYXJnYSBpbmljaWFsbWVudGUsIHB1ZWRlIHV0aWxpemFyc2UgcGFyYSBkYXIgaW5zdHJ1Y2Npb25lcyBhIGxvcyB1c3VhcmlvcywgcGFyYSBoYWNlciBsYSBwcmVzZW50YWNpw7NuIGRlbCBjb250ZW5pZG8gbyBwdWVkZSBvYnZpYXJzZSBjb25maWd1csOhbmRvbGEgcGFyYSBjYXJnYXIgZWwgY29udGVuaWRvIGF1dG9tw6F0aWNhbWVudGUuIEVuIGVsIGNhc28gZGUgcHJlc2VudGFyIGVsIGRvY3VtZW50bywgc2UgcmVjb21pZW5kYSBtb3N0cmFyIGVuIGVzdGEgcMOhZ2luYTogdW5hIDxzdHJvbmc+aW50cm9kdWNjacOzbjwvc3Ryb25nPiBhbCBjb250ZW5pZG8gcXVlIHNlIGVuY29udHJhcsOhIGVuIGVsIGRvY3VtZW50bywgZWwgPHN0cm9uZz5vYmpldGl2bzwvc3Ryb25nPiBxdWUgc2UgZXNwZXJhIGxvZ3JhciBhYm9yZGFuZG8gZWwgY29udGVuaWRvLCBlbCB0aWVtcG8gYXByb3hpbWFkbyAoPHN0cm9uZz5kdXJhY2nDs248L3N0cm9uZz4pIHF1ZSB1bmEgcGVyc29uYSBkZWJlcsOtYSBkZWRpY2FyIGEgY29tcGxldGFyIGVsIGRvY3VtZW50by4NCiAgICAgICAgICAgIDwvcD4NCg0KICAgICAgICAgICAgPGgyPkNvbmZpZ3VyYWNpw7NuPC9oMj4NCiAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgIEVzdGEgcMOhZ2luYSB0aWVuZSBsb3Mgc2lndWllbnRlcyBwYXLDoW1ldHJvcyBkZSBjb25maWd1cmFjacOzbjoNCiAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+ZGF0YS1hdXRvbG9hZD0iW3RydWUgfCA8ZW0+ZmFsc2U8L2VtPl0iPC9zdHJvbmc+OiBQYXJhIGluZGljYXIgc2kgc2UgY2FyZ2EgZWwgY29udGVuaWRvIGF1dG9tw6F0aWNhbWVudGUgc2FsdMOhbmRvc2UgZXN0YSBww6FnaW5hIG8gc2kgc2UgZGVzcGxpZWdhIGxhIHDDoWdpbmEgeSBlbCBjb250ZW5pZG8gc2UgYWJyZSBkZXNkZSBlbCBib3TDs24gZGUgaW5pY2lvLiBQcm9waWVkYWQgZGVmaW5pZGEgZW4gZWwgZWxlbWVudG8gPGVtPmJvZHk8L2VtPi4gRWplbXBsbzo8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgPHByZT4gICAgJmx0O2JvZHkgZGF0YS1hdXRvbG9hZD0idHJ1ZSImZ3Q7PC9wcmU+DQogICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+ZGF0YS1kaXNwbGF5LXdpbmRvdz0iWzxlbT50b3A8L2VtPiB8IHBvcHVwIHwgbW9kYWxdIjwvc3Ryb25nPjogRGVmaW5lIGxhIG1hbmVyYSBjb21vIHNlIGNhcmdhcsOhIGVsIGNvbnRlbmlkbywgc2kgZW4gbGEgbWlzbWEgcMOhZ2luYSwgY29tbyB2ZW50YW5hIG1vZGFsIChtb2RhbCkgbyBjb21vIHZlbnRhbmEgZW1lcmdlbnRlIChwb3B1cCkuIFByb3BpZWRhZCBkZWZpbmlkYSBlbiBlbCBlbGVtZW50byA8ZW0+Ym9keTwvZW0+LiBFamVtcGxvOjxiciAvPg0KICAgICAgICAgICAgICAgICAgICA8cHJlPiAgICZsdDtib2R5IGRhdGEtZGlzcGxheS13aW5kb3c9InRvcCImZ3Q7PC9wcmU+DQogICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+ZGF0YS13aW5kb3ctd2lkdGg9Ils8ZW0+bnVtYmVyPC9lbT5dIjwvc3Ryb25nPjogSW5kaWNhIGVsIGFuY2hvIGRlIGxhIHZlbnRhbmEgZW1lcmdlbnRlLCBlbiBwaXhlbGVzLiBFc3RhIHByb3BpZWRhZCBlc3TDoSBkaXNwb25pYmxlIGVuIGVsIGNhc28gZGUgcXVlIDxlbT5kYXRhLWRpc3BsYXktd2luZG93PC9lbT4gc2UgZXN0YWJsZXpjYSBhIDxlbT5wb3B1cDwvZW0+LiBTaSBzZSBlc3RhYmxlY2UgZW4gMTAwIHkgPGVtPmRhdGEtd2luZG93LWhlaWdodDwvZW0+IHRhbWJpw6luIHNlIGVzdGFibGVjZSBlbiAxMDAsIHNlIHRvbWFyw6EgY29tbyBlbCAxMDAlIGRlIGxhIHBhbnRhbGxhIGxvIHF1ZSBlcXVpdmFsZSBhcHJveGltYWRhbWVudGUgYSAicGFudGFsbGEgY29tcGxldGEiLiBQcm9waWVkYWQgZGVmaW5pZGEgZW4gZWwgZWxlbWVudG8gPGVtPmJvZHk8L2VtPi4gRWplbXBsbzo8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgPHByZT4gICAmbHQ7Ym9keSBkYXRhLWRpc3BsYXktd2luZG93PSJwb3B1cCIgZGF0YS13aW5kb3ctd2lkdGg9IjgwMCImZ3Q7PC9wcmU+DQogICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+ZGF0YS13aW5kb3ctaGVpZ2h0PSJbPGVtPm51bWJlcjwvZW0+XSI8L3N0cm9uZz46IEluZGljYSBlbCBhbHRvIGRlIGxhIHZlbnRhbmEgZW1lcmdlbnRlLCBlbiBwaXhlbGVzLiBFc3RhIHByb3BpZWRhZCBlc3TDoSBkaXNwb25pYmxlIGVuIGVsIGNhc28gZGUgcXVlIDxlbT5kYXRhLWRpc3BsYXktd2luZG93PC9lbT4gc2UgZXN0YWJsZXpjYSBhIDxlbT5wb3B1cDwvZW0+LiBTaSBzZSBlc3RhYmxlY2UgZW4gMTAwIHkgPGVtPmRhdGEtd2luZG93LXdpZHRoPC9lbT4gdGFtYmnDqW4gc2UgZXN0YWJsZWNlIGVuIDEwMCwgc2UgdG9tYXLDoSBjb21vIGVsIDEwMCUgZGUgbGEgcGFudGFsbGEgbG8gcXVlIGVxdWl2YWxlIGFwcm94aW1hZGFtZW50ZSBhICJwYW50YWxsYSBjb21wbGV0YSIuIFByb3BpZWRhZCBkZWZpbmlkYSBlbiBlbCBlbGVtZW50byA8ZW0+Ym9keTwvZW0+LiBFamVtcGxvOjxiciAvPg0KICAgICAgICAgICAgICAgICAgICA8cHJlPiAgICZsdDtib2R5IGRhdGEtZGlzcGxheS13aW5kb3c9InBvcHVwIiBkYXRhLXdpbmRvdy1oZWlnaHQ9IjYwMCImZ3Q7PC9wcmU+DQogICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICA8aDI+UGVyc29uYWxpemFjacOzbjwvaDI+DQogICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICBFc3RhIHDDoWdpbmEgaW5pY2lhbCBzZSBwdWVkZSBwZXJzb25hbGl6YXIgcHJpbmNpcGFsbWVudGUgbWVkaWFudGUgZG9zIGFyY2hpdm9zOg0KICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgPG9sPg0KICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5pbmRleC5odG1sPC9zdHJvbmc+OiBFcyBlbCBhcmNoaXZvIGRvbmRlIHNlIGluZ3Jlc2EgZWwgY29udGVuaWRvIHZpc2libGUgZW4gbGEgcMOhZ2luYSwgZW4gSFRNTC4gRGVudHJvIGRlbCBjb250ZW5pZG8gc2UgZGViZSByZXNwZXRhciBlbCA8ZW0+ZGl2PC9lbT4gbWFyY2FkbyBjb24gZWwgaWQgPHN0cm9uZz5wbGF5X3Njb3JtPC9zdHJvbmc+IGF1bnF1ZSBzdSB1YmljYWNpw7NuIHB1ZWRlIHNlciBhIGRpc2NyZWNpw7NuLiBFbiBlc2UgPGVtPmRpdjwvZW0+IGVzIGRvbmRlIHNlIGluY2x1eWUgZWwgYm90w7NuIHBhcmEgY2FyZ2FyIGVsIGRvY3VtZW50byB5IGRvbmRlIHNlIG11ZXN0cmFuIGFsZ3Vub3MgbWVuc2FqZXMgY29tbyBlbCBxdWUgaW5kaWNhIHNpIGxhIHDDoWdpbmEgaGEgc2lkbyBibG9xdWVhZGEgcG9yIGVsIGJsb3F1ZWFkb3IgZGUgcG9wdXBzLCBlbiBjYXNvIGRlIGFwbGljYXIuDQogICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+Y3NzL3Njb3JtcGxheWVyLmNzczwvc3Ryb25nPjogQ29udGllbmUgbG9zIGVzdGlsb3MgQ1NTIHF1ZSBzZSBhcGxpY2FuIGEgZXN0YSBww6FnaW5hLCBsb3MgY3VhbGVzIGRlZmluZW4gc3UgYXBhcmllbmNpYS4gQ29tbyBlc3RpbG9zIGVzcGVjaWFsZXMgc2UgZGViZSBjb25zaWRlcmFyOiA8ZW0+LnVpLXN0YXRlLWVycm9yPC9lbT4geSA8ZW0+LnVpLXN0YXRlLWhpZ2hsaWdodDwvZW0+IGxvcyBjdWFsZXMgc29uIHV0aWxpemFkb3MgcGFyYSBtYXJjYXIgbG9zIG1lbnNhamVzIGF1dG9tw6F0aWNvcywgZGUgZXJyb3IgbyBub3RpZmljYWNpw7NuIHJlc3BlY3RpdmFtZW50ZSwgZW4gY2FzbyBkZSBxdWUgYXBsaXF1ZS4NCiAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgPC9vbD4NCiAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgIDxzdHJvbmc+Tm90YTo8L3N0cm9uZz4gQ3VhbHF1aWVyIGltYWdlbiB1dGlsaXphZGEgY29tbyBjb250ZW5pZG8gZW4gw6lzdGEgbyBlbiBvdHJhIHDDoWdpbmEgZGViZSBpciBlbiBlbCBkaXJlY3RvcmlvIDxlbT5jb250ZW50LzwvZW0+Lg0KICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgPGRpdiBpZD0icGxheV9zY29ybSI+PC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9ib2R5Pg0KPC9odG1sPg==");
        return Promise.resolve(value);
    }

    /*
    Will add a new resource in the directory structure at the given path
    resouce: { type: F|D, name: string, file: Blob | null }
    returns: { succeed: true | false, message: string };
    */
    getContent(dco) {
        const key = 'content_'+dco.id;
        //const value = readStoreKey(key, "");
        const value = readStoreKey(key, "PCFET0NUWVBFIGh0bWw+DQo8aHRtbD4NCjxoZWFkPg0KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4NCiAgICA8bGluayByZWw9InNob3J0Y3V0IGljb24iIGhyZWY9ImltZy9pY29uLnN2ZyI+DQogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCBtYXhpbXVtLXNjYWxlPTEsIHVzZXItc2NhbGFibGU9bm8iPg0KICAgIDx0aXRsZT5FamVtcGxvIGRlIGVsZW1lbnRvcyBwYXJhIGxvcyBjdXJzb3M8L3RpdGxlPg0KICAgIDxsaW5rIGhyZWY9ImNvbXBvbmVudHMvanF1ZXJ5L2Nzcy9jdXN0b20vanF1ZXJ5LXVpLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KICAgIDxsaW5rIGhyZWY9ImNvbXBvbmVudHMvaW9uaWNvbnMvY3NzL2lvbmljb25zLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KICAgIDxsaW5rIGhyZWY9ImNvbXBvbmVudHMvcGl0L2Nzcy9qcGl0X3F1aXouY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIj4NCiAgICA8bGluayBocmVmPSJjb21wb25lbnRzL3BpdC9jc3MvanBpdF9tYXJrLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyI+DQogICAgPGxpbmsgaHJlZj0iY29tcG9uZW50cy9waXQvY3NzL2pwaXRfd29yZHB1enpsZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KICAgIDxsaW5rIGhyZWY9ImNvbXBvbmVudHMvcGl0L2Nzcy9qcGl0X2Nyb3Nzd29yZC5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KICAgIDxsaW5rIGhyZWY9ImNvbXBvbmVudHMvcGl0L2Nzcy9qcGl0X3pvb20uY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIj4NCiAgICA8bGluayBocmVmPSJjb21wb25lbnRzL3BpdC9jc3MvanBpdF9tZW1vcnkuY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIj4NCiAgICA8bGluayBocmVmPSJjb21wb25lbnRzL2Nzc2NpcmNsZS9jaXJjbGUubWluLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyI+DQogICAgPCEtLSBGb250IEF3ZXNvbWUgLS0+DQogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJjc3MvZm9udC1hd2Vzb21lLTQuNy4wL2Nzcy9mb250LWF3ZXNvbWUubWluLmNzcyI+DQoNCiAgICA8c2NyaXB0IHNyYz0iY29tcG9uZW50cy9qcXVlcnkvanF1ZXJ5Lm1pbi5qcyI+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCBzcmM9ImNvbXBvbmVudHMvanF1ZXJ5L2pxdWVyeS11aS5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9ImNvbXBvbmVudHMvanF1ZXJ5LW1vYmlsZS9qcXVlcnkudWkudG91Y2gtcHVuY2gubWluLmpzIj48L3NjcmlwdD4NCg0KPCEtLWpRdWVyeSBjb21wb25lbnRzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSJjb21wb25lbnRzL3R3ZW50eXR3ZW50eS9qcy9qcXVlcnkuZXZlbnQubW92ZS5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0iY29tcG9uZW50cy90d2VudHl0d2VudHkvanMvanF1ZXJ5LnR3ZW50eXR3ZW50eS5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImNvbXBvbmVudHMvdHdlbnR5dHdlbnR5L2Nzcy90d2VudHl0d2VudHkuY3NzIiB0eXBlPSJ0ZXh0L2NzcyIgbWVkaWE9InNjcmVlbiIgLz4NCg0KICAgIDxzY3JpcHQgc3JjPSJjb21wb25lbnRzL21lZGlhZWxlbWVudGpzL21lZGlhZWxlbWVudC1hbmQtcGxheWVyLm1pbi5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImNvbXBvbmVudHMvbWVkaWFlbGVtZW50anMvbWVkaWFlbGVtZW50cGxheWVyLmNzcyIgdHlwZT0idGV4dC9jc3MiIC8+DQoNCiAgICA8c2NyaXB0IHNyYz0iY29tcG9uZW50cy9tYXBoaWxpZ2h0L2pxdWVyeS5tYXBoaWxpZ2h0Lm1pbi5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjwhLS1FbmQgalF1ZXJ5IGNvbXBvbmVudHMgLS0+DQoNCiAgICA8c2NyaXB0IHNyYz0iY29tcG9uZW50cy9waXQvanBpdF9hcGkuanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPSJjb21wb25lbnRzL3BpdC91dGlsaXRpZXMvanBpdF91dGlsaXRpZXMuanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPSJjb21wb25lbnRzL3BpdC9hY3Rpdml0eS9qcGl0X2FjdGl2aXR5LmpzIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0iY29tcG9uZW50cy9waXQvcmVzb3VyY2VzL2pwaXRfcmVzb3VyY2UuanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPSJjb21wb25lbnRzL3BpdC9hY3Rpdml0eS9xdWl6L2pwaXRfYWN0aXZpdHlfcXVpei5qcyI+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCBzcmM9ImNvbXBvbmVudHMvcGl0L2FjdGl2aXR5L21hcmsvanBpdF9hY3Rpdml0eV9tYXJrLmpzIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0iY29tcG9uZW50cy9waXQvYWN0aXZpdHkvd29yZHB1enpsZS9qcGl0X2FjdGl2aXR5X3dvcmRwdXp6bGUuanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPSJjb21wb25lbnRzL3BpdC9hY3Rpdml0eS9kcm9wcGFibGUvanBpdF9hY3Rpdml0eV9kcm9wcGFibGUuanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPSJjb21wb25lbnRzL3BpdC9hY3Rpdml0eS9jcm9zc3dvcmQvanBpdF9hY3Rpdml0eV9jcm9zc3dvcmQuanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPSJjb21wb25lbnRzL3BpdC9hY3Rpdml0eS9jbG96ZS9qcGl0X2FjdGl2aXR5X2Nsb3plLmpzIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0iY29tcG9uZW50cy9waXQvYWN0aXZpdHkvZm9ybS9qcGl0X2FjdGl2aXR5X2Zvcm0uanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPSJjb21wb25lbnRzL3BpdC9hY3Rpdml0eS9tZW1vcnkvanBpdF9hY3Rpdml0eV9tZW1vcnkuanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPSJjb21wb25lbnRzL3BpdC9hY3Rpdml0eS9zb3J0YWJsZS9qcGl0X2FjdGl2aXR5X3NvcnRhYmxlLmpzIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0iY29tcG9uZW50cy9waXQvYWN0aXZpdHkvY2hlY2svanBpdF9hY3Rpdml0eV9jaGVjay5qcyI+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCBzcmM9ImNvbXBvbmVudHMvcGl0L3Jlc291cmNlcy9tb3ZpL2pwaXRfcmVzb3VyY2VfbW92aS5qcyI+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCBzcmM9ImNvbXBvbmVudHMvcGl0L3Jlc291cmNlcy96b29tL2pwaXRfcmVzb3VyY2Vfem9vbS5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8c2NyaXB0IHNyYz0ianMvYXBwLmpzIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0ianMvaW5pdC5qcyI+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCBzcmM9ImpzL2xhbmcuZXMuanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPSJqcy9saWIuanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPSJqcy9tb2JpbGVsaWIuanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPSJqcy9zdG9yaWVzLmpzIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0iY29tcG9uZW50cy9zY29ybS9TQ09STV8xMl9BUElXcmFwcGVyLmpzIj4gPC9zY3JpcHQ+DQogICAgPHNjcmlwdCBzcmM9ImNvbXBvbmVudHMvc2Nvcm0vc2Nvcm1fYXBpLmpzIj4gPC9zY3JpcHQ+DQoNCiAgICA8c3R5bGUgdHlwZT0ndGV4dC9jc3MnPg0KDQogICAgICAgIGJvZHkgew0KICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNDIsIDI0MiwgMjQyLCAwLjcpOw0KICAgICAgICB9DQoNCiAgICAgICAgYm9keS5sb2FkaW5nIHsNCiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgICAgICAgfQ0KDQogICAgICAgIGJvZHkubG9hZGluZzphZnRlciB7DQogICAgICAgICAgICBjb250ZW50OiAiIjsNCiAgICAgICAgICAgIGJhY2tncm91bmQ6IHVybChpbWcvbG9hZGluZy5naWYpIG5vLXJlcGVhdCBib3R0b20gY2VudGVyOw0KICAgICAgICAgICAgd2lkdGg6IDEzMHB4Ow0KICAgICAgICAgICAgaGVpZ2h0OiAzMHB4Ow0KICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7DQogICAgICAgICAgICBtYXJnaW46IGF1dG87DQogICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMjBweDsNCiAgICAgICAgfQ0KDQogICAgICAgIGJvZHkubG9hZGluZyAjYm9keSB7DQogICAgICAgICAgICBkaXNwbGF5OiBub25lOw0KICAgICAgICB9DQogICAgPC9zdHlsZT4NCg0KPC9oZWFkPg0KPGJvZHkgY2xhc3M9ImxvYWRpbmciIGRhdGEtZGVidWc9InRydWUiIGRhdGEtZGlzcGxheS1tb2RlPSJvbmx5cGFnZXMiIGRhdGEtYXBwcm92ZS1saW1pdD0iNzAiIGRhdGEtYWN0aXZpdGllcy1wZXJjZW50YWplPSI2MCIgZGF0YS1tb2JpbGUtbW9kZT0iNTEyIj4NCiAgICA8ZGl2IGlkPSJib2R5IiBjbGFzcz0ibm90X3ByaW50Ij4NCiAgICAgICAgPGRpdiBpZD0ibm90X3Njb3JtX21zZyIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48L2Rpdj4NCg0KICAgICAgICA8aGVhZGVyIG1haW50aXRsZT0iRWR1Y2FjacOzbiB2aXJ0dWFsIHkgVElDIiBzdWJ0aXRsZT0iUGxhbnRpbGxhIHBhcmEgb2JqZXRvcyB2aXJ0dWFsZXMgZGUgYXByZW5kaXphamUiPg0KICAgICAgICAgICAgPG5hdiBsYWJlbD0iUHJpbmNpcGFsIiBjbGFzcz0iaG9yaXpvbnRhbCBtYWluIiBkYXRhLW9mZnNldD0idHJ1ZSI+DQogICAgICAgICAgICAgICAgPG1lbnU+DQogICAgICAgICAgICAgICAgICAgIDxtZW51aXRlbSBsYWJlbD0iQ09OVEVYVFVBTElaQUNJw5NOIiBkYXRhLXBhZ2U9InBhZy1pbmljaW8iPjwvbWVudWl0ZW0+DQogICAgICAgICAgICAgICAgICAgIDxtZW51aXRlbSBsYWJlbD0iRVNRVUVNQSIgZGF0YS1wYWdlPSJwYWctZXNxdWVtYSI+PC9tZW51aXRlbT4NCiAgICAgICAgICAgICAgICAgICAgPG1lbnVpdGVtIGxhYmVsPSJDT05URU5JRE8iPg0KICAgICAgICAgICAgICAgICAgICA8IS0tIDxtZW51aXRlbSBsYWJlbD0iQ09NUE9ORU5URVMiPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxtZW51Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZW51aXRlbSBsYWJlbD0iMS4gVGV4dG9zIGVzcGVjaWFsZXMiIGRhdGEtcGFnZT0icGFnLXRleHRvcyI+PC9tZW51aXRlbT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWVudWl0ZW0gbGFiZWw9IjIuIE11bHRpbWVkaWEiIGRhdGEtcGFnZT0icGFnLW1lZGlhIj48L21lbnVpdGVtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZW51aXRlbSBsYWJlbD0iMy4gRm9ybWF0byBkZSBjb250ZW5pZG8iIGRhdGEtcGFnZT0icGFnLWNvbnRlbmlkb2ludGVyYWN0aXZvIj48L21lbnVpdGVtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZW51aXRlbSBsYWJlbD0iNC4gQWN0aXZpZGFkZXMiIGRhdGEtcGFnZT0icGFnLWFjdGl2aWRhZGVzIj48L21lbnVpdGVtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZW51aXRlbSBsYWJlbD0iNS4gUmVmZXJlbmNpYXMiIGRhdGEtcGFnZT0icGFnLXJlZmVyZW5jaWFzIj48L21lbnVpdGVtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZW51aXRlbSBsYWJlbD0iNi4gTWFxdWV0YWNpw7NuIiBkYXRhLXBhZ2U9InBhZy1tYXF1ZXRhY2lvbiI+PC9tZW51aXRlbT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbWVudT4NCiAgICAgICAgICAgICAgICAgICAgPC9tZW51aXRlbT4NCg0KDQogICAgICAgICAgICAgICAgPC9tZW51Pg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8bmF2IGxhYmVsPSJDYXJhY3RlcsOtc3RpY2FzIGdsb2JhbGVzIiBjbGFzcz0iZ2xvYmFscyI+DQogICAgICAgICAgICAgICAgPG1lbnU+DQogICAgICAgICAgICAgICAgICA8bWVudWl0ZW0gIGRhdGEtcGFnZT0icGFnLWNyZWRpdG9zIj48L21lbnVpdGVtPg0KICAgICAgICAgICAgICAgICAgPG1lbnVpdGVtICBkYXRhLXBhZ2U9InBhZy1iaWJsaW9ncmFmaWEiPjwvbWVudWl0ZW0+DQogICAgICAgICAgICAgICAgICA8bWVudWl0ZW0gZGF0YS1nbG9iYWwtaWQ9InJlc3VsdHMiPjwvbWVudWl0ZW0+DQogICAgICAgICAgICAgICAgICA8bWVudWl0ZW0gZGF0YS1nbG9iYWwtaWQ9InJldHVybiI+DQogICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Ik1heGltaXphciIgY2xhc3M9ImN1c3RvbS1tYXhpIHRvb2x0aXAgbWF4aW1pemUiIGRhdGEtcG9zaXRpb24tYXQ9InRvcCI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJNaW5pbWl6YXIiIGNsYXNzPSJjdXN0b20tbWluaSB0b29sdGlwIG1pbmltaXplIiBkYXRhLXBvc2l0aW9uLWF0PSJ0b3AiPjwvaT4NCiAgICAgICAgICAgICAgICAgIDwvbWVudWl0ZW0+DQogICAgICAgICAgICAgICAgICA8bWVudWl0ZW0gZGF0YS1nbG9iYWwtaWQ9ImNsb3NlX2FsbCI+PC9tZW51aXRlbT4NCiAgICAgICAgICAgICAgICA8L21lbnU+DQogICAgICAgICAgICA8L25hdj4NCiAgICAgICAgICAgIDxoMiBjbGFzcz0icGFnZS10aXRsZSI+PC9oMj4NCiAgICAgICAgPC9oZWFkZXI+DQoNCiAgICAgICAgPG1haW4gc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4NCg0KICAgICAgICAgICAgPHNlY3Rpb24gaWQ9InBhZy1pbmljaW8iIHB0aXRsZT0iUHJlc2VudGFjacOzbiI+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94X21lZGlhIiA+DQogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iY29udGVudC9iYW5uZXIucG5nIiBhbHQ9IkJhbm5lciBwcmluY2lwYWwiIC8+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8aDM+SW50cm9kdWNjacOzbjwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgRW4gZXN0ZSBlc3BhY2lvIGVuY29udHJhcsOhIGVqZW1wbG9zIGRlIGxvcyBjb250cm9sZXMgcXVlIHNlIHB1ZWRlbiB1dGlsaXphciBwYXJhIGRhciBmb3JtYXRvIGEgbG9zIGNvbnRlbmlkb3MgZGVsIGRvY3VtZW50byB5IHBhcmEgY29uc3RydWlyIHLDoXBpZGFtZW50ZSBhY3RpdmlkYWRlcywgYWRlbcOhcyBkZSBpbnN0cnVjY2lvbmVzIHBhcmEgdXNhciBsb3MgY29udHJvbGVzIGUgaW5mb3JtYWNpw7NuIHBhcmEgZXN0YW5kYXJpemFyIGVsIHByb2Nlc28gZGUgbW9udGFqZS4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgIEVzdGEgcGxhbnRpbGxhIGVzdMOhIGRpc2XDsWFkYSBwYXJhIHNpbXBsaWZpY2FyIGVsIG1vbnRhamUgZGUgbG9zIGRvY3VtZW50b3MsIHNvcG9ydGFuZG8gZWwgZW1wYXF1ZXRhbWllbnRvIFNDT1JNLCByZWR1Y2llbmRvIGxvcyBjb25vY2ltaWVudG9zIHTDqWNuaWNvcyBuZWNlc2FyaW9zIHBhcmEgZWwgbW9udGFqZSB5L28gcGVyc29uYWxpemFjacOzbiwgZW50cmUgb3RyYXMgY2FyYWN0ZXLDrXN0aWNhcyBvcGVyYXRpdmFzOyBubyBvYnN0YW50ZSwgZGFkbyBxdWUgc3UgbW9udGFqZSBzZSBkYSBtZWRpYW50ZSBIVE1ML0NTUywgZXMgcHJlY2lzbyB0ZW5lciBjb25vY2ltaWVudG9zIGLDoXNpY29zIGRlIGxvcyBtaXNtb3MgeSByZXNwZXRhciBsYXMgZGVmaW5pY2lvbmVzIHkgcmVnbGFzIHF1ZSBzZSBoYWNlbiBlbiBjYWRhIHNlY2Npw7NuIHlhIHF1ZSB1biBlcnJvciBlbiBlbCBIVE1MIHB1ZWRlIGhhY2VyIGluc2VydmlibGUgbGEgcGxhbnRpbGxhIGNvbXBsZXRhLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIiBpZD0iY29udGV4dF8wIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPlDDoWdpbmFzPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBMYXMgcMOhZ2luYXMgc29uIGxvcyBibG9xdWVzIHByaW5jaXBhbGVzIHF1ZSBkaXZpZGVuIGVsIGNvbnRlbmlkby4gQ2FkYSBww6FnaW5hIGVzIHVuIGVsZW1lbnRvIDxlbT5zZWN0aW9uPC9lbT4gZGVudHJvIGRlbCBlbGVtZW50byA8ZW0+bWFpbjwvZW0+LiBMYXMgcMOhZ2luYXMgdGllbmVuIGxvcyBzaWd1aWVudGVzIGF0cmlidXRvcyBlc3BlY2lhbGVzOg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZGF0YV9saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPmlkPC9zdHJvbmc+OiBFbCBpZGVudGlmaWNhZG9yIMO6bmljbyBxdWUgc2Vydmlyw6EgY29tbyByZWZlcmVuY2lhIHBhcmEgZW5sYXphcmxvIGNvbiBsb3MgbWVuw7pzIHUgb3Ryb3MgZW5sYWNlcy48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxzdHJvbmc+cHRpdGxlPC9zdHJvbmc+IChvcGNpb25hbCk6IFVuIHTDrXR1bG8gcXVlIGlkZW50aWZpY2Fyw6EgbGEgcMOhZ2luYSBkZSBjYXJhIGFsIGxlY3Rvci4gU2kgZWwgdMOtdHVsbyBzZSBlc3RhYmxlY2UgeSBlbiBlbCBkb2N1bWVudG8gaGF5IHVuIGNvbnRlbmVkb3IgY29uIGxhIGNsYXNlIDxlbT5wYWdlLXRpdGxlPC9lbT4sIGVsIHTDrXR1bG8gc2UgYWdyZWdhIGVuIGRpY2hvIGNvbnRlbmVkb3IgY3VhbmRvIGxhIHDDoWdpbmEgc2UgaGFjZSBhY3RpdmEuPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBMYXMgcMOhZ2luYXMgdGllbmVuIHVuYSDDum5pY2EgZGl2aXNpw7NuIHF1ZSBzb24gbGFzIHN1YnDDoWdpbmFzLiBUb2RhIHDDoWdpbmEgZGViZSB0ZW5lciBjb21vIG3DrW5pbW8gdW5hIHN1YnDDoWdpbmEuIExhIHByaW1lcmEgbyDDum5pY2Egc3VicMOhZ2luYSBkZSB1bmEgcMOhZ2luYSBlcyBsYSBxdWUgc2UgbXVlc3RyYSBlbiB1biBwcmltZXIgbW9tZW50byBjdWFuZG8gc2UgYWJyZSBsYSBww6FnaW5hLiBMYXMgc3VicMOhZ2luYXMgc29uIGVsZW1lbnRvcyBkZSB0aXBvIDxlbT5kaXY8L2VtPiBjb24gbGEgY2xhc2UgPGVtPnN1YnBhZ2U8L2VtPi4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgIEEgbGFzIHDDoWdpbmFzIHNlIHB1ZWRlIGxsZWdhciBkZXNkZSB1biBtZW7DuiBvIGRlc2RlIHVuIHbDrW5jdWxvIGRlbnRybyBkZWwgY29udGVuaWRvLiBBIGNvbnRpbnVhY2nDs24gc2UgbXVlc3RyYSBjb21vIGVqZW1wbG8gdW5hIHNlcmllIGRlIGVubGFjZXMgYXB1bnRhbmRvIGEgcMOhZ2luYXMgZXNwZWPDrWZpY2FzIHV0aWxpemFuZG8gc3UgaWRlbnRpZmljYWRvciDDum5pY28uIFNpbiBlbWJhcmdvLCBsYSBhY2Npw7NuIGRlIHZpbmN1bGFyIHNlIHB1ZWRlIGhhY2VyIGVuIG90cm9zIGVsZW1lbnRvcyBIVE1MLCBubyBuZWNlc2FyaWFtZW50ZSBlbmxhY2VzLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxvbCBjbGFzcz0ib2xfY291bnRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iamF2YXNjcmlwdDo7IiBkYXRhLXBhZ2U9InBhZy10ZXh0b3MiPlRleHRvcyBlc3BlY2lhbGVzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iamF2YXNjcmlwdDo7IiBkYXRhLXBhZ2U9InBhZy1tZWRpYSI+TXVsdGltZWRpYTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9ImphdmFzY3JpcHQ6OyIgZGF0YS1wYWdlPSJwYWctY29udGVuaWRvaW50ZXJhY3Rpdm8iPkZvcm1hdG8gZGUgY29udGVuaWRvPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iamF2YXNjcmlwdDo7IiBkYXRhLXBhZ2U9InBhZy1hY3RpdmlkYWRlcyI+QWN0aXZpZGFkZXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJqYXZhc2NyaXB0OjsiIGRhdGEtcGFnZT0icGFnLXJlZmVyZW5jaWFzIj5SZWZlcmVuY2lhczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9ImphdmFzY3JpcHQ6OyIgZGF0YS1wYWdlPSJwYWctbWFxdWV0YWNpb24iPk1hcXVldGFjacOzbjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICA8L29sPg0KICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICBQYXJhIHJlYWxpemFyIGxhIGFjY2nDs24gYW50ZXJpb3IgYmFzdGEgY29uIGFncmVnYXIgYSBjdWFscXVpZXIgZWxlbWVudG8gZWwgYXRyaWJ1dG8gPGVtPmRhdGEtcGFnZTwvZW0+IGNvbiBlbCB2YWxvciBpZ3VhbCBhbCBpZGVudGlmaWNhZG9yIGRlIGxhIHDDoWdpbmEgYSBjYXJnYXIuIEVqZW1wbG86PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICA8cHJlPiAgICAmbHQ7YSBocmVmPSIjIiBkYXRhLXBhZ2U9InBhZy10ZXh0b3MiJmd0O1RleHRvcyBlc3BlY2lhbGVzJmx0Oy9hJmd0OzwvcHJlPg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPkRpc3Bvc2l0aXZvczwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgQWwgbW9tZW50byBkZSBtb3N0cmFyIGVsIGNvbnRlbmlkbyBubyBzZSBoYWNlIHVuYSBkZXRlY2Npw7NuIHJlYWwgZGUgZGlzcG9zaXRpdm9zIHNpbm8gcXVlIHNlIGFzdW1lbiBkb3MgcG9zaWJpbGlkYWRlcyBkZXBlbmRpZW5kbyBkZWwgYW5jaG8gZGVsIG5hdmVnYWRvciBkZXNkZSBlbCBxdWUgc2UgdmlzaXRhIGVsIGRvY3VtZW50by4gTGEgcHJpbWVyYSBlcyBsYSBwb3IgZGVmZWN0byBvIGRlIGVzY3JpdG9yaW8geSBsYSBzZWd1bmRhIGVzIGxhIGRlIG3Ds3ZpbC4gUG9yIGRlZmVjdG8gc2UgYXN1bWUgcXVlIHVuIGRpc3Bvc2l0aXZvIGVzIG3Ds3ZpbCBzaSB0aWVuZSB1biBhbmNobyBpbmZlcmlvciBhIDxzdHJvbmc+NTEyIHBpeGVsZXM8L3N0cm9uZz4sIGF1bnF1ZSBlc2UgdmFsb3IgZXMgY29uZmlndXJhYmxlIG1lZGlhbnRlIGVsIGF0cmlidXRvIDxlbT5kYXRhLW1vYmlsZS1tb2RlPC9lbT4gZGVmaW5pZG8gZW4gbGEgZXRpcXVldGEgPGVtPmJvZHk8L2VtPi4gRGljaG8gYXRyaWJ1dG8gYWNlcHRhIGxvcyB2YWxvcmVzOiA8c3Ryb25nPjA8L3N0cm9uZz4gbyA8c3Ryb25nPmZhbHNlPC9zdHJvbmc+IHBhcmEgbm8gc2VwYXJhciBsb3MgZGlzcG9zaXRpdm9zIHNpbm8gdXRpbGl6YXIgw7puaWNhbWVudGUgZWwgbW9kbyBkZSBlc2NyaXRvcmlvOyA8c3Ryb25nPnRydWU8L3N0cm9uZz4gcGFyYSB1dGlsaXphciBsYSBjb25maWd1cmFjacOzbiBwb3IgZGVmZWN0bzsgbyB1biB2YWxvciBudW3DqXJpY28gaW5kaWNhbmRvIGVsIGFuY2hvIGVuIHBpeGVsZXMgcXVlIGRldGVybWluYSBlbCBsw61taXRlIHF1ZSBzZXBhcmEgYW1ib3MgbW9kb3MsIHPDs2xvIGVsIG7Dum1lcm8sIHNpbiB1bmlkYWRlcyBkZSBtZWRpZGEuIFNpIG5vIHNlIGVzdGFibGVjZSBlbCBhdHJpYnV0bywgc2UgdXRpbGl6YSBsYSBjb25maWd1cmFjacOzbiBwb3IgZGVmZWN0by4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgIExhIGRldGVjY2nDs24gbm8gc2UgaGFjZSBjb25zaWRlcmFuZG8gbG9zIHRpcG9zIGRlIGRpc3Bvc2l0aXZvcyBkYWRhcyBtdWNoYXMgcmF6b25lcyBvcGVyYXRpdmFzLCBlbnRyZSBlbGxhcyBxdWUgc2luIGltcG9ydGFyIGVsIGRpc3Bvc2l0aXZvIHF1ZSBzZSB0ZW5nYSwgbXVjaGFzIGFjY2lvbmVzIHF1ZSBzZSByZWFsaXphbiBlc3TDoW4gc3VqZXRhcyBhbCBlc3BhY2lvIGRpc3BvbmlibGUgZW4gcGFudGFsbGEgeSBlbiBhbGd1bm9zIGNhc29zIGVzIHBvc2libGUgcXVlIGluY2x1c28gdW4gZGlzcG9zaXRpdm8gbcOzdmlsIHRlbmdhIG1heW9yIHJlc29sdWNpw7NuIHF1ZSBhbGd1bm9zIGVxdWlwb3MgZGUgZXNjcml0b3Jpby4gQWRlbcOhcywgY29uIGxhcyBwYW50YWxsYXMgdMOhY3RpbGVzIHNlIGVsaW1pbsOzIHVuYSBkZSBsYXMgY2FyYWN0ZXLDrXN0aWNhcyBkaWZlcmVuY2lhZG9yYXMgZGUgbG9zIG3Ds3ZpbGVzIGNvbW8gZXMgZWwgInRvY2FyIiB5IGFzw60gdmFuIGFwYXJlY2llbmRvIGNhcmFjdGVyw61zdGljYXMgdMOpY25pY2FzIHF1ZSBkaWZ1bWluYW4gY2FkYSB2ZXogbcOhcyBsYSBkaWZlcmVuY2lhIGVudHJlIGFtYm9zIHRpcG9zIGRlIGRpc3Bvc2l0aXZvcy4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBhcmEgaW5kaWNhciBjb250ZW5pZG9zIHF1ZSBzZSBtdWVzdHJhbiBlbiB1biB0aXBvIGRlIGRpc3Bvc2l0aXZvIHkgbm8gZW4gZWwgb3Rybywgc2UgcHVlZGVuIHV0aWxpemFyIGxhcyBjbGFzZXM6IDxlbT5vbmx5bW9iaWxlPC9lbT4gbyA8ZW0+bm90bW9iaWxlPC9lbT4uIFBvciBlamVtcGxvOg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwcmU+DQombHQ7c3Ryb25nJmd0Ow0KICBFc3TDoSBlbiBtb2RvDQogICImbHQ7c3BhbiBjbGFzcz0ib25seW1vYmlsZSImZ3Q7ZGlzcG9zaXRpdm8gbcOzdmlsJmx0Oy9zcGFuJmd0Ow0KICAmbHQ7c3BhbiBjbGFzcz0ibm90bW9iaWxlIiZndDtlc2NyaXRvcmlvJmx0Oy9zcGFuJmd0OyINCiZsdDsvc3Ryb25nJmd0Ow0KICAgICAgICAgICAgICAgICAgICA8L3ByZT4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBFbCBjw7NkaWdvIGFudGVyaW9yIHNlIHZlcsOhIGRpZmVyZW50ZSBhIGNvbnRpbnVhY2nDs24gc2Vnw7puIGVsIHRpcG8gZGUgZGlzcG9zaXRpdm8gKGFuY2hvLCByZWFsbWVudGUpIGRlc2RlIGVsIHF1ZSBlc3TDqSB2aXN1YWxpemFuZG8gZXN0ZSBjb250ZW5pZG86DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPkVzdMOhIGVuIG1vZG8gIjxzcGFuIGNsYXNzPSJvbmx5bW9iaWxlIj5kaXNwb3NpdGl2byBtw7N2aWw8L3NwYW4+PHNwYW4gY2xhc3M9Im5vdG1vYmlsZSI+ZXNjcml0b3Jpbzwvc3Bhbj4iPC9zdHJvbmc+Lg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPk90cmFzIGNvbmZpZ3VyYWNpb25lczwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxwPlNlIGVuY3VlbnRyYW4gZGlzcG9uaWJsZXMgb3Ryb3MgcGFyw6FtZXRyb3MgZGUgY29uZmlndXJhY2nDs24gcGFyYSBkZWZpbmlyIGNvbXBvcnRhbWllbnRvcyBkZWwgZG9jdW1lbnRvLiBBIGNvbnRpbnVhY2nDs24gc2UgcHJlc2VudGEgdW5hIGRlc2NyaXBjacOzbiBkZSBjYWRhIHVubyBkZSBlbGxvcywgY29uc2lkZXJhbmRvIHF1ZSBkZWJlbiBzZXIgZGVmaW5pZG9zIGNvbW8gYXRyaWJ1dG9zIGVuIGxhIGV0aXF1ZXRhIDxlbT5ib2R5PC9lbT4sIGFkZW3DoXMsIHRvZG9zIHNvbiBvcGNpb25hbGVzIHkgZW4gY2FzbyBkZSBubyBzZXIgZGVmaW5pZG9zIHNlIGFwbGljYXLDoSBlbCB2YWxvciBwb3IgZGVmZWN0by48L3A+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZGF0YV9saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPmRhdGEtZGVidWc9Ils8ZW0+dHJ1ZTwvZW0+IHwgZmFsc2VdIjwvc3Ryb25nPjogQ29sb2NhIGVsIGRvY3VtZW50byBlbiBtb2RvIGRlcHVyYWNpw7NuLiBFcyDDunRpbCBzb2JyZSB0b2RvIHBhcmEgZWwgbW9udGFqZSB5IGFudGVzIGRlIGRlc2hhYmlsaXRhcmxvIHNlIGRlYmUgPGNpdGU+bWluaWZpY2FyPC9jaXRlPiBsb3MgZXN0aWxvcyBDU1MuPC9saT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxzdHJvbmc+ZGF0YS1kaXNwbGF5LW1vZGU9Ils8ZW0+b25seXBhZ2VzPC9lbT4gfCBzbGlkZXNdIjwvc3Ryb25nPjogRGV0ZXJtaW5hIHNpIGVsIGNvbnRlbmlkbyBlcyBtb3N0cmFkbyBjYWRhIHN1YnDDoWdpbmEgYSBsYSB2ZXogKDxzdHJvbmc+c2xpZGVzPC9zdHJvbmc+KSBvIHNpIHNlIHB1ZXN0cmFuIHRvZGFzIGxhcyBzdWJww6FnaW5hcyBlbiB1bmEgbWlzbWEgcMOhZ2luYSAoPHN0cm9uZz5vbmx5cGFnZXM8L3N0cm9uZz4pLjwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPmRhdGEtYXBwcm92ZS1saW1pdD0iWzxlbT5uw7ptZXJvPC9lbT5dIjwvc3Ryb25nPjogVW4gdmFsb3IgbnVtw6lyaWNvIHF1ZSBpbmRpY2EgZWwgcG9yY2VudGFqZSBjb3JyZXNwb25kaWVudGUgYWwgbMOtbWl0ZSBpbmZlcmlvciBjb24gZWwgY3VhbCBzZSBhcHJ1ZWJhIHVuYSBhY3RpdmlkYWQuIEVzdGEgaW5mb3JtYWNpw7NuIGRldGVybWluYSBjb21vIHNlIG11ZXN0cmFuIGFsZ3Vub3MgbWVuc2FqZXMgZGUgcmV0cm9hbGltZW50YWNpw7NuIHkgY29tbyBzZSBjb21wb3J0YW4gYWxndW5hcyBhY3RpdmlkYWRlcy4gRWwgdmFsb3IgcG9yIGRlZmVjdG8gZXMgPHN0cm9uZz4xMDA8L3N0cm9uZz4sIGVzIGRlY2lyLCB1bmEgYWN0aXZpZGFkIGRlYmUgZXN0YXIgY29ycmVjdGEgZW4gdW4gMTAwJSBwYXJhIGNvbnNpZGVyYXJzZSBjb21wbGV0YWRhLjwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPmRhdGEtYWN0aXZpdGllcy1wZXJjZW50YWplPSJbPGVtPm7Dum1lcm88L2VtPl0iPC9zdHJvbmc+OiBVbiB2YWxvciBudW3DqXJpY28gcXVlIGluZGljYSBlbCBwb3JjZW50YWplIHF1ZSBzZSBsZSBhc2lnbmEgY29tbyBwZXNvIGEgbGEgY2FsaWZpY2FjacOzbiBvYnRlbmlkYSBlbiBsYXMgYWN0aXZpZGFkZXMsIGVsIHBvcmNlbnRhamUgcmVzdGFudGUgc2UgYXNpZ25hIGEgbGEgcmV2aXNpw7NuL3Zpc2l0YSBkZSBsYXMgcMOhZ2luYXMgeSBzdWJww6FnaW5hcyBkZWwgZG9jdW1lbnRvLiBFcyBkZSBjb25zaWRlcmFyIHF1ZSBzb2xhbWVudGUgc2UgY29tcHV0YSBsYSBjYWxpZmljYWNpw7NuIG3DoXMgYWx0YSBvYnRlbmlkYSBlbiBsYSByZWFsaXphY2nDs24gZGUgdW5hIGFjdGl2aWRhZCwgaW5kZXBlbmRpZW50ZSBkZSBsb3MgZGVtw6FzIGludGVudG9zLiBTaSBlbCBkb2N1bWVudG8gc2UgZW5jdWVudHJhIGNvbW8gU0NPUk0sIHBhcmEgcXVlIHNlIGNvbnNpZGVyZSBjb21wbGV0YWRvIHNlIGRlYmUgYXByb2JhciBlbCAxMDAlLiBFbCB2YWxvciBwb3IgZGVmZWN0byBlcyA8c3Ryb25nPjYwPC9zdHJvbmc+LCBlcyBkZWNpciwgZWwgY29tcHV0byBkZSBsb3MgcmVzdWx0YWRvcyBvYnRlbmlkb3MgZW4gbGFzIGFjdGl2aWRhZGVzIGFwb3J0YSBlbCA2MCUgZGVsIHByb2dyZXNvIHkgbGEgbmF2ZWdhY2nDs24gcG9yIGxvcyBjb250ZW5pZG9zIGFwb3J0YSBlbCA0MCUgcmVzdGFudGUuPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvc2VjdGlvbj4NCg0KICAgICAgICAgICAgPHNlY3Rpb24gaWQ9InBhZy1lc3F1ZW1hIiBwdGl0bGU9IkVzcXVlbWEiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSI+DQogICAgICAgICAgICAgICAgPGltZyBjbGFzcz0ibWFwaGlsaWdodCIgc3JjPSJpbWcvZXNxdWVtYS5wbmciIGFsdD0iRXNxdWVtYSBkZSBjb250ZW5pZG9zIiB1c2VtYXA9IiNuZXdtYXAiIGRhdGEtbWFyay1zdHJva2UtY29sb3I9IkI5RTZGNSIgZGF0YS1tYXJrLWZpbGwtY29sb3I9IkI5RTZGNSIgZGF0YS1tYXJrLW9wYWNpdHk9IjAuNSIvPg0KICAgICAgICAgICAgICAgIDxtYXAgbmFtZT0ibmV3bWFwIiA+DQogICAgICAgICAgICAgICAgICA8YXJlYSBzaGFwZT0icmVjdCIgY29vcmRzPSIxNiwxNSwyMTEsMjU3IiBocmVmPSIjIiBhbHQ9IlRleHRvcyBlc3BlY2lhbGVzIiBkYXRhLXJlZj0icGFnLXRleHRvcyI+DQogICAgICAgICAgICAgICAgICA8YXJlYSBzaGFwZT0icmVjdCIgY29vcmRzPSIzMTcsMTYsNTEyLDI1OCIgaHJlZj0iIyIgYWx0PSJNdWx0aW1lZGlhIiBkYXRhLXJlZj0icGFnLW1lZGlhIj4NCiAgICAgICAgICAgICAgICAgIDxhcmVhIHNoYXBlPSJyZWN0IiBjb29yZHM9IjYzNSwxNSw4MzAsMjU3IiBocmVmPSIjIiBhbHQ9IkZvcm1hdG8gZGUgY29udGVuaWRvIiBkYXRhLXJlZj0icGFnLWNvbnRlbmlkb2ludGVyYWN0aXZvIj4NCiAgICAgICAgICAgICAgICAgIDxhcmVhIHNoYXBlPSJyZWN0IiBjb29yZHM9IjE3LDMyOCwyMTIsNTcwIiBocmVmPSIjIiBhbHQ9IkFjdGl2aWRhZGVzIiBkYXRhLXJlZj0icGFnLWFjdGl2aWRhZGVzIj4NCiAgICAgICAgICAgICAgICAgIDxhcmVhIHNoYXBlPSJjaXJjbGUiIGNvb3Jkcz0iNDEyLDQyMiw5MCIgaHJlZj0iIyIgYWx0PSJSZWZlcmVuY2lhcyIgZGF0YS1yZWY9InBhZy1yZWZlcmVuY2lhcyI+DQogICAgICAgICAgICAgICAgICA8YXJlYSBzaGFwZT0icG9seSIgY29vcmRzPSI2NDQsNDEwLDY3MywzNjksNzk1LDM2OSw4MjAsNDA3LDc4OSw0NDcsNjc3LDQ0NCw2NTgsNDI3IiBocmVmPSIjIiBhbHQ9Ik1hcXVldGFjacOzbiIgZGF0YS1yZWY9InBhZy1tYXF1ZXRhY2lvbiI+DQogICAgICAgICAgICAgICAgPC9tYXA+DQogICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9zZWN0aW9uPg0KDQogICAgICAgICAgICA8IS0tVGV4dG9zIGVzcGVjaWFsZXMtLT4NCiAgICAgICAgICAgIDxzZWN0aW9uIGlkPSJwYWctdGV4dG9zIiBwdGl0bGU9IjEuIFRleHRvcyBlc3BlY2lhbGVzIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPkVsZW1lbnRvcyBjb211bmVzPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBBIGNvbnRpbnVhY2nDs24sIGFsZ3Vub3MgZWxlbWVudG9zIGdlbsOpcmljb3MgcXVlIHNlIHV0aWxpemFuIGVuIGRpZmVyZW50ZXMgbW9tZW50b3MgY3VhbmRvIHNlIGludGVyYWN0w7phIGNvbiBsb3MgY29udGVuaWRvcy4gQWwgbGFkbyBkZSBjYWRhIHVubyBzZSBtdWVzdHJhIHN1IHJlc3BlY3RpdmEgZXRpcXVldGEuIE5vIHNlIGluY2x1eWUgZWwgZW5jYWJlemFkbyBkZSBuaXZlbCAxIHlhIHF1ZSBzZSB1dGlsaXphIGNvbW8gdMOtdHVsbyBwcmluY2lwYWwgeSBzb2xhbWVudGUgZGViZSBoYWJlciB1bm8gZW4gdG9kbyBlbCBkb2N1bWVudG8uDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICA8aDI+RW5jYWJlemFkbyBkZSBuaXZlbCAyICg8ZW0+aDI8L2VtPik8L2gyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkVuY2FiZXphZG8gZGUgbml2ZWwgMyAoPGVtPmgzPC9lbT4pPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxoND5FbmNhYmV6YWRvIGRlIG5pdmVsIDQgKDxlbT5oNDwvZW0+KTwvaDQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8aDU+RW5jYWJlemFkbyBkZSBuaXZlbCA1ICg8ZW0+aDU8L2VtPik8L2g1Pg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPkFwYXJpZW5jaWEgZGUgbG9zIDxhIGhyZWY9IiMiPmVubGFjZXM8L2E+ICg8ZW0+YTwvZW0+KS48L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPkFwYXJpZW5jaWEgZGUgdW4gPHN0cm9uZz50ZXh0byBkZXN0YWNhZG88L3N0cm9uZz4gKDxlbT5zdHJvbmc8L2VtPikuPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD5BcGFyaWVuY2lhIGRlIHVuIDxlbT50ZXh0byBkZSDDqW5mYXNpczwvZW0+ICg8ZW0+ZW08L2VtPikuPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD5BcGFyaWVuY2lhIGRlIGxhcyA8Y2l0ZT5jaXRhcyBjb3J0YXM8L2NpdGU+ICg8ZW0+Y2l0ZTwvZW0+KS48L3A+DQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+QmxvcXVlcyBkZSB0ZXh0bzwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgU2lydmVuIHBhcmEgZGFyIMOpbmZhc2lzIG8gY2F0ZWdvcml6YXIgbG9zIHRpcG9zIGRlIHRleHRvcyBlc3BlY2lhbGVzLiBQYXJhIHV0aWxpemFybG9zIGJhc3RhIGNvbiBhZ3JlZ2FyIGEgdW4gZWxlbWVudG8gPGVtPmRpdjwvZW0+IGxhIGNsYXNlIDxlbT5ib3gtdGV4dDwvZW0+IHkgcGFyYSBpbmRpY2FyIGVsIHRpcG8gZGUgdGV4dG8gc2UgdXRpbGl6YSB1bmEgbWFyY2EgcGVyc29uYWwsIGRlIGxhcyBjdWFsZXMgc2UgZW5jdWVudHJhbiBkZWZpbmlkYXMgcG9yIGRlZmVjdG8gbGFzIHNpZ3VpZW50ZTogPGVtPmltcG9ydGFudDwvZW0+LCA8ZW0+ZXhhbXBsZTwvZW0+LCA8ZW0+bm90ZTwvZW0+Lg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgUGFyYSBhc2lnbmFyIHVuIHTDrXR1bG8gYSB1biBibG9xdWUsIHNlIHV0aWxpemEgZWwgYXRyaWJ1dG8gPGVtPmxhYmVsPC9lbT4uDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+SW1wb3J0YW50ZTwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94LXRleHQgaW1wb3J0YW50IiBsYWJlbD0iSW1wb3J0YW50ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNlIHV0aWxpemEgbGEgY2xhc2UgPGVtPmltcG9ydGFudDwvZW0+IHkgZXMgcGFyYSBsb3MgcMOhcnJhZm9zIHF1ZSByZXF1aWVyZW4gdW4gw6luZmFzaXMuIEVqZW1wbG86PC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJlPg0KJmx0O2RpdiBjbGFzcz0iYm94LXRleHQgaW1wb3J0YW50IiBsYWJlbD0iSW1wb3J0YW50ZSImZ3Q7DQogICZsdDtwJmd0Ow0KICAgIEFjw6EgdW4gcMOhcnJhZm8gaW1wb3J0YW50ZSwNCiAgICBkZWwgcXVlIHNlIHJlcXVpZXJlIGhhY2VyIMOpbmZhc2lzLg0KICAgIFRlbmVyIGVuIGN1ZW50YSBxdWUgZWwgdGl0dWxvIHZhDQogICAgZGVudHJvIGRlbCBsYWJlbC4NCiAgJmx0Oy9wJmd0Ow0KJmx0Oy9kaXYmZ3Q7PC9wcmU+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5FamVtcGxvczwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveC10ZXh0IGV4YW1wbGUiIGxhYmVsPSJFamVtcGxvIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNlIHV0aWxpemEgbGEgY2xhc2UgPGVtPmV4YW1wbGU8L2VtPiB5IGVzIHBhcmEgbG9zIHDDoXJyYWZvcyBxdWUgbXVlc3RyYW4gdW4gZWplbXBsby4gRWplbXBsbzo8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICA8cHJlPg0KJmx0O2RpdiBjbGFzcz0iYm94LXRleHQgZXhhbXBsZSIgbGFiZWw9IkVqZW1wbG8iJmd0Ow0KICAmbHQ7cCZndDsNCiAgICBBY8OhIHVuIHDDoXJyYWZvIGRlIGVqZW1wbG8uDQogICZsdDsvcCZndDsNCiZsdDsvZGl2Jmd0Ow0KICAgICAgICAgICAgICAgICAgICAgICAgPC9wcmU+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5Bbm90YWNpb25lczwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveC10ZXh0IG5vdGUiIGxhYmVsPSJOb3RhIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNlIHV0aWxpemEgbGEgY2xhc2UgPGVtPm5vdGU8L2VtPiB5IGVzIHBhcmEgaGFjZXIgYW5vdGFjaW9uZXMuIEVqZW1wbG86PC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHByZT4NCiZsdDtkaXYgY2xhc3M9ImJveC10ZXh0IG5vdGUiIGxhYmVsPSJOb3RhIiZndDsNCiAgJmx0O3AmZ3Q7DQogICAgQWPDoSB1bmEgYW5vdGFjacOzbi4NCiAgJmx0Oy9wJmd0Ow0KJmx0Oy9kaXYmZ3Q7DQogICAgICAgICAgICAgICAgICAgICAgICA8L3ByZT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPkV4dGVuZGllbmRvIGVsIHNhYmVyPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94LXRleHQgYm94LXJlcXVpcmVkLWxpbmsiIGxhYmVsPSJFeHRlbmRpZW5kbyBlbCBzYWJlciI+DQogICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5FbmxhY2U6IDwvc3Ryb25nPjxhIGhyZWY9Imh0dHA6Ly93d3cudWRlbS5lZHUuY28vIiB0YXJnZXQ9Il9ibGFuayI+ZW5sYWNlPC9hPjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICA8cD48c3Ryb25nPkFjdGl2aWRhZCBzaWduaWZpY2F0aXZhPC9zdHJvbmc+PC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHA+U2UgdXRpbGl6YSBsYSBjbGFzZSA8ZW0+Ym94X3JlcXVpcmVkX2xpbms8L2VtPiB5IGVzIHBhcmEgbG9zIFDDoXJyYWZvcyBkZSB2w61uY3Vsb3MuIEVqZW1wbG86PC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHByZT4NCiZsdDtkaXYgY2xhc3M9ImJveC10ZXh0IGJveC1yZXF1aXJlZC1saW5rIiBsYWJlbD0iRXh0ZW5kaWVuZG8gZWwgc2FiZXIiJmd0Ow0KICAmbHQ7cCZndDsNCiAgICBBY8OhIHVuIHDDoXJyYWZvIGRlIHbDrW5jdWxvLg0KICAmbHQ7L3AmZ3Q7DQombHQ7L2RpdiZndDsNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcHJlPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+UG9kY2FzdDwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveC10ZXh0IHBvZGNhc3QiIGxhYmVsPSJwb2RjYXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICA8YXVkaW8gY29udHJvbHM+DQogICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIHNyYz0iY29udGVudC9zb3VuZHMvY29uc3RhbnRzcGVjdHJ1bW1lbG9keS5vZ2ciIHR5cGU9ImF1ZGlvL29nZyI+DQogICAgICAgICAgICAgICAgICAgICAgICBTdSBuYXZlZ2Fkb3Igbm8gc29wb3J0YSBlbCBjb21wb25lbnRlIGRlIGF1ZGlvDQogICAgICAgICAgICAgICAgICAgICAgPC9hdWRpbz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNlIHV0aWxpemEgbGEgY2xhc2UgPGVtPnBvZGNhc3Q8L2VtPiB5IGVzIHBhcmEgbGFzIGFub3RhY2lvbmVzLiBFamVtcGxvOjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwcmU+DQombHQ7ZGl2IGNsYXNzPSJib3gtdGV4dCBwb2RjYXN0IiBsYWJlbD0iUG9kY2FzdCImZ3Q7DQogICZsdDtwJmd0Ow0KICAgIEFjw6EgdW4gcG9kY2FzdC4NCiAgJmx0Oy9wJmd0Ow0KJmx0Oy9kaXYmZ3Q7DQogICAgICAgICAgICAgICAgICAgICAgICA8L3ByZT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPlZpZGVvPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94LXRleHQgdmlkZW8iIGxhYmVsPSJWaWRlbyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8cD5TZSB1dGlsaXphIGxhIGNsYXNlIDxlbT52aWRlbzwvZW0+IHkgZXMgcGFyYSBsYXMgYW5vdGFjaW9uZXMuIEVqZW1wbG86PC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHByZT4NCiZsdDtkaXYgY2xhc3M9ImJveC10ZXh0IHZpZGVvIiBsYWJlbD0iVmlkZW8iJmd0Ow0KICAmbHQ7cCZndDsNCiAgICBBY8OhIHVuIHZpZGVvLg0KICAmbHQ7L3AmZ3Q7DQombHQ7L2RpdiZndDsNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcHJlPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+QWN0aXZpZGFkPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94LXRleHQgYWN0aXZpZGFkIiBsYWJlbD0iQWN0aXZpZGFkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNlIHV0aWxpemEgbGEgY2xhc2UgPGVtPmFjdGl2aWRhZDwvZW0+IHkgZXMgcGFyYSBsYXMgYW5vdGFjaW9uZXMuIEVqZW1wbG86PC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHByZT4NCiZsdDtkaXYgY2xhc3M9ImJveC10ZXh0IGFjdGl2aWRhZCIgbGFiZWw9IkFjdGl2aWRhZCImZ3Q7DQogICZsdDtwJmd0Ow0KICAgIEFjw6EgdW5hIGFjdGl2aWRhZC4NCiAgJmx0Oy9wJmd0Ow0KJmx0Oy9kaXYmZ3Q7DQogICAgICAgICAgICAgICAgICAgICAgICA8L3ByZT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPkNvbmV4acOzbjwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveC10ZXh0IGNvbm5lY3Rpb24iIGxhYmVsPSIgIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNlIHV0aWxpemEgbGEgY2xhc2UgPGVtPmNvbm5lY3Rpb248L2VtPiB5IGVzIHBhcmEgbG9zIFDDoXJyYWZvcyBkZSBhY29wbGFtaWVudG8uIEVqZW1wbG86PC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHByZT4NCiZsdDtkaXYgY2xhc3M9ImJveC10ZXh0IGNvbm5lY3Rpb24iIGxhYmVsPSIgIiZndDsNCiAgJmx0O3AmZ3Q7DQogICAgQWPDoSB1biBww6FycmFmbyBkZSBjb25leGnDs24uDQogICZsdDsvcCZndDsNCiZsdDsvZGl2Jmd0Ow0KICAgICAgICAgICAgICAgICAgICAgICAgPC9wcmU+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5JbnN0cnVjY2lvbmVzPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBTb24gY29udGVuaWRvcyBzaW1wbGVzIHF1ZSBzZSB1dGlsaXphbiBwYXJhIGRhciBpbmRpY2FjaW9uZXMgZW4gYWxnw7puIHB1bnRvIGRlbCBjb250ZW5pZG8sIGNvbW8gcG9yIGVqZW1wbG8gZG9uZGUgaGF5IHVuYSBhY2Npw7NuIHF1ZSByZWFsaXphciBjb21vIHBhc2FyIGVsIG1vdXNlIHNvYnJlIHVuIGVsZW1lbnRvLiBMYSBpbnN0cnVjY2nDs24gc2UgZGVmaW5lIGFncmVnYW5kbyBsYSBjbGFzZSA8ZW0+aW5zdHJ1Y3Rpb248L2VtPiBhIHVuIGVsZW1lbnRvIGh0bWwuDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBMYXMgaW5zdHJ1Y2Npb25lcyBzb24gZGUgZGlmZXJlbnRlcyB0aXBvcy4gRWwgdGlwbyBzZSBpbmRpY2EgbWVkaWFudGUgZWwgYXRyaWJ1dG8gPGVtPnR5cGU8L2VtPiBlbCBjdcOhbCBwdWVkZSB0ZW5lciB1bm8gZGUgbG9zIHNpZ3VpZW50ZXMgdmFsb3JlczoNCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRhdGFfbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHN0cm9uZz5pbmZvPC9zdHJvbmc+OiBwYXJhIGxhcyBpbnN0cnVjY2lvbmVzIGRlIHRpcG8gaW5mb3JtYXRpdm8uPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPmRhbmdlcjwvc3Ryb25nPjogcGFyYSBsYXMgaW5zdHJ1Y2Npb25lcyBxdWUgaW5kaWNhbiBwZWxpZ3JvLjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHN0cm9uZz5hbGVydDwvc3Ryb25nPjogcGFyYSBsYXMgaW5zdHJ1Y2Npb25lcyBkZSBhbGVydGEuPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPm5vbmU8L3N0cm9uZz46IHBhcmEgZWxpbWluYXIgbGEgaW5kaWNhY2nDs24gZGUgdGlwbyBkZSBpbnN0cnVjY2nDs24uPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5ObyBpbmRpcXVlIGVsIHRpcG8gcGFyYSBsYXMgaW5zdHJ1Y2Npb25lcyBxdWUgc2VhbiBkZSBheXVkYSB5YSBxdWUgc29uIGxhcyB1dGlsaXphZGFzIHBvciBkZWZlY3RvLjwvbGk+DQogICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveC10ZXh0IGV4YW1wbGUiIGxhYmVsPSJFamVtcGxvcyI+DQo8cHJlPg0KJmx0O2RpdiBjbGFzcz0iaW5zdHJ1Y3Rpb24iJmd0Ow0KICBVbmEgaW5zdHJ1Y2Npw7NuIHBvciBkZWZlY3RvIChheXVkYSkuDQombHQ7L2RpdiZndDsNCjwvcHJlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHA+TG8gYW50ZXJpb3Igc2UgdmVyw61hIGFzw606PC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5zdHJ1Y3Rpb24iPlVuYSBpbnN0cnVjY2nDs24gcG9yIGRlZmVjdG8gKGF5dWRhKS48L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGhyIC8+DQo8cHJlPg0KJmx0O2RpdiBjbGFzcz0iaW5zdHJ1Y3Rpb24iIHR5cGU9ImluZm8iJmd0Ow0KICBVbmEgaW5zdHJ1Y2Npw7NuIGRlIHRpcG8gaW5mb3JtYXRpdm8uDQombHQ7L2RpdiZndDsNCjwvcHJlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHA+TG8gYW50ZXJpb3Igc2UgdmVyw61hIGFzw606PC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5zdHJ1Y3Rpb24iIHR5cGU9ImluZm8iPlVuYSBpbnN0cnVjY2nDs24gZGUgdGlwbyBpbmZvcm1hdGl2by48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxociAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHA+T3Ryb3M6PC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5zdHJ1Y3Rpb24iIHR5cGU9ImRhbmdlciI+VW5hIGluc3RydWNjacOzbiBkZSAicGVsaWdybyI6IDxlbT50eXBlPSJkYW5nZXIiPC9lbT4uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnN0cnVjdGlvbiIgdHlwZT0iYWxlcnQiPlVuYSBpbnN0cnVjY2nDs24gZGUgYWxlcnRhOiA8ZW0+dHlwZT0iYWxlcnQiPC9lbT4uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnN0cnVjdGlvbiIgdHlwZT0ibm9uZSI+U2luIHRpcG8gZGUgaW5zdHJ1Y2Npw7NuOiA8ZW0+dHlwZT0ibm9uZSI8L2VtPi48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPkVubGFjZXMgbm8gZW5sYWNlczwvaDM+DQoNCiAgICAgICAgICAgICAgICAgICAgPHA+UGFyYSBlbGVtZW50b3MgcXVlIG5vIHNvbiAiYSIgeSBkZWJlbiBhYnJpciB1biBlbmxhY2UsIHV0aWxpemFyIGxhIGNsYXNlIDxlbT5vcGVuLXVybDwvZW0+IHkgY29sb2NhciBlbCBhdHJpYnV0byA8ZW0+ZGF0YS11cmw8L2VtPiBwYXJhIGVzcGVjaWZpY2FyIGxhIGRpcmVjY2nDs24uIFNpZW1wcmUgYWJyZSBlbiB2ZW50YW5hIG51ZXZhLjwvcD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3gtdGV4dCBib3gtcmVxdWlyZWQtbGluayIgbGFiZWw9IkV4dGVuZGllbmRvIGVsIHNhYmVyIj4NCjxwcmU+DQombHQ7YnV0dG9uIGNsYXNzPSJvcGVuLXVybCIgZGF0YS11cmw9Imh0dHA6Ly9nb29nbGUuY29tIiZndDsNCiAgQ2xpYyBwYXJhIGlyIGEgR29vZ2xlDQombHQ7L2J1dHRvbiZndDs8L3ByZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgTG8gYW50ZXJpb3Igc2UgdmVyw61hIGFzw606IDxidXR0b24gY2xhc3M9Im9wZW4tdXJsIiBkYXRhLXVybD0iaHR0cDovL2dvb2dsZS5jb20iPkNsaWMgcGFyYSBpciBhIEdvb2dsZTwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+QWJyaXIgY29udGVuaWRvIGVuIHZlbnRhbmEgbW9kYWw8L2gzPg0KDQogICAgICAgICAgICAgICAgICAgIDxwPlBhcmEgYWJyaXIgY29udGVuaWRvcyBlbiB2ZW50YW5hcyBtb2RhbGVzIGRlbnRybyBkZWwgbWlzbW8gb2JqZXRvLiBTZSBhZ3JlZ2EgbGEgY2xhc2UgPGVtPnctY29udGVudC1jb250cm9sZXI8L2VtPiBhbCBlbGVtZW50byBxdWUgZGViZSBhYnJpciBsYSB2ZW50YW5hIChvcmlnZW4pLCBwb3IgZGVmZWN0byBjb24gZWwgZXZlbnRvIGNsaWMuIE5vIHRpZW5lIHF1ZSBzZXIgYm90w7NuIG8gZW5sYWNlLCBwdWVkZSBzZXIgY3VhbHF1aWVyIGVsZW1lbnRvLiBTZSBkZWJlIGVzdGFibGVjZXIgZWwgYXRyaWJ1dG8gPGVtPmRhdGEtY29udGVudDwvZW0+IGNvbiBsYSBydXRhIENTUyBkZWwgZWxlbWVudG8gcXVlIHNlIGNvbnZlcnRpcsOhIGVuIHZlbnRhbmEgKGRlc3Rpbm8pLiBFbCBlbGVtZW50byBxdWUgc2UgYWJyZSBjb21vIHZlbnRhbmEgZGViZSB0ZW5lciBsYSBjbGFzZSA8ZW0+dy1jb250ZW50PC9lbT4uIFNlIHB1ZWRlIHV0aWxpemFyIGVsIGF0cmlidXRvIDxlbT5kYXRhLXByb3BlcnR5LXdpZHRoPC9lbT4sIHRhbnRvIGVuIGVsIG9yaWdlbiBjb21vIGVuIGVsIGRlc3Rpbm8sIHBhcmEgZGVmaW5pciBlbCBhbmNobyBkZSBsYSB2ZW50YW5hIG1vZGFsIHkgPGVtPmRhdGEtcHJvcGVydHktaGVpZ2h0PC9lbT4gcGFyYSBkZWZpbmlyIGVsIGFsdG8uIFRhbWJpw6luIHNlIHB1ZWRlIGFzaWduYXIgdW5hIGNsYXNlIGFsIGRlc3Rpbm8gbWVkaWFudGUgZWwgYXRyaWJ1dG8gPGVtPmRhdGEtY3NzY2xhc3M8L2VtPiBlbiBlbCBlbGVtZW50byBkZXN0aW5vLjwvcD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3gtdGV4dCBleGFtcGxlIiBsYWJlbD0iRWplbXBsbyI+DQo8cHJlPiZsdDtidXR0b24gY2xhc3M9InctY29udGVudC1jb250cm9sZXIgZ2VuZXJhbCIgZGF0YS1jb250ZW50PSIjdmVudGFuYV90ZXh0b3NfbW9kYWwiJmd0Ow0KICBBYnJpciB2ZW50YW5hIG1vZGFsDQombHQ7L2J1dHRvbiZndDsNCiZsdDtkaXYgaWQ9InZlbnRhbmFfdGV4dG9zX21vZGFsIiBjbGFzcz0idy1jb250ZW50IiB0aXRsZT0iVmVudGFuYSBNb2RhbCImZ3Q7DQogIEFzw60gc2UgdmUgbGEgdmVudGFuYSBtb2RhbA0KJmx0Oy9kaXYmZ3Q7DQo8L3ByZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvIGFudGVyaW9yIHNlIHZlcsOtYSBhc8OtOiA8YnV0dG9uIGNsYXNzPSJ3LWNvbnRlbnQtY29udHJvbGVyIGdlbmVyYWwiIGRhdGEtY29udGVudD0iI3ZlbnRhbmFfdGV4dG9zX21vZGFsIj5BYnJpciB2ZW50YW5hIG1vZGFsPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJ2ZW50YW5hX3RleHRvc19tb2RhbCIgY2xhc3M9InctY29udGVudCIgdGl0bGU9IlZlbnRhbmEgTW9kYWwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFzw60gc2UgdmUgbGEgdmVudGFuYSBtb2RhbA0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5BYnJpciBjb250ZW5pZG8gZW4gdmVudGFuYSBmbG90YW50ZSBubyBtb2RhbDwvaDM+DQoNCiAgICAgICAgICAgICAgICAgICAgPHA+UGFyYSBhYnJpciBjb250ZW5pZG9zIGVuIHZlbnRhbmFzIGZsb3RhbnRlcyBkZW50cm8gZGVsIG1pc21vIG9iamV0by4gU2UgYWdyZWdhIGxhIGNsYXNlIDxlbT53Zi1jb250ZW50LWNvbnRyb2xlcjwvZW0+IGFsIGVsZW1lbnRvIHF1ZSBkZWJlIGFicmlyIGxhIHZlbnRhbmEgKG9yaWdlbiksIHBvciBkZWZlY3RvIGNvbiBlbCBldmVudG8gY2xpYy4gTm8gdGllbmUgcXVlIHNlciBib3TDs24gbyBlbmxhY2UsIHB1ZWRlIHNlciBjdWFscXVpZXIgZWxlbWVudG8uIFNlIGRlYmUgZXN0YWJsZWNlciBlbCBhdHJpYnV0byA8ZW0+ZGF0YS1jb250ZW50PC9lbT4gY29uIGxhIHJ1dGEgQ1NTIGRlbCBlbGVtZW50byBxdWUgc2UgY29udmVydGlyw6EgZW4gdmVudGFuYSAoZGVzdGlubykuIEVsIGVsZW1lbnRvIHF1ZSBzZSBhYnJlIGNvbW8gdmVudGFuYSBkZWJlIHRlbmVyIGxhIGNsYXNlIDxlbT53Zi1jb250ZW50PC9lbT4uIFNlIHB1ZWRlIHV0aWxpemFyIGVsIGF0cmlidXRvIDxlbT5kYXRhLXByb3BlcnR5LXdpZHRoPC9lbT4sIHRhbnRvIGVuIGVsIG9yaWdlbiBjb21vIGVuIGVsIGRlc3Rpbm8sIHBhcmEgZGVmaW5pciBlbCBhbmNobyBkZSBsYSB2ZW50YW5hIHkgPGVtPmRhdGEtcHJvcGVydHktaGVpZ2h0PC9lbT4gcGFyYSBkZWZpbmlyIGVsIGFsdG8uPC9wPg0KDQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgUG9yIGRlZmVjdG8sIGxhIHZlbnRhbmEgc2UgcG9zaWNpb25hIGVuIGVsIGx1Z2FyIGRvbmRlIHNlIGVuY3VlbnRyYSBlbiBlbCBjb250ZW5pZG8uIFNpIHNlIGRlc2VhIHBvc2ljaW9uYXIgZW4gb3RybyBlamUgc2UgZGViZSBoYWNlciBtZWRpYW50ZSBlc3RpbG9zIENTUywgYXNpZ25hbmRvIGEgbGEgY2xhc2UgPGVtPi53Zi1jb250ZW50PC9lbT4gbGEgcG9zaWNpw7NuIGNvbiBsb3MgYXRyaWJ1dG9zOiA8ZW0+dG9wPC9lbT4sIDxlbT5ib3R0b208L2VtPiwgPGVtPmxlZnQ8L2VtPiB5L28gPGVtPnJpZ2h0PC9lbT4uDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3gtdGV4dCBleGFtcGxlIiBsYWJlbD0iRWplbXBsbyI+DQo8cHJlPiZsdDtidXR0b24gY2xhc3M9IndmLWNvbnRlbnQtY29udHJvbGVyIGdlbmVyYWwiIGRhdGEtY29udGVudD0iI3ZlbnRhbmFfdGV4dG9zX2Zsb3RhbnRlIiZndDsNCiAgQWJyaXIgdmVudGFuYSBmbG90YW50ZQ0KJmx0Oy9idXR0b24mZ3Q7DQombHQ7ZGl2IGlkPSJ2ZW50YW5hX3RleHRvc19mbG90YW50ZSIgY2xhc3M9IndmLWNvbnRlbnQiJmd0Ow0KICBBc8OtIHNlIHZlIGxhIHZlbnRhbmEgZmxvdGFudGUuDQombHQ7L2RpdiZndDsNCjwvcHJlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgTG8gYW50ZXJpb3Igc2UgdmVyw61hIGFzw606IDxidXR0b24gY2xhc3M9IndmLWNvbnRlbnQtY29udHJvbGVyIGdlbmVyYWwiIGRhdGEtY29udGVudD0iI3ZlbnRhbmFfdGV4dG9zX2Zsb3RhbnRlIj5BYnJpciB2ZW50YW5hIGZsb3RhbnRlPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJ2ZW50YW5hX3RleHRvc19mbG90YW50ZSIgY2xhc3M9IndmLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkFzw60gc2UgdmUgbGEgdmVudGFuYSBmbG90YW50ZS48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBDb21vIHNlIHZlIGVuIGVsIGVqZW1wbG8gYW50ZXJpb3IsIGVsIHRhbWHDsW8gZGUgbGEgdmVudGFuYSBwb3IgZGVmZWN0byBzb2xhbWVudGUgb2N1cGEgZWwgZXNwYWNpbyByZXF1ZXJpZG8gcG9yIGVsIGNvbnRlbmlkby4gU2kgc2UgcXVpZXJlIGFqdXN0YXIgYWwgdGFtYcOxbyBkZWwgY29udGVuZWRvciBzZSBwdWVkZW4gdXNhciBkb3MgY2xhc2VzOiA8ZW0+YXV0b3g8L2VtPiB5IDxlbT5hdXRveTwvZW0+OyBzZWfDum4gc2UgcXVpZXJhIHF1ZSBsYSB2ZW50YW5hIHNlIGFqdXN0ZSBob3Jpem9udGFsIG8gdmVydGljYWxtZW50ZS4gRWwgPHN0cm9uZz5jb250ZW5lZG9yPC9zdHJvbmc+IHF1ZSBzZSB0aWVuZSBlbiBjdWVudGEgZXMgZWwgcHJpbWVyIGVsZW1lbnRvIHN1cGVyaW9yIGNvbiBwb3NpY2nDs24gcmVsYXRpdmEgbyBhYnNvbHV0YS4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveC10ZXh0IGV4YW1wbGUiIGxhYmVsPSJFamVtcGxvIj4NCjxwcmU+Jmx0O2J1dHRvbiBjbGFzcz0id2YtY29udGVudC1jb250cm9sZXIgZ2VuZXJhbCIgZGF0YS1jb250ZW50PSIjdmVudGFuYV90ZXh0b3NfZmxvdGFudGUyIiZndDsNCiAgQWJyaXIgdmVudGFuYSBmbG90YW50ZQ0KJmx0Oy9idXR0b24mZ3Q7DQombHQ7ZGl2IGlkPSJ2ZW50YW5hX3RleHRvc19mbG90YW50ZTIiIGNsYXNzPSJ3Zi1jb250ZW50IDxzdHJvbmcgY2xhc3M9ImNoYW5nZSI+YXV0b3ggYXV0b3k8L3N0cm9uZz4iJmd0Ow0KICBBc8OtIHNlIHZlIGxhIHZlbnRhbmEgZmxvdGFudGUgYWp1c3RhZGEuDQombHQ7L2RpdiZndDsNCjwvcHJlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgTG8gYW50ZXJpb3Igc2UgdmVyw61hIGFzw606IDxidXR0b24gY2xhc3M9IndmLWNvbnRlbnQtY29udHJvbGVyIGdlbmVyYWwiIGRhdGEtY29udGVudD0iI3ZlbnRhbmFfdGV4dG9zX2Zsb3RhbnRlMiI+QWJyaXIgdmVudGFuYSBmbG90YW50ZTwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0idmVudGFuYV90ZXh0b3NfZmxvdGFudGUyIiBjbGFzcz0id2YtY29udGVudCBhdXRveCBhdXRveSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+QXPDrSBzZSB2ZSBsYSB2ZW50YW5hIGZsb3RhbnRlIGFqdXN0YWRhLjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImdlbmVyYWwgdGltZXItYnV0dG9uIiBvbmNsaWNrPSJjaGFuZ2VDb2xvcigpOyI+Qm90b24gZGVzaGFiaWxpdGFkbzwvYnV0dG9uPg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSIgaWQ9InBhZy10ZXh0b3MtaW5mb2dyYWZpYSI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5JbmZvZ3JhZsOtYTwvaDM+DQoNCiAgICAgICAgICAgICAgICAgICAgPHA+QWxndW5vcyBlbGVtZW50b3MgZ3LDoWZpY29zIHF1ZSBwdWVkZW4gc2VyIMO6dGlsZXMgZW4gZWwgbW9udGFqZSB5IHF1ZSB5YSBlc3TDoW4gZGVmaW5pZG9zLjwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+TGFzIGxpc3RhcyAoJmx0O3VsJmd0OyksIGN1YW5kbyBzZWFuIGRlIGRhdG9zLCBkZWJlbiB0ZW5lciBsYSBjbGFzZSAiZGF0YV9saXN0Ii48L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkYXRhX2xpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxzdHJvbmc+RmxlY2hhIGRlcmVjaGE6IDwvc3Ryb25nPjxzcGFuIGNsYXNzPSJpY29uX2hvcml6b250YWxfYXJyb3ciPjwvc3Bhbj4sIHVzYXIgJmx0O3NwYW4gY2xhc3M9Imljb25faG9yaXpvbnRhbF9hcnJvdyImZ3Q7Jmx0Oy9zcGFuJmd0OzwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHN0cm9uZz5BcHJvYmFkbzogPC9zdHJvbmc+PHNwYW4gY2xhc3M9Imljb25fYXBwcm92ZWQiPjwvc3Bhbj4sIHVzYXIgJmx0O3NwYW4gY2xhc3M9Imljb25fYXBwcm92ZWQiJmd0OyZsdDsvc3BhbiZndDs8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxzdHJvbmc+UmVjaGF6YWRvOiA8L3N0cm9uZz48c3BhbiBjbGFzcz0iaWNvbl9yZW1vdmVkIj48L3NwYW4+LCB1c2FyICZsdDtzcGFuIGNsYXNzPSJpY29uX3JlbW92ZWQiJmd0OyZsdDsvc3BhbiZndDs8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxzdHJvbmc+QXB1bnRhZG9yIGFiYWpvOiA8L3N0cm9uZz48YnV0dG9uIGNsYXNzPSJkb3duX3BvaW50ZXIiPjwvYnV0dG9uPiwgdXNhciAmbHQ7YnV0dG9uIGNsYXNzPSJkb3duX3BvaW50ZXIiJmd0OyZsdDsvYnV0dG9uJmd0OzwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHN0cm9uZz5BcHVudGFkb3IgZGVyZWNoYTogPC9zdHJvbmc+PGJ1dHRvbiBjbGFzcz0icmlnaHRfcG9pbnRlciI+PC9idXR0b24+LCB1c2FyICZsdDtidXR0b24gY2xhc3M9InJpZ2h0X3BvaW50ZXIiJmd0OyZsdDsvYnV0dG9uJmd0OzwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHN0cm9uZz5Cb3TDs24gZ2VuZXJhbDogPC9zdHJvbmc+PGJ1dHRvbiBjbGFzcz0iZ2VuZXJhbCI+QWNlcHRhcjwvYnV0dG9uPiwgdXNhciAmbHQ7YnV0dG9uIGNsYXNzPSJnZW5lcmFsIiZndDtBY2VwdGFyJmx0Oy9idXR0b24mZ3Q7PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPkFwdW50YWRvciBhcnJpYmEtYWJham86IDwvc3Ryb25nPjxzcGFuIGNsYXNzPSJpY29uX2lubGluZSB1aS1pY29uIHVpLWljb24tYXJyb3d0aGljay0yLW4tcyI+PC9zcGFuPiwgdXNhciAmbHQ7c3BhbiBjbGFzcz0iaWNvbl9pbmxpbmUgdWktaWNvbiB1aS1pY29uLWFycm93dGhpY2stMi1uLXMiJmd0OyZsdDsvc3BhbiZndDs8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxzdHJvbmc+QXB1bnRhZG9yIGl6cXVpZXJkYS1kZXJlY2hhOiA8L3N0cm9uZz48c3BhbiBjbGFzcz0iaWNvbl9pbmxpbmUgdWktaWNvbiB1aS1pY29uLWFycm93dGhpY2stMi1lLXciPjwvc3Bhbj4sIHVzYXIgJmx0O3NwYW4gY2xhc3M9Imljb25faW5saW5lIHVpLWljb24gdWktaWNvbi1hcnJvd3RoaWNrLTItZS13IiZndDsmbHQ7L3NwYW4mZ3Q7PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPlZlciBtw6FzOiA8L3N0cm9uZz48c3BhbiBjbGFzcz0iaWNvbm1vcmUgYnV0dG9uIj48L3NwYW4+LCB1c2FyICZsdDtzcGFuIGNsYXNzPSJpY29uX21vcmUgYnV0dG9uIiZndDsmbHQ7L3NwYW4mZ3Q7LiBTZSBhZGljaW9uYSBsYSBjbGFzZSBidXR0b24gc2kgZGViZSB0ZW5lciBlbCBldmVudG8gIlNvYnJlIi48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxzdHJvbmc+QXB1bnRhZG9yIGl6cXVpZXJkYTogPC9zdHJvbmc+PGRpdiBjbGFzcz0ibm90ZV9wb2ludGVyX2xlZnQiPjwvZGl2PiwgdXNhciAmbHQ7ZGl2IGNsYXNzPSJub3RlX3BvaW50ZXJfbGVmdCImZ3Q7Jmx0Oy9kaXYmZ3Q7PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPkFwdW50YWRvciBkZXJlY2hhOiA8L3N0cm9uZz48ZGl2IGNsYXNzPSJub3RlX3BvaW50ZXJfcmlnaHQiPjwvZGl2PiwgdXNhciAmbHQ7ZGl2IGNsYXNzPSJub3RlX3BvaW50ZXJfcmlnaHQiJmd0OyZsdDsvZGl2Jmd0OzwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHN0cm9uZz7DjWNvbm8gZGUgdmlkZW86IDwvc3Ryb25nPiA8YnV0dG9uIGNsYXNzPSJpY29udmlkZW8gYnV0dG9uIj48L2J1dHRvbj48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxzdHJvbmc+w41jb25vIGRlIGF1ZGlvOiA8L3N0cm9uZz4gPGJ1dHRvbiBjbGFzcz0iaWNvbnNvdW5kIGJ1dHRvbiI+PC9idXR0b24+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPsONY29ubyBkZSBkb2N1bWVudG9zOiA8L3N0cm9uZz4gPGJ1dHRvbiBjbGFzcz0iaWNvbmRvY3VtZW50IGJ1dHRvbiI+PC9idXR0b24+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiIGlkPSJwYWctdGV4dG9zLWljb25vZ3JhZmlhIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPkljb25vZ3JhZsOtYTwvaDM+DQoNCiAgICAgICAgICAgICAgICAgICAgPHA+TG9zIMOtY29ub3Mgc2lydmVuIHBhcmEgcmVwcmVzZW50YXIsIG1hcmNhciwgZGFyIGlkZWFzIHZpc3VhbGVzIGRlIGVsZW1lbnRvcywgZW50cmUgb3Ryb3MuIFBhcmEgZWxsbyBzZSBpbmNsdXllIHVuYSBldGlxdWV0YSA8ZW0+Jmx0O2kmZ3Q7PC9lbT4gY29uIGxhIGNsYXNlIGNvcnJlc3BvbmRpZW50ZSAobW91c2Ugc29icmUgZWwgw61jb25vIHBhcmEgY29ub2NlciBsYSBjbGFzZSkuIEVzdMOhIGJhc2FkbyBlbiA8ZW0+aW9uaWNvbnM8L2VtPiBwb3IgbG8gcXVlIHNlIHB1ZWRlIHV0aWxpemFyIGN1YWxxdWllcmEgZGUgbG9zIGVsZW1lbnRvcyBxdWUgZGljaGEgbGlicmVyw61hIGluY2x1eWUgKHZlciBsaXN0YWRvIG9maWNpYWwgZW4gPGEgaHJlZj0iaHR0cDovL3d3dy5pb25pY29ucy5jb20iIHRhcmdldD0iX2JsYW5rIj53d3cuaW9uaWNvbnMuY29tPC9hPikuIEEgY29udGludWFjacOzbiBhbGd1bm9zIGVqZW1wbG9zOjwvcD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaXN0YV9pY29ub3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1hcnJvdy11cC1hIiBjbGFzcz0iaW9uLWFycm93LXVwLWEiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWFycm93LXJpZ2h0LWEiIGNsYXNzPSJpb24tYXJyb3ctcmlnaHQtYSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tYXJyb3ctZG93bi1hIiBjbGFzcz0iaW9uLWFycm93LWRvd24tYSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tYXJyb3ctbGVmdC1hIiBjbGFzcz0iaW9uLWFycm93LWxlZnQtYSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tYXJyb3ctdXAtYiIgY2xhc3M9Imlvbi1hcnJvdy11cC1iIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1hcnJvdy1yaWdodC1iIiBjbGFzcz0iaW9uLWFycm93LXJpZ2h0LWIiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWFycm93LWRvd24tYiIgY2xhc3M9Imlvbi1hcnJvdy1kb3duLWIiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWFycm93LWxlZnQtYiIgY2xhc3M9Imlvbi1hcnJvdy1sZWZ0LWIiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWFycm93LXVwLWMiIGNsYXNzPSJpb24tYXJyb3ctdXAtYyIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tYXJyb3ctcmlnaHQtYyIgY2xhc3M9Imlvbi1hcnJvdy1yaWdodC1jIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1hcnJvdy1kb3duLWMiIGNsYXNzPSJpb24tYXJyb3ctZG93bi1jIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1hcnJvdy1sZWZ0LWMiIGNsYXNzPSJpb24tYXJyb3ctbGVmdC1jIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1hcnJvdy1yZXR1cm4tcmlnaHQiIGNsYXNzPSJpb24tYXJyb3ctcmV0dXJuLXJpZ2h0IiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1hcnJvdy1yZXR1cm4tbGVmdCIgY2xhc3M9Imlvbi1hcnJvdy1yZXR1cm4tbGVmdCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tYXJyb3ctc3dhcCIgY2xhc3M9Imlvbi1hcnJvdy1zd2FwIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1hcnJvdy1zaHJpbmsiIGNsYXNzPSJpb24tYXJyb3ctc2hyaW5rIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1hcnJvdy1leHBhbmQiIGNsYXNzPSJpb24tYXJyb3ctZXhwYW5kIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1hcnJvdy1tb3ZlIiBjbGFzcz0iaW9uLWFycm93LW1vdmUiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWFycm93LXJlc2l6ZSIgY2xhc3M9Imlvbi1hcnJvdy1yZXNpemUiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWNoZXZyb24tdXAiIGNsYXNzPSJpb24tY2hldnJvbi11cCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tY2hldnJvbi1yaWdodCIgY2xhc3M9Imlvbi1jaGV2cm9uLXJpZ2h0IiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1jaGV2cm9uLWRvd24iIGNsYXNzPSJpb24tY2hldnJvbi1kb3duIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1jaGV2cm9uLWxlZnQiIGNsYXNzPSJpb24tY2hldnJvbi1sZWZ0IiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1uYXZpY29uLXJvdW5kIiBjbGFzcz0iaW9uLW5hdmljb24tcm91bmQiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLW5hdmljb24iIGNsYXNzPSJpb24tbmF2aWNvbiIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tZHJhZyIgY2xhc3M9Imlvbi1kcmFnIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1sb2ctaW4iIGNsYXNzPSJpb24tbG9nLWluIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1sb2ctb3V0IiBjbGFzcz0iaW9uLWxvZy1vdXQiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWNoZWNrbWFyay1yb3VuZCIgY2xhc3M9Imlvbi1jaGVja21hcmstcm91bmQiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWNoZWNrbWFyayIgY2xhc3M9Imlvbi1jaGVja21hcmsiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWNoZWNrbWFyay1jaXJjbGVkIiBjbGFzcz0iaW9uLWNoZWNrbWFyay1jaXJjbGVkIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1jbG9zZS1yb3VuZCIgY2xhc3M9Imlvbi1jbG9zZS1yb3VuZCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tY2xvc2UiIGNsYXNzPSJpb24tY2xvc2UiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWNsb3NlLWNpcmNsZWQiIGNsYXNzPSJpb24tY2xvc2UtY2lyY2xlZCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tcGx1cy1yb3VuZCIgY2xhc3M9Imlvbi1wbHVzLXJvdW5kIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1wbHVzIiBjbGFzcz0iaW9uLXBsdXMiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLXBsdXMtY2lyY2xlZCIgY2xhc3M9Imlvbi1wbHVzLWNpcmNsZWQiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLW1pbnVzLXJvdW5kIiBjbGFzcz0iaW9uLW1pbnVzLXJvdW5kIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1taW51cyIgY2xhc3M9Imlvbi1taW51cyIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tbWludXMtY2lyY2xlZCIgY2xhc3M9Imlvbi1taW51cy1jaXJjbGVkIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1pbmZvcm1hdGlvbiIgY2xhc3M9Imlvbi1pbmZvcm1hdGlvbiIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24taW5mb3JtYXRpb24tY2lyY2xlZCBhY3RpdmUiIGNsYXNzPSJpb24taW5mb3JtYXRpb24tY2lyY2xlZCBhY3RpdmUiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWhlbHAiIGNsYXNzPSJpb24taGVscCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24taGVscC1jaXJjbGVkIiBjbGFzcz0iaW9uLWhlbHAtY2lyY2xlZCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tYmFja3NwYWNlLW91dGxpbmUiIGNsYXNzPSJpb24tYmFja3NwYWNlLW91dGxpbmUiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWJhY2tzcGFjZSIgY2xhc3M9Imlvbi1iYWNrc3BhY2UiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWhlbHAtYnVveSIgY2xhc3M9Imlvbi1oZWxwLWJ1b3kiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWFzdGVyaXNrIiBjbGFzcz0iaW9uLWFzdGVyaXNrIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1hbGVydCIgY2xhc3M9Imlvbi1hbGVydCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tYWxlcnQtY2lyY2xlZCIgY2xhc3M9Imlvbi1hbGVydC1jaXJjbGVkIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1yZWZyZXNoIiBjbGFzcz0iaW9uLXJlZnJlc2giID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWxvb3AiIGNsYXNzPSJpb24tbG9vcCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tc2h1ZmZsZSIgY2xhc3M9Imlvbi1zaHVmZmxlIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1ob21lIiBjbGFzcz0iaW9uLWhvbWUiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLXNlYXJjaCIgY2xhc3M9Imlvbi1zZWFyY2giID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWZsYWciIGNsYXNzPSJpb24tZmxhZyIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tc3RhciIgY2xhc3M9Imlvbi1zdGFyIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1oZWFydCIgY2xhc3M9Imlvbi1oZWFydCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24taGVhcnQtYnJva2VuIiBjbGFzcz0iaW9uLWhlYXJ0LWJyb2tlbiIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tZ2Vhci1hIiBjbGFzcz0iaW9uLWdlYXItYSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tZ2Vhci1iIiBjbGFzcz0iaW9uLWdlYXItYiIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tdG9nZ2xlLWZpbGxlZCIgY2xhc3M9Imlvbi10b2dnbGUtZmlsbGVkIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi10b2dnbGUiIGNsYXNzPSJpb24tdG9nZ2xlIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1zZXR0aW5ncyIgY2xhc3M9Imlvbi1zZXR0aW5ncyIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24td3JlbmNoIiBjbGFzcz0iaW9uLXdyZW5jaCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24taGFtbWVyIiBjbGFzcz0iaW9uLWhhbW1lciIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tZWRpdCIgY2xhc3M9Imlvbi1lZGl0IiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi10cmFzaC1hIiBjbGFzcz0iaW9uLXRyYXNoLWEiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLXRyYXNoLWIiIGNsYXNzPSJpb24tdHJhc2gtYiIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tZG9jdW1lbnQiIGNsYXNzPSJpb24tZG9jdW1lbnQiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWRvY3VtZW50LXRleHQiIGNsYXNzPSJpb24tZG9jdW1lbnQtdGV4dCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tY2xpcGJvYXJkIiBjbGFzcz0iaW9uLWNsaXBib2FyZCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tc2Npc3NvcnMiIGNsYXNzPSJpb24tc2Npc3NvcnMiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWZ1bm5lbCIgY2xhc3M9Imlvbi1mdW5uZWwiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWJvb2ttYXJrIiBjbGFzcz0iaW9uLWJvb2ttYXJrIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1lbWFpbCIgY2xhc3M9Imlvbi1lbWFpbCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tZW1haWwtdW5yZWFkIiBjbGFzcz0iaW9uLWVtYWlsLXVucmVhZCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tZm9sZGVyIiBjbGFzcz0iaW9uLWZvbGRlciIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tZmlsaW5nIiBjbGFzcz0iaW9uLWZpbGluZyIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tYXJjaGl2ZSIgY2xhc3M9Imlvbi1hcmNoaXZlIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1yZXBseSIgY2xhc3M9Imlvbi1yZXBseSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tcmVwbHktYWxsIiBjbGFzcz0iaW9uLXJlcGx5LWFsbCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tZm9yd2FyZCIgY2xhc3M9Imlvbi1mb3J3YXJkIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1zaGFyZSIgY2xhc3M9Imlvbi1zaGFyZSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tcGFwZXItYWlycGxhbmUiIGNsYXNzPSJpb24tcGFwZXItYWlycGxhbmUiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWxpbmsiIGNsYXNzPSJpb24tbGluayIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tcGFwZXJjbGlwIiBjbGFzcz0iaW9uLXBhcGVyY2xpcCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tY29tcG9zZSIgY2xhc3M9Imlvbi1jb21wb3NlIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1icmllZmNhc2UiIGNsYXNzPSJpb24tYnJpZWZjYXNlIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1tZWRraXQiIGNsYXNzPSJpb24tbWVka2l0IiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1hdCIgY2xhc3M9Imlvbi1hdCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tcG91bmQiIGNsYXNzPSJpb24tcG91bmQiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLXF1b3RlIiBjbGFzcz0iaW9uLXF1b3RlIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1jbG91ZCIgY2xhc3M9Imlvbi1jbG91ZCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tdXBsb2FkIiBjbGFzcz0iaW9uLXVwbG9hZCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tbW9yZSIgY2xhc3M9Imlvbi1tb3JlIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1ncmlkIiBjbGFzcz0iaW9uLWdyaWQiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWNhbGVuZGFyIiBjbGFzcz0iaW9uLWNhbGVuZGFyIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1jbG9jayIgY2xhc3M9Imlvbi1jbG9jayIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tY29tcGFzcyIgY2xhc3M9Imlvbi1jb21wYXNzIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1waW5wb2ludCIgY2xhc3M9Imlvbi1waW5wb2ludCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tcGluIiBjbGFzcz0iaW9uLXBpbiIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tbmF2aWdhdGUiIGNsYXNzPSJpb24tbmF2aWdhdGUiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWxvY2F0aW9uIiBjbGFzcz0iaW9uLWxvY2F0aW9uIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1tYXAiIGNsYXNzPSJpb24tbWFwIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1sb2NrLWNvbWJpbmF0aW9uIiBjbGFzcz0iaW9uLWxvY2stY29tYmluYXRpb24iID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWxvY2tlZCIgY2xhc3M9Imlvbi1sb2NrZWQiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLXVubG9ja2VkIiBjbGFzcz0iaW9uLXVubG9ja2VkIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1rZXkiIGNsYXNzPSJpb24ta2V5IiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1hcnJvdy1ncmFwaC11cC1yaWdodCIgY2xhc3M9Imlvbi1hcnJvdy1ncmFwaC11cC1yaWdodCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tYXJyb3ctZ3JhcGgtZG93bi1yaWdodCIgY2xhc3M9Imlvbi1hcnJvdy1ncmFwaC1kb3duLXJpZ2h0IiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1hcnJvdy1ncmFwaC11cC1sZWZ0IiBjbGFzcz0iaW9uLWFycm93LWdyYXBoLXVwLWxlZnQiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWFycm93LWdyYXBoLWRvd24tbGVmdCIgY2xhc3M9Imlvbi1hcnJvdy1ncmFwaC1kb3duLWxlZnQiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLXN0YXRzLWJhcnMiIGNsYXNzPSJpb24tc3RhdHMtYmFycyIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tY29ubmVjdGlvbi1iYXJzIiBjbGFzcz0iaW9uLWNvbm5lY3Rpb24tYmFycyIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tcGllLWdyYXBoIiBjbGFzcz0iaW9uLXBpZS1ncmFwaCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tY2hhdGJ1YmJsZSIgY2xhc3M9Imlvbi1jaGF0YnViYmxlIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1jaGF0YnViYmxlLXdvcmtpbmciIGNsYXNzPSJpb24tY2hhdGJ1YmJsZS13b3JraW5nIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1jaGF0YnViYmxlcyIgY2xhc3M9Imlvbi1jaGF0YnViYmxlcyIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tY2hhdGJveCIgY2xhc3M9Imlvbi1jaGF0Ym94IiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1jaGF0Ym94LXdvcmtpbmciIGNsYXNzPSJpb24tY2hhdGJveC13b3JraW5nIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1jaGF0Ym94ZXMiIGNsYXNzPSJpb24tY2hhdGJveGVzIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1wZXJzb24iIGNsYXNzPSJpb24tcGVyc29uIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1wZXJzb24tYWRkIiBjbGFzcz0iaW9uLXBlcnNvbi1hZGQiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLXBlcnNvbi1zdGFsa2VyIiBjbGFzcz0iaW9uLXBlcnNvbi1zdGFsa2VyIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi13b21hbiIgY2xhc3M9Imlvbi13b21hbiIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tbWFuIiBjbGFzcz0iaW9uLW1hbiIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tZmVtYWxlIiBjbGFzcz0iaW9uLWZlbWFsZSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tbWFsZSIgY2xhc3M9Imlvbi1tYWxlIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi10cmFuc2dlbmRlciIgY2xhc3M9Imlvbi10cmFuc2dlbmRlciIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tZm9yayIgY2xhc3M9Imlvbi1mb3JrIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1rbmlmZSIgY2xhc3M9Imlvbi1rbmlmZSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tc3Bvb24iIGNsYXNzPSJpb24tc3Bvb24iID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLXNvdXAtY2FuLW91dGxpbmUiIGNsYXNzPSJpb24tc291cC1jYW4tb3V0bGluZSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tc291cC1jYW4iIGNsYXNzPSJpb24tc291cC1jYW4iID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWJlZXIiIGNsYXNzPSJpb24tYmVlciIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24td2luZWdsYXNzIiBjbGFzcz0iaW9uLXdpbmVnbGFzcyIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tY29mZmVlIiBjbGFzcz0iaW9uLWNvZmZlZSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24taWNlY3JlYW0iIGNsYXNzPSJpb24taWNlY3JlYW0iID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLXBpenphIiBjbGFzcz0iaW9uLXBpenphIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1wb3dlciIgY2xhc3M9Imlvbi1wb3dlciIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tbW91c2UiIGNsYXNzPSJpb24tbW91c2UiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWJhdHRlcnktZnVsbCIgY2xhc3M9Imlvbi1iYXR0ZXJ5LWZ1bGwiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWJhdHRlcnktaGFsZiIgY2xhc3M9Imlvbi1iYXR0ZXJ5LWhhbGYiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWJhdHRlcnktbG93IiBjbGFzcz0iaW9uLWJhdHRlcnktbG93IiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1iYXR0ZXJ5LWVtcHR5IiBjbGFzcz0iaW9uLWJhdHRlcnktZW1wdHkiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWJhdHRlcnktY2hhcmdpbmciIGNsYXNzPSJpb24tYmF0dGVyeS1jaGFyZ2luZyIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24td2lmaSIgY2xhc3M9Imlvbi13aWZpIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1ibHVldG9vdGgiIGNsYXNzPSJpb24tYmx1ZXRvb3RoIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1jYWxjdWxhdG9yIiBjbGFzcz0iaW9uLWNhbGN1bGF0b3IiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWNhbWVyYSIgY2xhc3M9Imlvbi1jYW1lcmEiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWV5ZSIgY2xhc3M9Imlvbi1leWUiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWV5ZS1kaXNhYmxlZCIgY2xhc3M9Imlvbi1leWUtZGlzYWJsZWQiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWZsYXNoIiBjbGFzcz0iaW9uLWZsYXNoIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1mbGFzaC1vZmYiIGNsYXNzPSJpb24tZmxhc2gtb2ZmIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1xci1zY2FubmVyIiBjbGFzcz0iaW9uLXFyLXNjYW5uZXIiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWltYWdlIiBjbGFzcz0iaW9uLWltYWdlIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1pbWFnZXMiIGNsYXNzPSJpb24taW1hZ2VzIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi13YW5kIiBjbGFzcz0iaW9uLXdhbmQiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWNvbnRyYXN0IiBjbGFzcz0iaW9uLWNvbnRyYXN0IiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1hcGVydHVyZSIgY2xhc3M9Imlvbi1hcGVydHVyZSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tY3JvcCIgY2xhc3M9Imlvbi1jcm9wIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1lYXNlbCIgY2xhc3M9Imlvbi1lYXNlbCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tcGFpbnRicnVzaCIgY2xhc3M9Imlvbi1wYWludGJydXNoIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1wYWludGJ1Y2tldCIgY2xhc3M9Imlvbi1wYWludGJ1Y2tldCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tbW9uaXRvciIgY2xhc3M9Imlvbi1tb25pdG9yIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1sYXB0b3AiIGNsYXNzPSJpb24tbGFwdG9wIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1pcGFkIiBjbGFzcz0iaW9uLWlwYWQiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWlwaG9uZSIgY2xhc3M9Imlvbi1pcGhvbmUiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWlwb2QiIGNsYXNzPSJpb24taXBvZCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tcHJpbnRlciIgY2xhc3M9Imlvbi1wcmludGVyIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi11c2IiIGNsYXNzPSJpb24tdXNiIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1vdXRsZXQiIGNsYXNzPSJpb24tb3V0bGV0IiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1idWciIGNsYXNzPSJpb24tYnVnIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1jb2RlIiBjbGFzcz0iaW9uLWNvZGUiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWNvZGUtd29ya2luZyIgY2xhc3M9Imlvbi1jb2RlLXdvcmtpbmciID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWNvZGUtZG93bmxvYWQiIGNsYXNzPSJpb24tY29kZS1kb3dubG9hZCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tZm9yay1yZXBvIiBjbGFzcz0iaW9uLWZvcmstcmVwbyIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tbmV0d29yayIgY2xhc3M9Imlvbi1uZXR3b3JrIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1wdWxsLXJlcXVlc3QiIGNsYXNzPSJpb24tcHVsbC1yZXF1ZXN0IiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1tZXJnZSIgY2xhc3M9Imlvbi1tZXJnZSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24teGJveCIgY2xhc3M9Imlvbi14Ym94IiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1wbGF5c3RhdGlvbiIgY2xhc3M9Imlvbi1wbGF5c3RhdGlvbiIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tc3RlYW0iIGNsYXNzPSJpb24tc3RlYW0iID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWNsb3NlZC1jYXB0aW9uaW5nIiBjbGFzcz0iaW9uLWNsb3NlZC1jYXB0aW9uaW5nIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi12aWRlb2NhbWVyYSIgY2xhc3M9Imlvbi12aWRlb2NhbWVyYSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tZmlsbS1tYXJrZXIiIGNsYXNzPSJpb24tZmlsbS1tYXJrZXIiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWRpc2MiIGNsYXNzPSJpb24tZGlzYyIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24taGVhZHBob25lIiBjbGFzcz0iaW9uLWhlYWRwaG9uZSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tbXVzaWMtbm90ZSIgY2xhc3M9Imlvbi1tdXNpYy1ub3RlIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1yYWRpby13YXZlcyIgY2xhc3M9Imlvbi1yYWRpby13YXZlcyIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tc3BlYWtlcnBob25lIiBjbGFzcz0iaW9uLXNwZWFrZXJwaG9uZSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tbWljLWEiIGNsYXNzPSJpb24tbWljLWEiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLW1pYy1iIiBjbGFzcz0iaW9uLW1pYy1iIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1taWMtYyIgY2xhc3M9Imlvbi1taWMtYyIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tdm9sdW1lLWhpZ2giIGNsYXNzPSJpb24tdm9sdW1lLWhpZ2giID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLXZvbHVtZS1tZWRpdW0iIGNsYXNzPSJpb24tdm9sdW1lLW1lZGl1bSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tdm9sdW1lLWxvdyIgY2xhc3M9Imlvbi12b2x1bWUtbG93IiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi12b2x1bWUtbXV0ZSIgY2xhc3M9Imlvbi12b2x1bWUtbXV0ZSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tbGV2ZWxzIiBjbGFzcz0iaW9uLWxldmVscyIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tcGxheSIgY2xhc3M9Imlvbi1wbGF5IiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1wYXVzZSIgY2xhc3M9Imlvbi1wYXVzZSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tc3RvcCIgY2xhc3M9Imlvbi1zdG9wIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1yZWNvcmQiIGNsYXNzPSJpb24tcmVjb3JkIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1za2lwLWZvcndhcmQiIGNsYXNzPSJpb24tc2tpcC1mb3J3YXJkIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1za2lwLWJhY2t3YXJkIiBjbGFzcz0iaW9uLXNraXAtYmFja3dhcmQiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWVqZWN0IiBjbGFzcz0iaW9uLWVqZWN0IiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1iYWciIGNsYXNzPSJpb24tYmFnIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1jYXJkIiBjbGFzcz0iaW9uLWNhcmQiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWNhc2giIGNsYXNzPSJpb24tY2FzaCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tcHJpY2V0YWciIGNsYXNzPSJpb24tcHJpY2V0YWciID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLXByaWNldGFncyIgY2xhc3M9Imlvbi1wcmljZXRhZ3MiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLXRodW1ic3VwIiBjbGFzcz0iaW9uLXRodW1ic3VwIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi10aHVtYnNkb3duIiBjbGFzcz0iaW9uLXRodW1ic2Rvd24iID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWhhcHB5LW91dGxpbmUiIGNsYXNzPSJpb24taGFwcHktb3V0bGluZSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24taGFwcHkiIGNsYXNzPSJpb24taGFwcHkiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLXNhZC1vdXRsaW5lIiBjbGFzcz0iaW9uLXNhZC1vdXRsaW5lIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1zYWQiIGNsYXNzPSJpb24tc2FkIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1ib3d0aWUiIGNsYXNzPSJpb24tYm93dGllIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi10c2hpcnQtb3V0bGluZSIgY2xhc3M9Imlvbi10c2hpcnQtb3V0bGluZSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tdHNoaXJ0IiBjbGFzcz0iaW9uLXRzaGlydCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tdHJvcGh5IiBjbGFzcz0iaW9uLXRyb3BoeSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tcG9kaXVtIiBjbGFzcz0iaW9uLXBvZGl1bSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tcmliYm9uLWEiIGNsYXNzPSJpb24tcmliYm9uLWEiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLXJpYmJvbi1iIiBjbGFzcz0iaW9uLXJpYmJvbi1iIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi11bml2ZXJzaXR5IiBjbGFzcz0iaW9uLXVuaXZlcnNpdHkiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLW1hZ25ldCIgY2xhc3M9Imlvbi1tYWduZXQiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWJlYWtlciIgY2xhc3M9Imlvbi1iZWFrZXIiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWVybGVubWV5ZXItZmxhc2siIGNsYXNzPSJpb24tZXJsZW5tZXllci1mbGFzayIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tZWdnIiBjbGFzcz0iaW9uLWVnZyIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tZWFydGgiIGNsYXNzPSJpb24tZWFydGgiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLXBsYW5ldCIgY2xhc3M9Imlvbi1wbGFuZXQiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWxpZ2h0YnVsYiIgY2xhc3M9Imlvbi1saWdodGJ1bGIiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWN1YmUiIGNsYXNzPSJpb24tY3ViZSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tbGVhZiIgY2xhc3M9Imlvbi1sZWFmIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi13YXRlcmRyb3AiIGNsYXNzPSJpb24td2F0ZXJkcm9wIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi1mbGFtZSIgY2xhc3M9Imlvbi1mbGFtZSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tZmlyZWJhbGwiIGNsYXNzPSJpb24tZmlyZWJhbGwiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWJvbmZpcmUiIGNsYXNzPSJpb24tYm9uZmlyZSIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tdW1icmVsbGEiIGNsYXNzPSJpb24tdW1icmVsbGEiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLW51Y2xlYXIiIGNsYXNzPSJpb24tbnVjbGVhciIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tbm8tc21va2luZyIgY2xhc3M9Imlvbi1uby1zbW9raW5nIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9Imlvbi10aGVybW9tZXRlciIgY2xhc3M9Imlvbi10aGVybW9tZXRlciIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tc3BlZWRvbWV0ZXIiIGNsYXNzPSJpb24tc3BlZWRvbWV0ZXIiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLW1vZGVsLXMiIGNsYXNzPSJpb24tbW9kZWwtcyIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJpb24tcGxhbmUiIGNsYXNzPSJpb24tcGxhbmUiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWpldCIgY2xhc3M9Imlvbi1qZXQiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWxvYWQtYSIgY2xhc3M9Imlvbi1sb2FkLWEiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWxvYWQtYiIgY2xhc3M9Imlvbi1sb2FkLWIiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWxvYWQtYyIgY2xhc3M9Imlvbi1sb2FkLWMiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iaW9uLWxvYWQtZCIgY2xhc3M9Imlvbi1sb2FkLWQiID48L2k+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgIDxwPkRhZG8gcXVlIGxvcyBpY29ub3Mgc2UgYmFzYW4gZW4gZnVlbnRlcyBzZSBwdWVkZSBoYWNlciBhbGd1bmFzIGFsdGVyYWNpb25lcyBkZSB0YW1hw7FvLCBjb2xvciwgZWZlY3RvcywgZW50cmUgb3Ryb3MuPC9wPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveC10ZXh0IGV4YW1wbGUiIGxhYmVsPSJFamVtcGxvOiBUcmFuc2Zvcm1hbmRvIMOtY29ub3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkYXRhX2xpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGl0dGxlIj5Nw6FzIHBlcXVlw7FvOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imlvbi1hcnJvdy1kb3duLWEiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaW9uLWNoZWNrbWFyay1jaXJjbGVkIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imlvbi1oYXBweS1vdXRsaW5lIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imlvbi1lcmxlbm1leWVyLWZsYXNrIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGFyZ2UiPk3DoXMgZ3JhbmRlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imlvbi1hcnJvdy1kb3duLWEiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaW9uLWNoZWNrbWFyay1jaXJjbGVkIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imlvbi1oYXBweS1vdXRsaW5lIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imlvbi1lcmxlbm1leWVyLWZsYXNrIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjb2xvciI+T3Ryb3MgY29sb3JlczoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpb24tYXJyb3ctZG93bi1hIGEiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaW9uLWNoZWNrbWFyay1jaXJjbGVkIGIiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaW9uLWhhcHB5LW91dGxpbmUgYyIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpb24tZXJsZW5tZXllci1mbGFzayBkIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaW5rIj5Db21vIGVubGFjZXM6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iaW9uLWFycm93LWRvd24tYSIgPjwvaT48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iaW9uLWNoZWNrbWFyay1jaXJjbGVkIiA+PC9pPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJpb24taGFwcHktb3V0bGluZSIgPjwvaT48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iaW9uLWVybGVubWV5ZXItZmxhc2siID48L2k+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJlZmZlY3RzIj5Tb21icmE6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaW9uLWFycm93LWRvd24tYSBhIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imlvbi1jaGVja21hcmstY2lyY2xlZCBiIiA+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imlvbi1oYXBweS1vdXRsaW5lIGMiID48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaW9uLWVybGVubWV5ZXItZmxhc2sgZCIgPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPk5vdGFzIGVtZXJnZW50ZXMgLSBUb29sdGlwczwvaDM+DQoNCiAgICAgICAgICAgICAgICAgICAgPHA+UGFyYSBsYXMgbm90YXMgZW1lcmdlbnRlcyBzZSB1dGlsaXphIGxhIGNsYXNlIDxlbT50b29sdGlwPC9lbT4sIG5vcm1hbG1lbnRlIGVuIHVuIGVsZW1lbnRvIDxlbT5zdXA8L2VtPiB5IGVsIHRleHRvIGEgbW9zdHJhciBlbiBlbCB0b29sdGlwIHNlIGRlZmluZSBlbiBlbCBhdHJpYnV0byA8ZW0+bGFiZWw8L2VtPi4gRWwgY29udGVuaWRvIHB1ZWRlIHNlciB0ZXh0byBwbGFubyBvIEhUTUwuIFVuIHVzbyBmcmVjdWVudGUgZGUgbG9zIHRvb2x0aXAgZXMgcmVlbXBsYXphciBsYXMgIm5vdGFzIGFsIHBpZSIgZGUgbG9zIGRvY3VtZW50b3MgdHJhZGljaW9uYWxlcy48L3A+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveC10ZXh0IGV4YW1wbGUiIGxhYmVsPSJFamVtcGxvIGRlIHRvb2x0aXAiPg0KPHByZT4NCiZsdDtzdXAgY2xhc3M9InRvb2x0aXAiIHRpdGxlPSJNZW5zYWplIGEgJmx0O2VtJmd0O2Rlc3BsZWdhciZsdDsvZW0mZ3Q7IGVuIGVsIHRvb2x0aXAiJmd0O1sxXSZsdDsvc3VwJmd0Ow0KPC9wcmU+DQogICAgICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbCBhbnRlcmlvciBlamVtcGxvIHNlIHZlcsOtYSBhc8OtOjxzdXAgY2xhc3M9InRvb2x0aXAiIHRpdGxlPSJNZW5zYWplIGEgPGVtPmRlc3BsZWdhcjwvZW0+IGVuIGVsIHRvb2x0aXAiID5bMV08L3N1cD4uIE5vdGVzZSBxdWUgZW4gZWwgdG9vbHRpcCBsYSBwYWxhYnJhIDxjaXRlPmRlc3BsZWdhcjwvY2l0ZT4gZXN0w6EgZW5yaXF1ZXppZGEgY29uIHVuYSBldGlxdWV0YSBIVE1MLg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBBZGljaW9uYWwgYWwgY29udGVuaWRvLCBzZSBwdWVkZW4gYWRpY2lvbmFyIGxvcyBzaWd1aWVudGVzIGF0cmlidXRvcyBwYXJhIHJlc29sdmVyIGVsIHBvc2ljaW9uYW1pZW50byBkZWwgdG9vbHRpcC4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRhdGFfbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHN0cm9uZz5kYXRhLXBvc2l0aW9uLW15PC9zdHJvbmc+OiBJbmRpY2EgbGEgcG9zaWNpw7NuIGRlbCB0b29sdGlwIGVuIHJlbGFjacOzbiBhbCBlbGVtZW50byBxdWUgbG8gZGVzcGxpZWdhLiBQYXJhIHZlciBsb3MgcG9zaWJsZXMgdmFsb3JlcyB5IHN1IGZ1bmNpb25hbWllbnRvLCByZXZpc2FyIGVsIGF0cmlidXRvICJteSIgZGUgbGEgcMOhZ2luYSA8YSBocmVmPSJodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9wb3NpdGlvbi8iIHRhcmdldD0iX2JsYW5rIj5qUXVlcnkgVUkgUG9zaXRpb248L2E+LjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHN0cm9uZz5kYXRhLXBvc2l0aW9uLWF0PC9zdHJvbmc+OiBJbmRpY2EgbGEgcG9zaWNpw7NuIGRlbCB0b29sdGlwIGVuIHJlbGFjacOzbiBhbCBlbGVtZW50byBkZXN0aW5vLiBQYXJhIHZlciBsb3MgcG9zaWJsZXMgdmFsb3JlcyB5IHN1IGZ1bmNpb25hbWllbnRvLCByZXZpc2FyIGVsIGF0cmlidXRvICJhdCIgZGUgbGEgcMOhZ2luYSA8YSBocmVmPSJodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9wb3NpdGlvbi8iIHRhcmdldD0iX2JsYW5rIj5qUXVlcnkgVUkgUG9zaXRpb248L2E+LjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHN0cm9uZz5kYXRhLXBvc2l0aW9uLWZsaXBmaXQ8L3N0cm9uZz46IERldGVybWluYSBjb21vIHNlIHJlc3VlbHZlIGxhIHBvc2ljacOzbiBjdWFuZG8gZWwgZWxlbWVudG8gc2Ugc2FsZSBkZWwgZXNwYWNpbyBkaXNwb25pYmxlIHNpIHNlIHVzYSBsYSBwb3NpY2nDs24gcG9yIGRlZmVjdG8uIFBhcmEgdmVyIGxvcyBwb3NpYmxlcyB2YWxvcmVzIHkgc3UgZnVuY2lvbmFtaWVudG8sIHJldmlzYXIgZWwgYXRyaWJ1dG8gImNvbGxpc2lvbiIgZGUgbGEgcMOhZ2luYSA8YSBocmVmPSJodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9wb3NpdGlvbi8iIHRhcmdldD0iX2JsYW5rIj5qUXVlcnkgVUkgUG9zaXRpb248L2E+LjwvbGk+DQogICAgICAgICAgICAgICAgICAgIDwvdWw+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+Q2l0YXM8L2gzPg0KICAgICAgICAgICAgICAgICAgICA8cD5UZXh0b3MgcXVlIHNlIGNpdGFuIGFsIHBpZSBkZSBsYSBsZXRyYS4gU2UgdXRpbGl6YSBsYSBldGlxdWV0YSA8ZW0+YmxvY2txdW90ZTwvZW0+LiBMYSBpbmZvcm1hY2nDs24gZGUgbGEgcmVmZXJlbmNpYSBzZSBlc2NyaWJlIHV0aWxpemFuZG8gbGEgZXRpcXVldGEgPGVtPmxhYmVsPC9lbT4uPC9wPg0KICAgICAgICAgICAgICAgICAgICA8YmxvY2txdW90ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICJbLi4uXSBzaSB1biBwb2V0YSBtdWVydG8gYWwgb3RybyBsYWRvIGRlbCBtdW5kbyBwb2TDrWEgZGVzY3JpYmlyIG1pcyBzZW50aW1pZW50b3MgY29uIHRhbCBwcmVjaXNpw7NuLCBkZWLDrWEgYWNlcHRhciBjb24gaHVtaWxkYWQgcXVlIG1pIGFtb3Igbm8gZXJhIGV4Y2VwY2lvbmFsLCBuYWRhIGhhYsOtYSBpbnZlbnRhZG8sIHRvZG8gZWwgbXVuZG8gc2UgZW5hbW9yYSBpZ3VhbC4gWy4uLl0iDQogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+UmV0cmF0byBlbiBzZXBpYS4gSXNhYmVsIEFsbGVuZGUuIEltcHJlc28gZW4gQ29sb21iaWEuIEVkaWNpw7NuIGRlIGJvbHNpbGxvLCBtYXJ6bywgMjAwNi4gUGFnIDI1MS4gSVNCTiA5NTgtNjM5LTI5OC04PC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgPC9ibG9ja3F1b3RlPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSIgaWQ9InBhZy10ZXh0b3MtbW91c2VvdmVyMSI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5Nb3VzZSAic29icmUiPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPHA+UGFyYSBkZXNwbGVnYXIgY29udGVuaWRvIHBhc2FuZG8gZWwgbW91c2UgcG9yIHVuIGVsZW1lbnRvLCBzZSB1dGlsaXphIGxhIGNsYXNlIDxlbT5tb3VzZS1vdmVyLW9uZTwvZW0+IGVuIHVuIGNvbnRlbmVkb3IgY29uIGVsZW1lbnRvcyBxdWUgYWRpY2lvbmFuIGVsIGF0cmlidXRvIDxlbT5kYXRhLXJlZjwvZW0+LCBsYSBjdWFsIGRlYmUgY29udGVuZXIgbGEgcnV0YSBDU1MgZGVsIGVsZW1lbnRvIHF1ZSBzZSBtdWVzdHJhIGFsIHBhc2FyIGVsIG1vdXNlLiBTZSBtYW50aWVuZSB2aXNpYmxlIGVsIMO6bHRpbW8gZWxlbWVudG8gbW9zdHJhZG8uPC9wPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3gtdGV4dCBpbXBvcnRhbnQiIGxhYmVsPSJJbXBvcnRhbnRlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwPk5vIHNlIGNvbnRyb2xhIGxhIHZpc3VhbGl6YWNpw7NuIGluaWNpYWwgcG9yIGxvIHF1ZSBzZSBkZWJlbiBvY3VsdGFyIGxvcyBlbGVtZW50b3MgZXhwbMOtY2l0YW1lbnRlIHkgbWFudGVuZXIgdmlzaWJsZSBzb2xhbWVudGUgZWwgaW5pY2lhbC4gQWRlbcOhcywgbWFyY2FyIGVsIGVsZW1lbnRvIGRlIGNvbnRyb2wgZGVsIGVsZW1lbnRvIHZpc2libGUgY29uIGxhIGNsYXNlIDxlbT5jdXJyZW50PC9lbT4uPC9wPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb3VzZS1vdmVyLW9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidXR0b24gYjEgY3VycmVudCIgZGF0YS1yZWY9IiNwYWctdGV4dG9zLW1vdXNlb3ZlcjEgLnAxIj48c3Bhbj4xPC9zcGFuPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnV0dG9uIGIyIiBkYXRhLXJlZj0iI3BhZy10ZXh0b3MtbW91c2VvdmVyMSAucDIiPjxzcGFuPjI8L3NwYW4+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidXR0b24gYjMiIGRhdGEtcmVmPSIjcGFnLXRleHRvcy1tb3VzZW92ZXIxIC5wMyI+PHNwYW4+Mzwvc3Bhbj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ1dHRvbiBiNCIgZGF0YS1yZWY9IiNwYWctdGV4dG9zLW1vdXNlb3ZlcjEgLnA0Ij48c3Bhbj40PC9zcGFuPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnV0dG9uIGI1IiBkYXRhLXJlZj0iI3BhZy10ZXh0b3MtbW91c2VvdmVyMSAucDUiPjxzcGFuPjU8L3NwYW4+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8YnIgY2xhc3M9ImNsZWFyIiAvPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnN0cnVjdGlvbiI+PHNwYW4gY2xhc3M9Im9ubHltb2JpbGUiPlRvcXVlPC9zcGFuPjxzcGFuIGNsYXNzPSJub3Rtb2JpbGUiPlBhc2UgZWwgbW91c2UgcG9yPC9zcGFuPiBjYWRhIHVubyBkZSBsb3MgZWxlbWVudG9zIGRlbCBncsOhZmljbyBwYXJhIGFtcGxpYXIgbGEgaW5mb3JtYWNpw7NuPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVuaWRvX3NvYnJlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVsZW1lbnQgcDEiPjxoNT4xOiA8L2g1PjxwPkludGVnZXIgc2VkIGFyY3UgZmVsaXMuIE1vcmJpIHB1bHZpbmFyIHNjZWxlcmlzcXVlIGF1Z3VlIGFjIGVsZW1lbnR1bS4gUXVpc3F1ZSBsYWNpbmlhIHBlbGxlbnRlc3F1ZSB0cmlzdGlxdWUuIFByYWVzZW50IGN1cnN1cyBkb2xvciBhIG1hc3NhIGFsaXF1YW0gZGlnbmlzc2ltLiBOdWxsYW0gc2l0IGFtZXQgcHVsdmluYXIgcHVydXMuIERvbmVjIGFjIGZyaW5naWxsYSBtYXNzYS4gVml2YW11cyBuZWMgZW5pbSBsYWN1cy48L3A+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlbGVtZW50IHAyIiBzdHlsZT0iZGlzcGxheTogbm9uZSI+PGg1PjI6IDwvaDU+PHA+TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3JhcyBzZW1wZXIgdGluY2lkdW50IHNlbSwgZXQgcGxhY2VyYXQgbnVuYyB2ZW5lbmF0aXMgc2VkLiBGdXNjZSBpZCBsZW8gYSBtaSBmcmluZ2lsbGEgcmhvbmN1cyBxdWlzIGluIGZlbGlzLiBJbiBxdWlzIGRpYW0gZXQgYW50ZSBzb2xsaWNpdHVkaW4gdmVuZW5hdGlzIHZlbCBpZCBhcmN1LiBEb25lYyBhbGlxdWFtIGRpY3R1bSBzY2VsZXJpc3F1ZS4gSW4gc29kYWxlcyBlbmltIGV0IG5pc2wgc2FnaXR0aXMgdGVtcG9yLiBDcmFzIGFjIHZvbHV0cGF0IG5pc2kuIEZ1c2NlIGF0IG1ldHVzIHZvbHV0cGF0LCBzb2xsaWNpdHVkaW4gbG9yZW0gZXUsIHRpbmNpZHVudCBzYXBpZW4uIENyYXMgbmliaCBudWxsYSwgb3JuYXJlIGV1IG5pYmggcGhhcmV0cmEsIGZhdWNpYnVzIHBlbGxlbnRlc3F1ZSBuZXF1ZS48L3A+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlbGVtZW50IHAzIiBzdHlsZT0iZGlzcGxheTogbm9uZSI+PGg1PjM6IDwvaDU+PHA+UGhhc2VsbHVzIHByZXRpdW0gcmlzdXMgaW4gZGlnbmlzc2ltIGVsZWlmZW5kLiBNYXVyaXMgcHVsdmluYXIgbm9uIGF1Z3VlIGFjIHJob25jdXMuIFBoYXNlbGx1cyBmYXVjaWJ1cywgbmlzbCB2aXRhZSBpbXBlcmRpZXQgaW1wZXJkaWV0LCBmZWxpcyBudW5jIGxvYm9ydGlzIGFudGUsIGluIGltcGVyZGlldCBsb3JlbSBqdXN0byBpZCBuaXNsLiBQcm9pbiB1dCB2ZWxpdCBudWxsYS4gTnVsbGEgZWZmaWNpdHVyIGRhcGlidXMgcGhhcmV0cmEuIFF1aXNxdWUgZXUgbGVvIHJpc3VzLiBBbGlxdWFtIGVyYXQgdm9sdXRwYXQuIFV0IGZyaW5naWxsYSByaXN1cyBkaWFtLCBhYyBmZXVnaWF0IHJpc3VzIGlhY3VsaXMgYWMuPC9wPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZWxlbWVudCBwNCIgc3R5bGU9ImRpc3BsYXk6IG5vbmUiPjxoNT40OiA8L2g1PjxwPk5hbSBjb25ndWUgZGlhbSBtYXVyaXMsIHF1aXMgdml2ZXJyYSBvcmNpIG1hdHRpcyB2YXJpdXMuIFByYWVzZW50IGNvbnZhbGxpcyB0ZW1wdXMgb2Rpbywgbm9uIG1hbGVzdWFkYSBtaS4gRHVpcyBwdWx2aW5hciB2ZWwgbGFjdXMgdml0YWUgZXVpc21vZC4gQWxpcXVhbSB2ZWhpY3VsYSBlc3QgZXQgc2FwaWVuIG1hdHRpcyBjb25kaW1lbnR1bS4gVml2YW11cyBhIHNvbGxpY2l0dWRpbiBtZXR1cy4gUXVpc3F1ZSB1dCBlbGl0IGV0IGVuaW0gZGlnbmlzc2ltIGF1Y3Rvci48L3A+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlbGVtZW50IHA1IiBzdHlsZT0iZGlzcGxheTogbm9uZSI+PGg1PjU6IDwvaDU+PHA+UGVsbGVudGVzcXVlIHNlZCBpcHN1bSBxdWlzIG5lcXVlIGRpY3R1bSBwb3J0dGl0b3IuIE51bmMgYWMgcHVydXMgdml0YWUgZW5pbSB2b2x1dHBhdCBkaWN0dW0uPC9wPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiIGlkPSJwYWctdGV4dG9zLW1vdXNlb3ZlcjIiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+TW91c2UgInNvYnJlIiB1biBlbGVtZW50bzwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxwPlBhcmEgZGVzcGxlZ2FyIGNvbnRlbmlkbyBwYXNhbmRvIGVsIG1vdXNlIHBvciB1biBlbGVtZW50bywgc2UgdXRpbGl6YSBsYSBjbGFzZSA8ZW0+bW91c2Utb3ZlcjwvZW0+IGVuIHVuIGVsZW1lbnRvIHF1ZSBkZWJlIHRlbmVyIGVsIGF0cmlidXRvIDxlbT5kYXRhLXJlZjwvZW0+LCBsYSBjdWFsIGRlYmUgY29udGVuZXIgbGEgcnV0YSBDU1MgZGVsIGVsZW1lbnRvIHF1ZSBzZSBtdWVzdHJhIGFsIHBhc2FyIGVsIG1vdXNlLiBBbCBxdWl0YXIgZWwgbW91c2UgZWwgZWxlbWVudG8gc2UgdnVlbHZlIGEgb2N1bHRhci48L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94LXRleHQgaW1wb3J0YW50IiBsYWJlbD0iSW1wb3J0YW50ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8cD5ObyBzZSBjb250cm9sYSBsYSB2aXN1YWxpemFjacOzbiBpbmljaWFsIHBvciBsbyBxdWUgc2UgZGViZSBvY3VsdGFyIGV4cGzDrWNpdGFtZW50ZSBlbCBlbGVtZW50byBhbCBpbmljaW8uPC9wPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb3VzZS1vdmVyIiBkYXRhLXJlZj0iI3BhZy10ZXh0b3MtbW91c2VvdmVyMiAuY29udGVuaWRvX3NvYnJlIj4xPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5zdHJ1Y3Rpb24iPjxzcGFuIGNsYXNzPSJvbmx5bW9iaWxlIj5Ub3F1ZTwvc3Bhbj48c3BhbiBjbGFzcz0ibm90bW9iaWxlIj5QYXNlIGVsIG1vdXNlIHBvcjwvc3Bhbj4gZWwgZWxlbWVudG8gcGFyYSBhbXBsaWFyIGxhIGluZm9ybWFjacOzbjwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbmlkb19zb2JyZSIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwPkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIENyYXMgc2VtcGVyIHRpbmNpZHVudCBzZW0sIGV0IHBsYWNlcmF0IG51bmMgdmVuZW5hdGlzIHNlZC4gRnVzY2UgaWQgbGVvIGEgbWkgZnJpbmdpbGxhIHJob25jdXMgcXVpcyBpbiBmZWxpcy4gSW4gcXVpcyBkaWFtIGV0IGFudGUgc29sbGljaXR1ZGluIHZlbmVuYXRpcyB2ZWwgaWQgYXJjdS4gRG9uZWMgYWxpcXVhbSBkaWN0dW0gc2NlbGVyaXNxdWUuIEluIHNvZGFsZXMgZW5pbSBldCBuaXNsIHNhZ2l0dGlzIHRlbXBvci4gQ3JhcyBhYyB2b2x1dHBhdCBuaXNpLiBGdXNjZSBhdCBtZXR1cyB2b2x1dHBhdCwgc29sbGljaXR1ZGluIGxvcmVtIGV1LCB0aW5jaWR1bnQgc2FwaWVuLiBDcmFzIG5pYmggbnVsbGEsIG9ybmFyZSBldSBuaWJoIHBoYXJldHJhLCBmYXVjaWJ1cyBwZWxsZW50ZXNxdWUgbmVxdWUuIFZpdmFtdXMgaWQgYXVndWUgdG9ydG9yLiBEb25lYyBncmF2aWRhIGRvbG9yIGF0IHVsbGFtY29ycGVyIHZlbmVuYXRpcy4gVXQgY29uc2VxdWF0IHNhcGllbiBsaWJlcm8sIGVnZXQgcHJldGl1bSBtYWduYSB1bHRyaWNlcyBhYy48L3A+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5Db250ZW5pZG8gZW4gY29sdW1uYXM8L2gzPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlBlcm1pdGUgc2VwYXJhciBlbCBjb250ZW5pZG8gZW4gZG9zIGNvbHVtbmFzIGN1YW5kbyBlbCBhbmNobyBkZWwgZGlzcG9zaXRpdm8gZXMgbXV5IGdyYW5kZSB5IHNlIGFjb21vZGEgYSB1bmEgc29sYSBjb2x1bW5hIHNpIG5vIGxvIGVzLjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QYXJhIHV0aWxpemFybG8sIHNlIGNyZWEgdW4gPGVtPmRpdjwvZW0+IGNvbiBsYSBjbGFzZSA8ZW0+cm93PC9lbT4geSBkZW50cm8gZGUgw6lsIGRvcyA8ZW0+ZGl2PC9lbT4gY29uIGxhIGNsYXNlIDxlbT5jb2wtMjwvZW0+LiBEZW50cm8gZGUgY2FkYSB1bm8gZGUgZXN0b3Mgw7psdGltb3MgPGVtPmRpdjwvZW0+IGlyw6EgZWwgY29udGVuaWRvIGRlIGNhZGEgY29sdW1uYS48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94LXRleHQgbm90ZSIgbGFiZWw9IlRpcCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkNhYmUgYW5vdGFyIHF1ZSBkZW50cm8gZGUgY2FkYSBjb2x1bW5hIHB1ZWRlIGhhYmVyIG51ZXZhbWVudGUgdW4gY29udGVuaWRvICJhIGRvcyBjb2x1bW5hcyIgZW4gZWwgY2FzbyBxdWUgc2UgcmVxdWllcmEuPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94LXRleHQgZXhhbXBsZSIgbGFiZWw9IkVqZW1wbG8gZGUgdGV4dG8gYSBkb3MgY29sdW1uYXMiPg0KPHByZT4NCiZsdDtkaXYgY2xhc3M9InJvdyImZ3Q7DQogICAgJmx0O2RpdiBjbGFzcz0iY29sLTIiJmd0Ow0KICAgICAgICBDb250ZW5pZG8gZGUgbGEgcHJpbWVyYSBjb2x1bW5hDQogICAgJmx0Oy9kaXYmZ3Q7DQogICAgJmx0O2RpdiBjbGFzcz0iY29sLTIiJmd0Ow0KICAgICAgICBDb250ZW5pZG8gZGUgbGEgc2VndW5kYSBjb2x1bW5hDQogICAgJmx0Oy9kaXYmZ3Q7DQombHQ7L2RpdiZndDsNCjwvcHJlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiIGlkPSJ0ZXh0b3NfbW91c2Vfb3Zlcl8xIj4NCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIj4NCiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnN0cnVjdGlvbiBkZXNrdG9wIj48L2k+UGFzZSBlbCBtb3VzZSBwb3IgY2FkYSDDoXJlYSBkZWwgbGFib3JhdG9yaW8gcGFyYSBjb25vY2VyIHN1IG5vbWJyZSB5IHZpc3RhIGludGVybmEgKGxhZG8gZGVyZWNobykuPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9ImNvbnRlbnQvaW1nNG1hcC5wbmciIGNsYXNzPSJtYXBoaWxpZ2h0IiB1c2VtYXA9IiNtYXBsYWIiIGRhdGEtbWFyay1zdHJva2UtY29sb3I9IkI5RTZGNSIgZGF0YS1tYXJrLWZpbGwtY29sb3I9IkI5RTZGNSIgZGF0YS1tYXJrLW9wYWNpdHk9IjAuNSIvPg0KICAgICAgICAgICAgICAgICAgICAgIDxtYXAgbmFtZT0ibWFwbGFiIiBjbGFzcz0iYWN0X21vdXNlX292ZXJfb25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhcmVhIGFsdD0idW5vIiBjbGFzcz0iYnV0dG9uIGIxIGN1cnJlbnQiICBzaGFwZT0icmVjdCIgY29vcmRzPSIyNCw0NiwxMzMsMTU2IiB0YXJnZXQ9Il9zZWxmIiBhbHQ9InVubyIgZGF0YS1yZWY9IiN0ZXh0b3NfbW91c2Vfb3Zlcl8xIC5wMSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGFyZWEgYWx0PSJkb3MiICBjbGFzcz0iYnV0dG9uIGIyIiB0aXRsZT0iIiAgc2hhcGU9InBvbHkiIGNvb3Jkcz0iMTM3LDQ2LDI0NSw0NywyNDUsMTAzLDM1NSwxMDMsMzU2LDE1OCwxMzcsMTU2LDEzNywxMjIiIHRhcmdldD0iX3NlbGYiIGFsdD0idW5vIiBkYXRhLXJlZj0iI3RleHRvc19tb3VzZV9vdmVyXzEgLnAyIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGFyZWEgYWx0PSJ0cmVzIiAgY2xhc3M9ImJ1dHRvbiBiMyIgdGl0bGU9IiIgIHNoYXBlPSJyZWN0IiBjb29yZHM9IjI0Nyw0NywzNTQsMTAwIiB0YXJnZXQ9Il9zZWxmIiBhbHQ9InRyZXMiIGRhdGEtcmVmPSIjdGV4dG9zX21vdXNlX292ZXJfMSAucDMiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICA8YXJlYSBhbHQ9ImN1YXRybyIgIGNsYXNzPSJidXR0b24gYjQiIHRpdGxlPSIiICBzaGFwZT0icmVjdCIgY29vcmRzPSIzNTgsNDcsNDY4LDE1NyIgdGFyZ2V0PSJfc2VsZiIgYWx0PSJjdWF0cm8iIGRhdGEtcmVmPSIjdGV4dG9zX21vdXNlX292ZXJfMSAucDQiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICA8YXJlYSBhbHQ9ImNpbmNvIiAgY2xhc3M9ImJ1dHRvbiBiNSIgdGl0bGU9IiIgIHNoYXBlPSJyZWN0IiBjb29yZHM9IjIyLDE2MSwxODgsMjY5IiB0YXJnZXQ9Il9zZWxmIiBhbHQ9ImNpbmNvIiBkYXRhLXJlZj0iI3RleHRvc19tb3VzZV9vdmVyXzEgLnA1IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGFyZWEgYWx0PSJzZWlzIiAgY2xhc3M9ImJ1dHRvbiBiNiIgdGl0bGU9IiIgIHNoYXBlPSJyZWN0IiBjb29yZHM9IjE5MiwxNjEsMzAxLDI2OSIgdGFyZ2V0PSJfc2VsZiIgYWx0PSJzZWlzIiBkYXRhLXJlZj0iI3RleHRvc19tb3VzZV9vdmVyXzEgLnA2IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGFyZWEgYWx0PSJzaWV0ZSIgIGNsYXNzPSJidXR0b24gYjciIHRpdGxlPSIiICBzaGFwZT0icmVjdCIgY29vcmRzPSIzMDIsMTYxLDQxNSwyNzAiIHRhcmdldD0iX3NlbGYiIGFsdD0ic2lldGUiIGRhdGEtcmVmPSIjdGV4dG9zX21vdXNlX292ZXJfMSAucDciIC8+DQogICAgICAgICAgICAgICAgICAgICAgPC9tYXA+DQogICAgICAgICAgICAgICAgICAgICAgPGJyIGNsYXNzPSJjbGVhciIvPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+DQogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZWxlbWVudCBwMSI+PGg1PsOBcmVhIGRlIGluYWN0aXZhY2nDs24geSBsYXZhZG86IDwvaDU+PHA+TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgcXVpcyBub3N0cnVkIGV4ZXJjaXRhdGlvbiB1bGxhbWNvIGxhYm9yaXMgbmlzaSB1dCBhbGlxdWlwIGV4IGVhIGNvbW1vZG8gY29uc2VxdWF0LiBEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bS48L3A+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZWxlbWVudCBwMiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPjxoNT7DgXJlYSBkZSBwcmVwYXJhY2nDs24geSBlc3RlcmlsaXphY2nDs246IDwvaDU+PHA+TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgcXVpcyBub3N0cnVkIGV4ZXJjaXRhdGlvbiB1bGxhbWNvIGxhYm9yaXMgbmlzaSB1dCBhbGlxdWlwIGV4IGVhIGNvbW1vZG8gY29uc2VxdWF0LiBEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bS48L3A+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZWxlbWVudCBwMyIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPjxoNT7DgXJlYSBkZSBjdWx0aXZvcyBvIGRlIHRyYW5zZmVyZW5jaWE6IDwvaDU+PHA+TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgcXVpcyBub3N0cnVkIGV4ZXJjaXRhdGlvbiB1bGxhbWNvIGxhYm9yaXMgbmlzaSB1dCBhbGlxdWlwIGV4IGVhIGNvbW1vZG8gY29uc2VxdWF0LiBEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bS48L3A+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZWxlbWVudCBwNCIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPjxoNT7DgXJlYSBkZSBjcmVjaW1pZW50byBvIGluY3ViYWNpw7NuOiA8L2g1PjxwPkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sIHF1aXMgbm9zdHJ1ZCBleGVyY2l0YXRpb24gdWxsYW1jbyBsYWJvcmlzIG5pc2kgdXQgYWxpcXVpcCBleCBlYSBjb21tb2RvIGNvbnNlcXVhdC4gRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0uPC9wPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVsZW1lbnQgcDUiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij48aDU+w4FyZWEgZGUgYWNjZXNvOiA8L2g1PjxwPkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sIHF1aXMgbm9zdHJ1ZCBleGVyY2l0YXRpb24gdWxsYW1jbyBsYWJvcmlzIG5pc2kgdXQgYWxpcXVpcCBleCBlYSBjb21tb2RvIGNvbnNlcXVhdC4gRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0uPC9wPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVsZW1lbnQgcDYiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij48aDU+w4FyZWEgZGUgb2ZpY2luYXM6IDwvaDU+PHA+TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgcXVpcyBub3N0cnVkIGV4ZXJjaXRhdGlvbiB1bGxhbWNvIGxhYm9yaXMgbmlzaSB1dCBhbGlxdWlwIGV4IGVhIGNvbW1vZG8gY29uc2VxdWF0LiBEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bS48L3A+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZWxlbWVudCBwNyIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPjxoNT7DgXJlYSBkZSBvYnNlcnZhY2nDs246IDwvaDU+PHA+TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgcXVpcyBub3N0cnVkIGV4ZXJjaXRhdGlvbiB1bGxhbWNvIGxhYm9yaXMgbmlzaSB1dCBhbGlxdWlwIGV4IGVhIGNvbW1vZG8gY29uc2VxdWF0LiBEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bS48L3A+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvc2VjdGlvbj4NCg0KICAgICAgICAgICAgPCEtLU11bHRpbWVkaWEtLT4NCiAgICAgICAgICAgIDxzZWN0aW9uIGlkPSJwYWctbWVkaWEiIHB0aXRsZT0iMi4gTXVsdGltZWRpYSI+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPkF1ZGlvczwvaDM+DQoNCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBMb3MgYXVkaW9zIHB1ZWRlbiBzZXIgY2FyZ2Fkb3MgZGVzZGUgY3VhbHF1aWVyIGVsZW1lbnRvIEhUTUwgdXRpbGl6YW5kbyBlbCBhdHJpYnV0byA8ZW0+ZGF0YS1zb3VuZDwvZW0+LCBlbCBjdWFsIGNvbnRpZW5lIGxhIHJ1dGEgY29tcHVlc3RhIHBvciBlbCBub21icmUgZGVsIGFyY2hpdm8geSwgc2kgZXN0w6EgZGVudHJvIGRlIHVuYSBjYXJwZXRhLCBlbCBub21icmUgZGUgbGEgY2FycGV0YS4gVG9kb3MgbG9zIGF1ZGlvcyBkZWJlbiBpciBlbiBsYSBjYXJwZXRhIDxzdHJvbmc+Y29udGVudC9zb3VuZHMvPC9zdHJvbmc+LiBTZSByZWNvbWllbmRhIHV0aWxpemFyIHVuIGJvdMOzbiBjb24gY2xhc2UgPGVtPmljb25zb3VuZDwvZW0+IGFsIGN1YWwgYWRlbcOhcyBzZSBsZSBwdWVkZSBhZ3JlZ2FyIGxhIGNsYXNlIDxlbT5idXR0b248L2VtPiBwYXJhIGVsIGVmZWN0byAic29icmUiLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94LXRleHQgZXhhbXBsZSIgbGFiZWw9IkVqZW1wbG8gZGUgYXVkaW8gc2ltcGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwcmU+Jmx0O2J1dHRvbiBjbGFzcz0iaWNvbnNvdW5kIGJ1dHRvbiIgZGF0YS1zb3VuZD0iYmVlcDA5Lm9nZyI+Jmx0Oy9idXR0b24mZ3Q7PC9wcmU+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVsIGPDs2RpZ28gYW50ZXJpb3Igc2UgdmVyw61hIGFzw606IDxidXR0b24gY2xhc3M9Imljb25zb3VuZCBidXR0b24iIGRhdGEtc291bmQ9ImJlZXAwOS5vZ2ciPjwvYnV0dG9uPiwgZG9uZGUgPHN0cm9uZz5iZWVwMDkub2dnPC9zdHJvbmc+IGVzIGVsIG5vbWJyZSBkZWwgYXJjaGl2byB5IHNlIGVuY3VlbnRyYSBkaXJlY3RhbWVudGUgZW4gbGEgY2FycGV0YSA8c3Ryb25nPmNvbnRlbnQvc291bmRzLzwvc3Ryb25nPi4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnN0cnVjdGlvbiIgdHlwZT0iaW5mbyI+PGEgaHJlZj0iaHR0cHM6Ly9jb21tb25zLndpa2ltZWRpYS5vcmcvd2lraS9GaWxlOkJlZXAtMDkub2dnIiB0YXJnZXQ9Il9ibGFuayI+U29uaWRvIEJlZXA8L2E+LCB0b21hZG8gZGUgV2lraW1lZGlhIGNvbW1vbnMuIEJ5IFJvY2todXNoby48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBTaSBsbyBxdWUgc2UgZGVzZWEgZXMgdW4gYXVkaW8gZW4gdW4gcmVwcm9kdWN0b3IgY29uIGNvbnRyb2xlcywgZW50b25jZXMgc2UgZGViZSB1dGlsaXphciBsYSBldGlxdWV0YSBlc3RhbmRhciBkZSBITVRMNTogPGVtPmF1ZGlvPC9lbT4sIGNvbiBsYXMgb3BjaW9uZXMgcXVlIHNlIGRlZmluZW4gcGFyYSBlbGxhLiBQYXJhIHZlciBpbmZvcm1hY2nDs24gYWwgcmVzcGVjdG8gdmlzaXRlIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vaHRtbC9odG1sNV9hdWRpby5hc3AiIHRhcmdldD0iX2JsYW5rIj5odHRwczovL3d3dy53M3NjaG9vbHMuY29tL2h0bWwvaHRtbDVfYXVkaW8uYXNwPC9hPi4gRW4gZXN0ZSBjYXNvLCBsYSBydXRhIGRlbCBvcsOtZ2VuIGRlbCBhcmNoaXZvIHNlIGRlYmUgZGVmaW5pciBjb21wbGV0YW1lbnRlLCBhdW5xdWUgc2UgcmVjb21pZW5kYSBxdWUgc2UgYWxtYWNlbmVuIHRhbWJpZW4gZW4gbGEgY2FycGV0YSA8c3Ryb25nPmNvbnRlbnQvc291bmRzLzwvc3Ryb25nPi4gQ2FiZSBhbm90YXIgcXVlIGxhIGFwYXJpZW5jaWEgZGVsIHJlcHJvZHVjdG9yIGVzdGFyw6EgZGV0ZXJtaW5hZGEgZW4gc3UgZ3JhbiBtYXlvcsOtYSBwb3IgZWwgbmF2ZWdhZG9yLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94LXRleHQgZXhhbXBsZSIgbGFiZWw9IkVqZW1wbG8gZGUgYXVkaW8gY29uIGNvbnRyb2xlcyI+DQo8cHJlPg0KJmx0O2F1ZGlvIGNvbnRyb2xzJmd0Ow0KICAmbHQ7c291cmNlIHNyYz0iY29udGVudC9zb3VuZHMvY29uc3RhbnRzcGVjdHJ1bW1lbG9keS5vZ2ciIHR5cGU9ImF1ZGlvL29nZyImZ3Q7DQogIFN1IG5hdmVnYWRvciBubyBzb3BvcnRhIGVsIGNvbXBvbmVudGUgZGUgYXVkaW8NCiZsdDsvYXVkaW8mZ3Q7DQo8L3ByZT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRWwgY8OzZGlnbyBhbnRlcmlvciBzZSB2ZXLDrWEgYXPDrToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGF1ZGlvIGNvbnRyb2xzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIHNyYz0iY29udGVudC9zb3VuZHMvY29uc3RhbnRzcGVjdHJ1bW1lbG9keS5vZ2ciIHR5cGU9ImF1ZGlvL29nZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN1IG5hdmVnYWRvciBubyBzb3BvcnRhIGVsIGNvbXBvbmVudGUgZGUgYXVkaW8NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2F1ZGlvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imluc3RydWN0aW9uIiB0eXBlPSJpbmZvIj5BdWRpbyA8YSBocmVmPSJodHRwczovL2NvbW1vbnMud2lraW1lZGlhLm9yZy93aWtpL0ZpbGU6Q29uc3RhbnRTcGVjdHJ1bU1lbG9keS5vZ2ciIHRhcmdldD0iX2JsYW5rIj5Db25zdGFudFNwZWN0cnVtTWVsb2R5PC9hPiwgdG9tYWRvIGRlIFdpa2ltZWRpYSBjb21tb25zLiBCeSBGYWJyaWNlLk5leXJldC48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+VmlkZW9zPC9oMz4NCg0KICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgIExvcyB2aWRlb3MgdmFuIGVuIGxhIGNhcnBldGEgPHN0cm9uZz5jb250ZW50L3ZpZGVvcy88L3N0cm9uZz4uUGFyYSBsb2dyYXIgdW5hIGNvbXBhdGliaWxpZGFkIGNvbXBsZXRhLCBlbCB2aWRlbyBkZWJlIGVzdGFyIGVuIG1wNCB5IHdlYm0uIExvcyB2aWRlb3MgZGViZW4gaXIgZW4gdW4gY29udGVuZWRvciwgcG9yIGVqZW1wbG8gdW4gPGVtPmRpdjwvZW0+LCBjb24gbGEgY2xhc2UgPGVtPnZpZGVvYm94PC9lbT4uDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBIYXkgZG9zIG1hbmVyYXMgZGUgcmVwcm9kdWNpciBsb3MgdmlkZW9zLCBjb24gZWwgcmVwcm9kdWN0b3IgZGVsIG5hdmVnYWRvciAocmVjb21lbmRhZG8pIG8gY29uIHVuIHJlcHJvZHVjdG9yIGV4dGVybm8gPGEgaHJlZj0iaHR0cDovL3d3dy5tZWRpYWVsZW1lbnRqcy5jb20vIiB0YXJnZXQ9Il9ibGFuayI+TWVkaWFFbGVtZW50LmpzPC9hPi4gRWwgcmVwcm9kdWN0b3IgZXh0ZXJubyBlcyByZWNvbWVuZGFkbyBlbiBsb3MgY2Fzb3MgZW4gbG9zIHF1ZSBzZSBuZWNlc2l0ZSBpbmNsdWlyIHN1YnTDrXR1bG9zIHlhIHF1ZSBzdSBjb21wYXRpYmlsaWRhZCBlcyBtYXlvciBlbiBsb3MgZGlmZXJlbnRlcyBuYXZlZ2Fkb3Jlcy4gTGEgZm9ybWEgZGUgbW9udGFyIGxvcyB2aWRlb3MgZXMgbGEgbWlzbWEgeSBwb3IgZGVmZWN0byBzZSB1dGlsaXphIGVsIHJlcHJvZHVjdG9yIGRlbCBuYXZlZ2Fkb3IsIHBhcmEgaW5kaWNhciBxdWUgc2UgdXRpbGljZSBlbCByZXByb2R1Y3RvciBleHRlcm5vIHNlIGRlYmUgYWRpY2lvbmFsIGEgbGEgZXRpcXVldGEgPGVtPnZpZGVvPC9lbT4gbGEgY2xhc2UgPGVtPm1lanNfX3BsYXllcjwvZW0+Lg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgU2kgZWwgdmlkZW8gbGxldmEgc3VidMOtdHVsb3MsIHNlIHJlY29taWVuZGEgcXVlIGVzdMOpbiBpbmNsdWlkb3MgZW4gZWwgYXRyaWJ1dG8gPGVtPnNyYzwvZW0+IGNvbW8gdGV4dG8gZW4gYmFzZTY0LCBwYXJhIHF1ZSBubyBoYXlhIHByb2JsZW1hIHNpIGVsIG9iamV0byBzZSByZXByb2R1Y2UgbG9jYWxtZW50ZS4gRWwgZm9ybWF0byByZWNvbWVuZGFkbyBkZSBsb3Mgc3VidMOtdHVsb3MgZXMgPHN0cm9uZz52dHQ8L3N0cm9uZz4geSBzZSBhY29uc2VqYSBtYW50ZW5lciBlbCBhcmNoaXZvIDxzdHJvbmc+LnZ0dDwvc3Ryb25nPiBlbiBsYSBtaXNtYSBjYXJwZXRhIHF1ZSBsb3MgdmlkZW9zIGF1bnF1ZSBzZSBpbmNsdXlhIGNvbW8gdGV4dG8gZW4gYmFzZTY0Lg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveC10ZXh0IGV4YW1wbGUiIGxhYmVsPSJFamVtcGxvIGRlIHZpZGVvIHV0aWxpemFuZG8gZWwgcmVwcm9kdWN0b3IgZGVsIG5hdmVnYWRvciI+DQo8cHJlPg0KJmx0O2RpdiBjbGFzcz0idmlkZW9ib3giJmd0Ow0KICAmbHQ7dmlkZW8gY29udHJvbHMmZ3Q7DQogICAgJmx0O3NvdXJjZSBzcmM9ImNvbnRlbnQvdmlkZW9zL2V0YV9wb3JrZXRvLm1wNCIgdHlwZT0idmlkZW8vbXA0IiZndDsNCiAgICAmbHQ7c291cmNlIHNyYz0iY29udGVudC92aWRlb3MvZXRhX3BvcmtldG8ud2VibSIgdHlwZT0idmlkZW8vd2VibSImZ3Q7DQogICAgJmx0O3RyYWNrIGxhYmVsPSJFc3Bhw7FvbCIga2luZD0ic3VidGl0bGVzIiBzcmNsYW5nPSJlcyINCiAgICBzcmM9ImRhdGE6dGV4dC92dHQ7YmFzZTY0LFYwVkNWbFJVRFFvTkNqRU5DakF3T2pBd09qQXdMakl6TkNBdExUNGdNREENCiAgICA2TURBNk1EUXVNREF3RFFwRmMzUmxJSEIxWlhKeGRXbDBieUJ6WlNCbWRXVWdZV3d1TGk0TkNnMEtNZzBLTURBNk1EQTYNCiAgICBNRFF1TURBMElDMHRQaUF3TURvd01Eb3hNQzR3TURBTkNpNHVMaUJoWThPaElHUmxZbVZ5dzYxaElHRndZWEpsWTJWeUkNCiAgICBHeGhJSFJ5WVdSMVkyTnB3N051TEEwS1lTQnRZVzVsY21FZ1pHVWdjM1ZpZE1PdGRIVnNiM011RFFvTkNqTU5DakF3T2oNCiAgICBBd09qRXdMakF3TWlBdExUNGdNREE2TURBNk1qWXVNREF3RFFvdUxpNGdiR0VnY0c5dVpITERyV0VnYzJrZ2MzVndhV1YNCiAgICB5WVNCeGRXVWdaR2xqWlNBNkp5Z05DaWh6ZFhCMVpYTjBZVzFsYm5SbElHVnpJR1Z6Y0dWeVlXNTBieTR1TGlEQ29jS2gNCiAgICBibWtnYVdSbFlTRWhLUTBLIiBkZWZhdWx0Jmd0Ow0KICAgIEVsIHJlcHJvZHVjdG9yIGRlIHZpZGVvIG5vIGVzIHNvcG9ydGFkbyBwb3IgZWwgbmF2ZWdhZG9yDQogICZsdDsvdmlkZW8mZ3Q7DQombHQ7L2RpdiZndDsNCjwvcHJlPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbCBjw7NkaWdvIGFudGVyaW9yIHNlIHZlcsOtYSBhc8OtOg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idmlkZW9ib3giPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2aWRlbyBjb250cm9scz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBzcmM9ImNvbnRlbnQvdmlkZW9zL2V0YV9wb3JrZXRvLm1wNCIgdHlwZT0idmlkZW8vbXA0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBzcmM9ImNvbnRlbnQvdmlkZW9zL2V0YV9wb3JrZXRvLndlYm0iIHR5cGU9InZpZGVvL3dlYm0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbCByZXByb2R1Y3RvciBkZSB2aWRlbyBubyBlcyBzb3BvcnRhZG8gcG9yIGVsIG5hdmVnYWRvcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHJhY2sgbGFiZWw9IkVzcGHDsW9sIiBraW5kPSJzdWJ0aXRsZXMiIHNyY2xhbmc9ImVzIiBzcmM9ImRhdGE6dGV4dC92dHQ7YmFzZTY0LFYwVkNWbFJVRFFvTkNqRU5DakF3T2pBd09qQXdMakl6TkNBdExUNGdNREE2TURBNk1EUXVNREF3RFFwRmMzUmxJSEIxWlhKeGRXbDBieUJ6WlNCbWRXVWdZV3d1TGk0TkNnMEtNZzBLTURBNk1EQTZNRFF1TURBMElDMHRQaUF3TURvd01Eb3hNQzR3TURBTkNpNHVMaUJoWThPaElHUmxZbVZ5dzYxaElHRndZWEpsWTJWeUlHeGhJSFJ5WVdSMVkyTnB3N051TEEwS1lTQnRZVzVsY21FZ1pHVWdjM1ZpZE1PdGRIVnNiM011RFFvTkNqTU5DakF3T2pBd09qRXdMakF3TWlBdExUNGdNREE2TURBNk1qWXVNREF3RFFvdUxpNGdiR0VnY0c5dVpITERyV0VnYzJrZ2MzVndhV1Z5WVNCeGRXVWdaR2xqWlNBNkp5Z05DaWh6ZFhCMVpYTjBZVzFsYm5SbElHVnpJR1Z6Y0dWeVlXNTBieTR1TGlEQ29jS2hibWtnYVdSbFlTRWhLUTBLIiBkZWZhdWx0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdmlkZW8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imluc3RydWN0aW9uIiB0eXBlPSJpbmZvIj5WaWRlbyA8YSBocmVmPSJodHRwczovL2NvbW1vbnMud2lraW1lZGlhLm9yZy93aWtpL0ZpbGU6RXRhX3BvcmtldG8ud2VibSIgdGFyZ2V0PSJfYmxhbmsiPkV0YSBwb3JrZXRvPC9hPiwgdG9tYWRvIGRlIFdpa2ltZWRpYSBjb21tb25zLiBCeSBNYXJpb24gQsOpbGlzbGUuPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFcyBwcm9iYWJsZSBxdWUgZW4gYWxndW5vcyBuYXZlZ2Fkb3JlcyBubyBzZSB2ZWFuIGxvcyBzdWJ0w610dWxvcyBzaSBlbCBkb2N1bWVudG8gc2UgZXN0w6EgdmlzdWFsaXphbmRvIGxvY2FsbWVudGUuDQogICAgICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveC10ZXh0IGV4YW1wbGUiIGxhYmVsPSJFamVtcGxvIGRlIHZpZGVvIHV0aWxpemFuZG8gZWwgcmVwcm9kdWN0b3IgZXh0ZXJubyI+DQo8cHJlPg0KJmx0O2RpdiBjbGFzcz0idmlkZW9ib3giJmd0Ow0KICAmbHQ7dmlkZW8gY29udHJvbHMgY2xhc3M9Im1lanNfX3BsYXllciImZ3Q7DQogICAgJmx0O3NvdXJjZSBzcmM9ImNvbnRlbnQvdmlkZW9zL2V0YV9wb3JrZXRvLm1wNCIgdHlwZT0idmlkZW8vbXA0IiZndDsNCiAgICAmbHQ7c291cmNlIHNyYz0iY29udGVudC92aWRlb3MvZXRhX3BvcmtldG8ud2VibSIgdHlwZT0idmlkZW8vd2VibSImZ3Q7DQogICAgJmx0O3RyYWNrIGxhYmVsPSJFc3Bhw7FvbCIga2luZD0ic3VidGl0bGVzIiBzcmNsYW5nPSJlcyINCiAgICBzcmM9ImRhdGE6dGV4dC92dHQ7YmFzZTY0LFYwVkNWbFJVRFFvTkNqRU5DakF3T2pBd09qQXdMakl6TkNBdExUNGdNREENCiAgICA2TURBNk1EUXVNREF3RFFwRmMzUmxJSEIxWlhKeGRXbDBieUJ6WlNCbWRXVWdZV3d1TGk0TkNnMEtNZzBLTURBNk1EQTYNCiAgICBNRFF1TURBMElDMHRQaUF3TURvd01Eb3hNQzR3TURBTkNpNHVMaUJoWThPaElHUmxZbVZ5dzYxaElHRndZWEpsWTJWeUkNCiAgICBHeGhJSFJ5WVdSMVkyTnB3N051TEEwS1lTQnRZVzVsY21FZ1pHVWdjM1ZpZE1PdGRIVnNiM011RFFvTkNqTU5DakF3T2oNCiAgICBBd09qRXdMakF3TWlBdExUNGdNREE2TURBNk1qWXVNREF3RFFvdUxpNGdiR0VnY0c5dVpITERyV0VnYzJrZ2MzVndhV1YNCiAgICB5WVNCeGRXVWdaR2xqWlNBNkp5Z05DaWh6ZFhCMVpYTjBZVzFsYm5SbElHVnpJR1Z6Y0dWeVlXNTBieTR1TGlEQ29jS2gNCiAgICBibWtnYVdSbFlTRWhLUTBLIiBkZWZhdWx0Jmd0Ow0KICAgIEVsIHJlcHJvZHVjdG9yIGRlIHZpZGVvIG5vIGVzIHNvcG9ydGFkbyBwb3IgZWwgbmF2ZWdhZG9yDQogICZsdDsvdmlkZW8mZ3Q7DQombHQ7L2RpdiZndDsNCjwvcHJlPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbCBjw7NkaWdvIGFudGVyaW9yIHNlIHZlcsOtYSBhc8OtOg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idmlkZW9ib3giPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2aWRlbyBjb250cm9scyBleHRlcm5hbHBsYXllciBjbGFzcz0ibWVqc19fcGxheWVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBzcmM9ImNvbnRlbnQvdmlkZW9zL2V0YV9wb3JrZXRvLm1wNCIgdHlwZT0idmlkZW8vbXA0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBzcmM9ImNvbnRlbnQvdmlkZW9zL2V0YV9wb3JrZXRvLndlYm0iIHR5cGU9InZpZGVvL3dlYm0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHJhY2sgbGFiZWw9IkVzcGHDsW9sIiBraW5kPSJzdWJ0aXRsZXMiIHNyY2xhbmc9ImVzIiBzcmM9ImRhdGE6dGV4dC92dHQ7YmFzZTY0LFYwVkNWbFJVRFFvTkNqRU5DakF3T2pBd09qQXdMakl6TkNBdExUNGdNREE2TURBNk1EUXVNREF3RFFwRmMzUmxJSEIxWlhKeGRXbDBieUJ6WlNCbWRXVWdZV3d1TGk0TkNnMEtNZzBLTURBNk1EQTZNRFF1TURBMElDMHRQaUF3TURvd01Eb3hNQzR3TURBTkNpNHVMaUJoWThPaElHUmxZbVZ5dzYxaElHRndZWEpsWTJWeUlHeGhJSFJ5WVdSMVkyTnB3N051TEEwS1lTQnRZVzVsY21FZ1pHVWdjM1ZpZE1PdGRIVnNiM011RFFvTkNqTU5DakF3T2pBd09qRXdMakF3TWlBdExUNGdNREE2TURBNk1qWXVNREF3RFFvdUxpNGdiR0VnY0c5dVpITERyV0VnYzJrZ2MzVndhV1Z5WVNCeGRXVWdaR2xqWlNBNkp5Z05DaWh6ZFhCMVpYTjBZVzFsYm5SbElHVnpJR1Z6Y0dWeVlXNTBieTR1TGlEQ29jS2hibWtnYVdSbFlTRWhLUTBLIiBkZWZhdWx0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbCByZXByb2R1Y3RvciBkZSB2aWRlbyBubyBlcyBzb3BvcnRhZG8gcG9yIGVsIG5hdmVnYWRvcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdmlkZW8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imluc3RydWN0aW9uIiB0eXBlPSJpbmZvIj5WaWRlbyA8YSBocmVmPSJodHRwczovL2NvbW1vbnMud2lraW1lZGlhLm9yZy93aWtpL0ZpbGU6RXRhX3BvcmtldG8ud2VibSIgdGFyZ2V0PSJfYmxhbmsiPkV0YSBwb3JrZXRvPC9hPiwgdG9tYWRvIGRlIFdpa2ltZWRpYSBjb21tb25zLiBCeSBNYXJpb24gQsOpbGlzbGUuPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveC10ZXh0IG5vdGUiIGxhYmVsPSJUaXA6IHBpZW5zZSBlbiBlbCBhbmNoby9hbHRvIGRlbCB2aWRlbyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8cD5VdGlsaWNlIG1lZGlkYXMgcG9yY2VudHVhbGVzIHBhcmEgdmlkZW9zIGFuY2hvcyBjb24gZWwgZmluIGRlIHF1ZSBzZSBhanVzdGVuIGFsIGFuY2hvIGRlIGxhIHBhbnRhbGxhIG8gZGVsIGNvbnRlbmVkb3IuIFBvciBlamVtcGxvOiA8c3Ryb25nPiB3aWR0aD0iMTAwJSI8L3N0cm9uZz4gZGlyZWN0YW1lbnRlIGVuIGxhIGV0aXF1ZXRhIDxlbT52aWRlbzwvZW0+LCBvIHBvciBDU1M6IDxzdHJvbmc+IHdpZHRoOiAxMDAlOzwvc3Ryb25nPi4gRXMgZXNwZWNpYWxtZW50ZSDDunRpbCBwYXJhIHF1ZSBlbCB2aWRlbyBzZSBhanVzdGUgZW4gZGlzcG9zaXRpdm9zIGNvbiBwYW50YWxsYXMgcGVxdWXDsWFzIGNvbW8gY2VsdWxhcmVzLjwvcD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPkFuaW1hY2lvbmVzPC9oMz4NCg0KICAgICAgICAgICAgICAgICAgICA8cD5MYXMgaW3DoWdlbmVzIHF1ZSBzZWFuIGFuaW1hZGFzIGRlYmVuIGxsZXZhciBsYSBjbGFzZSBDU1MgPGVtPmFuaW1hdGlvbjwvZW0+LiBQb3IgYWNjZXNpYmlsaWRhZCwgdG9kYSBpbcOhZ2VuIGRlYmUgdGVuZXIgZWwgYXRyaWJ1dG8gPGVtPnRpdGxlPC9lbT4gY29uIHVuYSBicmV2ZSBkZXNjcmlwY2nDs24gZGUgbGEgaW1hZ2VuLjwvcD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3gtdGV4dCBleGFtcGxlIiBsYWJlbD0iRWplbXBsbyBkZSBhbmltYWNpw7NuIj4NCjxwcmU+DQombHQ7aW1nIHNyYz0iY29udGVudC9jaW5lbWFncmFwaC5leHBlcnQuZ2lmIg0KICBjbGFzcz0iYW5pbWF0aW9uIg0KICB0aXRsZT0iQW5pbWFjacOzbiBDaW5lbWFncmFwaC5leHBlcnQiIC8mZ3Q7DQo8L3ByZT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRWwgY8OzZGlnbyBhbnRlcmlvciBzZSB2ZXLDrWEgYXPDrToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iY29udGVudC9jaW5lbWFncmFwaC5leHBlcnQuZ2lmIiBjbGFzcz0iYW5pbWF0aW9uIiB0aXRsZT0iQW5pbWFjacOzbiBDaW5lbWFncmFwaC5leHBlcnQiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5zdHJ1Y3Rpb24iIHR5cGU9ImluZm8iPkFuaW1hY2nDs24gPGEgaHJlZj0iaHR0cHM6Ly9jb21tb25zLndpa2ltZWRpYS5vcmcvd2lraS9GaWxlOkNpbmVtYWdyYXBoLmV4cGVydC5naWYiIHRhcmdldD0iX2JsYW5rIj5DaW5lbWFncmFwaC5leHBlcnQ8L2E+LCB0b21hZG8gZGUgV2lraW1lZGlhIGNvbW1vbnMuIEJ5IENpbmVtYWdyYXBoLmV4cGVydC48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgPHA+TGFzIGltw6FnZW5lcyBxdWUgc2VhbiBhbmltYWRhcyBwZXJvIHF1ZSBkZWJhbiBpbmljaWFyIHBvciBsYSBhY2Npw7NuIGRlbCB1c3VhcmlvIGRlYmVuIHRlbmVyIG90cmEgaW1hZ2VuIChjb250cm9sYWRvcikgcGFyYSBkZWZpbmlyIGVsIGluaWNpby4gRWwgY29udHJvbGFkb3IgZGViZSBsbGV2YXIgbGEgY2xhc2UgQ1NTIDxlbT5wbGF5LWFuaW1hdGlvbjwvZW0+IHkgdW4gYXRyaWJ1dG8gPGVtPmRhdGEtYW5pbWF0aW9uPC9lbT4gY29uIGxhIHJ1dGEgZGUgbGEgYW5pbWFjacOzbi48L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94LXRleHQgZXhhbXBsZSIgbGFiZWw9IkVqZW1wbG8gZGUgYW5pbWFjacOzbiBjb250cm9sYWRhIj4NCjxwcmU+DQombHQ7aW1nIHNyYz0iY29udGVudC9wcmV2X2NpbmVtYWdyYXBoLmV4cGVydC5wbmciDQogIGNsYXNzPSJwbGF5LWFuaW1hdGlvbiINCiAgdGl0bGU9IkFuaW1hY2nDs24gQ2luZW1hZ3JhcGguZXhwZXJ0Ig0KICBkYXRhLWFuaW1hdGlvbj0iY29udGVudC9jaW5lbWFncmFwaC5leHBlcnQuZ2lmIiAvJmd0Ow0KPC9wcmU+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVsIGPDs2RpZ28gYW50ZXJpb3Igc2UgdmVyw61hIGFzw606DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9ImNvbnRlbnQvcHJldl9jaW5lbWFncmFwaC5leHBlcnQucG5nIiBjbGFzcz0icGxheS1hbmltYXRpb24iIHRpdGxlPSJBbmltYWNpw7NuIENpbmVtYWdyYXBoLmV4cGVydCIgZGF0YS1hbmltYXRpb249ImNvbnRlbnQvY2luZW1hZ3JhcGguZXhwZXJ0LmdpZiIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnN0cnVjdGlvbiIgdHlwZT0iaW5mbyI+QW5pbWFjacOzbiA8YSBocmVmPSJodHRwczovL2NvbW1vbnMud2lraW1lZGlhLm9yZy93aWtpL0ZpbGU6Q2luZW1hZ3JhcGguZXhwZXJ0LmdpZiIgdGFyZ2V0PSJfYmxhbmsiPkNpbmVtYWdyYXBoLmV4cGVydDwvYT4sIHRvbWFkbyBkZSBXaWtpbWVkaWEgY29tbW9ucy4gQnkgQ2luZW1hZ3JhcGguZXhwZXJ0LjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3gtdGV4dCBub3RlIiBsYWJlbD0iVGlwOiBhbGluZWFyIGFuaW1hY2lvbmVzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwPkxhcyBhbmltYWNpb25lcyBzb24gcm9kZWFkYXMgYXV0b23DoXRpY2FtZW50ZSBwb3IgdW4gY29udGVuZWRvciBjb24gbGEgY2xhc2UgQ1NTIDxlbT5hbmltYXRpb25faW1hZ2U8L2VtPiBwb3IgbG8gcXVlIGxhIGFsaW5lYWNpw7NuIHNlIHB1ZWRlIGRlZmluaXIgZW4gZXNhIGNsYXNlLiBMb3MgZWplbXBsb3MgYXJyaWJhIGVzdMOhbiBjZW50cmFkb3IgZGlyZWN0YW1lbnRlIHV0aWxpemFuZG8gZGljaGEgY2xhc2UuPC9wPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiIGlkPSJwYWctbWVkaWEtYW5pbWF0aW9uMSI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5Qcm9ncmFtYWNpw7NuIGRlIGFuaW1hY2lvbmVzPC9oMz4NCg0KICAgICAgICAgICAgICAgICAgICA8cD5QYXJhIGFuaW1hciBIVE1MLCBpbmNsdWlkbywgcGVybyBubyBsaW1pdGFkbyBhLCBpbcOhZ2VuZXMuIExhcyBhbmltYWNpb25lcyBzZSBkZWZpbmVuIGVuIGRvcyBwYXJ0ZXM6IGVuIGVsIGNvbnRlbmlkbyAoPHN0cm9uZz5jb250ZW50Lmh0bWw8L3N0cm9uZz4pIHkgZW4gZWwgYXJjaGl2byBkZSA8Y2l0ZT5oaXN0b3JpYXM8L2NpdGU+ICg8c3Ryb25nPmpzL3N0b3JpZXMuanM8L3N0cm9uZz4pLjwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPkVuIGVsIGNvbnRlbmlkbzwvc3Ryb25nPjogbGFzIGFuaW1hY2lvbmVzIHNlIGRlZmluZW4gY29tbyBjYXBhcyBIVE1MIHF1ZSBzZSB2YW4gZGVzcGxlZ2FuZG8gdW5hIGEgdW5hIHNlZ8O6biBsb3MgY29tcG9ydGFtaWVudG9zIHF1ZSBzZSBsZXMgZGVmaW5hbi4gVW5hIGFuaW1hY2nDs24gcGFydGUgZGUgdW4gY29udGVuZWRvciBjb24gbGEgY2xhc2UgQ1NTIDxlbT5tb3ZpPC9lbT4geSBlbiBzdSBpbnRlcmlvciBvdHJhcyBjYXBhcywgbm9ybWFsbWVudGUgbGEgZXRpcXVldGEgPGVtPmRpdjwvZW0+LCBjb24gZWwgYXRyaWJ1dG8gPGVtPmRhdGEtbW92aS10eXBlPC9lbT4gcXVlIHB1ZWRlIHRlbmVyIGxvcyB2YWxvcmVzOg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPm1vdmU8L3N0cm9uZz46IHNpIGxhIGFuaW1hY2nDs24gc2UgZGVmaW5lIGNvbW8gdW4gZGVzcGxhemFtaWVudG88L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxzdHJvbmc+c3RvcDwvc3Ryb25nPjogcGFyYSBkZXRlbmVyIGxhcyBhbmltYWNpb25lcyBlbiBlc2UgcHVudG8sIG5vcm1hbG1lbnRlIHNpIGNvbnRpbnVhIGVzIG1lZGlhbnRlIHVuYSBhY2Npw7NuIHByb2dyYW1hZGE8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxzdHJvbmc+c2hvdzwvc3Ryb25nPjogbGEgYW5pbWFjacOzbiBtdWVzdHJhIGVsIGNvbnRlbmlkbyBjb24gZWwgZXZlbnRvIHBvciBkZWZlY3RvLCBub3JtYWxtZW50ZSBtZWRpYW50ZSBlZmVjdG8gImFsZmEiPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPmN5Y2xlPC9zdHJvbmc+OiBwYXJhIHJlcGV0aXIgbG9zIGV2ZW50b3MgdW4gbsO6bWVybyBkZSB2ZWNlczwvbGk+DQogICAgICAgICAgICAgICAgICAgIDwvdWw+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW92aSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb3ZpXzEiIGRhdGEtbW92aS10eXBlPSJzdG9wIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb3ZpXzIiIGRhdGEtbW92aS10eXBlPSJtb3ZlIiBkYXRhLW1vdmktYmFzZT0iZXhhbXBsZV9tb3ZlcmlnaHQiIHN0eWxlPSJwb3NpdGlvbjogYWJzb2x1dGU7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imlvbi1hcnJvdy1yaWdodC1hIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vdmlfMyIgZGF0YS1tb3ZpLXR5cGU9InNob3ciIGRhdGEtZHVyYXRpb249IjEwMDAiIGRhdGEtZWZmZWN0PSJzaGFrZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb3ZpXzQiIGRhdGEtbW92aS10eXBlPSJtb3ZlIiBkYXRhLW1vdmktYmFzZT0iZXhhbXBsZV9tb3ZlZG93biIgc3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTsiIGRhdGEtZXZlbnQtb24tZW5kPSJzaG93X3Jlc3RhcnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpb24tYXJyb3ctZG93bi1hIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iZ2VuZXJhbCBidG5fZXhhbXBsZV9yZXN0YXJ0IiBkYXRhLWV2ZW50LWFjdGlvbj0iZXhhbXBsZV9yZXN0YXJ0IiBkYXRhLWV2ZW50LWFjdGlvbi1zZWxlY3Rvcj0iI3BhZy1tZWRpYS1hbmltYXRpb24xIC5tb3ZpXzEiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+UmVpbmljaWFyPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJnZW5lcmFsIGJ0bl9leGFtcGxlX3N0YXJ0IiBkYXRhLW1vdmktcGxheT0iZXhhbXBsZV9tb3ZlcmlnaHQiPkVqZWN1dGFyIGFuaW1hY2nDs248L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSIgaWQ9InBhZy1tZWRpYS1hbmltYXRpb24zIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPlByb2dyYW1hY2nDs24gZGUgYW5pbWFjaW9uZXMgbWVkaWFudGUgQ1NTPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBMYXMgYW5pbWFjaW9uZXMgbWVkaWFudGUgQ1NTIHV0aWxpemFuIGxvcyBlZmVjdG9zIHF1ZSBzZSBhc29jaWFuIGEgbG9zIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vY3NzcmVmL2NzczNfcHJfYW5pbWF0aW9uLWtleWZyYW1lcy5hc3AiIHRhcmdldD0iX2JsYW5rIj5rZXlmcmFtZXM8L2E+IGRlIENTUy4gU2UgZGViZSBhZ3JlZ2FyIGxhIGNsYXNlIDxlbT5jc3MtYW5pbWF0aW9uPC9lbT4gYWwgY29udGVuZWRvciBkZSBsYSBhbmltYWNpw7NuIHkgbGEgZGVmaW5pY2nDs24gZGVsIGNvbXBvcnRhbWllbnRvIGRlIGxhIGFuaW1hY2nDs24gc2UgZGViZSBzZWFsaXphciBlbiBsb3MgYXJjaGl2b3MgZGUgZXN0aWxvcyBwZXJzb25hbGl6YWRvczogPHN0cm9uZz5jc3MvY3VzdG9tLmNzczwvc3Ryb25nPiB5IDxzdHJvbmc+Y3NzL2N1c3RvbW1vYmlsZS5jc3M8L3N0cm9uZz4uDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3NzLWFuaW1hdGlvbiBidXR0b24gc3RhdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXVzaWNhbC1ub3RlIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im11c2ljYWwtbm90ZS1uYW1lIG1pIj5taTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXVzaWNhbC1ub3RlLW5hbWUgc29sIj5zb2w8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im11c2ljYWwtbm90ZS1uYW1lIHNpIj5zaTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXVzaWNhbC1ub3RlLW5hbWUgcmUiPnJlPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdXNpY2FsLW5vdGUtbmFtZSBmYSI+ZmE8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im11c2ljYWwtbm90ZS1uYW1lIGZhLWRvd24iPmZhPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdXNpY2FsLW5vdGUtbmFtZSBsYSI+bGE8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im11c2ljYWwtbm90ZS1uYW1lIGRvIj5kbzwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXVzaWNhbC1ub3RlLW5hbWUgbWktdXAiPm1pPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnN0cnVjdGlvbiI+SGFnYSBjbGljIHNvYnJlIGxhIGFuaW1hY2nDs24gcGFyYSByZWluaWNpYXJsYTwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5ab29tIGVuIGltw6FnZW5lczwvaDM+DQoNCiAgICAgICAgICAgICAgICAgICAgPHA+UGFyYSBwZXJtaXRpciBoYWNlciB6b29tIHNvYnJlIGltw6FnZW5lcyBkZSBtYW5lcmEgaW50ZXJhY3RpdmEsIHBvciBlamVtcGxvIGVuIG1hcGFzIGNvbmNlcHR1YWxlcywgYWdyZWdhciBhIGxhIGltYWdlbiBsYSBjbGFzZSA8ZW0+cGl0LXJlc291cmNlcy16b29tPC9lbT4uIFNlIHB1ZWRlIG1hbmlwdWxhciBlbCBhbGNhbmNlIGRlbCB6b29tIGNvbiBlbCBhdHJpYnV0byA8ZW0+ZGF0YS1tYWduaWZpY2F0aW9uPC9lbT4gKHVuIGVudGVybykgeSBlbCB0YW1hw7FvIGRlIGxhICJsdXBhIiBjb24gZWwgYXRyaWJ1dG8gPGVtPmRhdGEtbWFnbmlmaWVyLXNpemU8L2VtPi48L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94LXRleHQgZXhhbXBsZSIgbGFiZWw9Ilpvb20gZW4gdW5hIGltYWdlbiI+DQo8cHJlPg0KJmx0O2ltZyBzcmM9ImNvbnRlbnQvcGFnaW5hLmpwZyINCiBjbGFzcz0ianBpdC1yZXNvdXJjZXMtem9vbSINCiBzdHlsZT0id2lkdGg6IDIwMHB4OyINCiBkYXRhLW1hZ25pZmljYXRpb249IjMiDQogZGF0YS1tYWduaWZpZXItc2l6ZT0iMjAwIiAvJmd0Ow0KPC9wcmU+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVsIGPDs2RpZ28gYW50ZXJpb3Igc2UgdmVyw61hIGFzw606DQogICAgICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iY29udGVudC9wYWdpbmEuanBnIiBjbGFzcz0ianBpdC1yZXNvdXJjZXMtem9vbSIgc3R5bGU9IndpZHRoOiAyMDBweDsiIGRhdGEtbWFnbmlmaWNhdGlvbj0iMyIgZGF0YS1tYWduaWZpZXItc2l6ZT0iMjAwIiAvPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+QW50ZXMgeSBkZXNwdcOpczwvaDM+DQoNCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBTaXJ2ZSBwYXJhIGNvbXBhcmFyIGRvcyBpbcOhZ2VuZXMgbyBoYWNlciB1biBhbnRlcyB5IGRlc3B1w6lzLiBTZSBjb25zdHJ1eWUgdWJpY2FuZG8gZG9zIGltw6FnZW5lcyBkZW50cm8gZGUgdW4gY29udGVuZWRvciBjb24gbGEgY2xhc2UgPGVtPmFmdGVyLWJlZm9yZTwvZW0+Lg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImFib3V0Ij5Fc3RlIGNvbXBvbmVudGUgZXN0w6EgYmFzYWRvIGVuIDxhIGhyZWY9Imh0dHA6Ly96dXJiLmNvbS9wbGF5Z3JvdW5kL3R3ZW50eXR3ZW50eSIgdGFyZ2V0PSJfYmxhbmsiPmh0dHA6Ly96dXJiLmNvbS9wbGF5Z3JvdW5kL3R3ZW50eXR3ZW50eTwvYT4uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94LXRleHQgZXhhbXBsZSIgbGFiZWw9IkVqZW1wbG8gY29tcGFyYW5kbyBkb3MgaW3DoWdlbmVzIj4NCjxwcmU+DQombHQ7ZGl2IGNsYXNzPSJhZnRlci1iZWZvcmUiJmd0Ow0KICAgICZsdDtpbWcgc3JjPSJjb250ZW50L3BhZ2luYV8yLmpwZyIgLyZndDsNCiAgICAmbHQ7aW1nIHNyYz0iY29udGVudC9wYWdpbmEuanBnIiAvJmd0Ow0KJmx0Oy9kaXYmZ3Q7DQo8L3ByZT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRWwgY8OzZGlnbyBhbnRlcmlvciBzZSB2ZXLDrWEgYXPDrToNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFmdGVyLWJlZm9yZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9ImNvbnRlbnQvcGFnaW5hXzIuanBnIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJjb250ZW50L3BhZ2luYS5qcGciIC8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgPHA+VGFtYmnDqW4gc2UgcHVlZGUgdmVyIHZlcnRpY2FsLCBhZ3JlZ2FuZG8gZWwgYXRyaWJ1dG8gPGVtPmRhdGEtb3JpZW50YXRpb249InZlcnRpY2FsIjwvZW0+IHkgc2UgcHVlZGUgZGVmaW5pciBjdWFudG8gZGUgbGEgaW1hZ2VuICJBbnRlcyIgc2UgdmUgYWwgaW5pY2lhciwgcG9yIGRlZmVjdG8gc2UgbXVlc3RyYSBlbCA1MCUgKDAuNSkgcGVybyBzZSBwdWVkZSBjYW1iaWFyIGRlZmluaWVuZG8gZWwgYXRyaWJ1dG8gPGVtPmRhdGEtb2Zmc2V0PC9lbT4gY29uIHVuIHZhbG9yIGVudHJlIDAgeSAxLiBGaW5hbG1lbnRlLCBwYXJhIGRlZmluaXIgbG9zIHRleHRvcyBxdWUgdmFuIGVuIGFtYm9zIGxhZG9zICgiQW50ZXMiIHkgIkRlc3B1w6lzIiksIGRlYmUgYWdyZWdhcnNlIGxvcyBhdHJpYnV0b3M6IDxlbT5kYXRhLWJlZm9yZS1sYWJlbDwvZW0+IHkgPGVtPmRhdGEtYWZ0ZXItbGFiZWw8L2VtPi48L3A+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveC10ZXh0IGV4YW1wbGUiIGxhYmVsPSJFamVtcGxvIGNvbXBhcmFuZG8gdmVydGljYWxtZW50ZSI+DQo8cHJlPg0KJmx0O2RpdiBjbGFzcz0iYWZ0ZXItYmVmb3JlIiBkYXRhLW9yaWVudGF0aW9uPSJ2ZXJ0aWNhbCIgZGF0YS1vZmZzZXQ9IjAuMiINCiAgZGF0YS1iZWZvcmUtbGFiZWw9IkNvbiBmaWx0cm8iIGRhdGEtYWZ0ZXItbGFiZWw9Ik1lam9yYWRhIiZndDsNCiAgICAmbHQ7aW1nIHNyYz0iY29udGVudC9wYWdpbmFfMi5qcGciIC8mZ3Q7DQogICAgJmx0O2ltZyBzcmM9ImNvbnRlbnQvcGFnaW5hLmpwZyIgLyZndDsNCiZsdDsvZGl2Jmd0Ow0KPC9wcmU+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVsIGPDs2RpZ28gYW50ZXJpb3Igc2UgdmVyw61hIGFzw606DQogICAgICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwYWctbWVkaWEtYWZ0ZXJiZWZvcmUyIiBjbGFzcz0iYWZ0ZXItYmVmb3JlIiBkYXRhLW9yaWVudGF0aW9uPSJ2ZXJ0aWNhbCIgZGF0YS1vZmZzZXQ9IjAuMiIgZGF0YS1iZWZvcmUtbGFiZWw9IkNvbiBmaWx0cm8iIGRhdGEtYWZ0ZXItbGFiZWw9Ik1lam9yYWRhIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iY29udGVudC9wYWdpbmFfMi5qcGciIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9ImNvbnRlbnQvcGFnaW5hLmpwZyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvc2VjdGlvbj4NCg0KICAgICAgICAgICAgPCEtLUZvcm1hdG8gZGUgY29udGVuaWRvLS0+DQogICAgICAgICAgICA8c2VjdGlvbiBpZD0icGFnLWNvbnRlbmlkb2ludGVyYWN0aXZvIiBwdGl0bGU9IjMuIEZvcm1hdG9zIGRlIGNvbnRlbmlkbyI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5NZW7DuiB2ZXJ0aWNhbDwvaDM+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idmVydGljYWwtbWVudSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb25zaWRlcmFjaW9uZXMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PkFsZ3VuYXMgY29uc2lkZXJhY2lvbmVzPC9oNT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+U2UgdXRpbGl6YSBjdWFuZG8gaGF5IHVuYSBzZXJpZSBkZSBvcGNpb25lcyBxdWUgc2UgdmFuIGEgY29sb2NhciBlbiB1bmEgbWlzbWEgcMOhZ2luYSBwZXJvIGVsIHVzdWFyaW8gdmUgdW5hIHBvciB1bmEgYWNvcmRlIGEgdW4gbWVuw7ogZGUgdGV4dG8gYWwgbGFkbyBpenF1aWVyZG8gZGVsIGNvbnRlbmlkby48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkVuIGNhc28gZGUgcmVxdWVyaXIgY29sb2NhciB1biB0w610dWxvIGVuIGVsIGNvbnRlbmlkbyBkZSBjYWRhIGVsZW1lbnRvLCBzZSBhY29uc2VqYSBhZ3JlZ2FybG8gZW4gdW5hIGV0aXF1ZXRhIDxlbT5oNTwvZW0+Lg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5TZSBsZSBkZWJlIGRhciBtYW51YWxtZW50ZSBlbCBhbHRvIGFsIGNvbnRlbmlkbyB1dGlsaXphbmRvIENTUy48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFamVtcGxvDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkVsIGPDs2RpZ28gZGVsIGFjdHVhbCBlamVtcGxvIGVzOjwvcD4NCjxwcmU+DQombHQ7ZGl2IGNsYXNzPSJ2ZXJ0aWNhbC1tZW51IiZndDsNCiZsdDtkbCZndDsNCiAgICAmbHQ7ZHQmZ3Q7Q29uc2lkZXJhY2lvbmVzJmx0Oy9kdCZndDsNCiAgICAmbHQ7ZGQmZ3Q7DQogICAgICAgICZsdDtoNSZndDtDb25zaWRlcmFjaW9uZXMmbHQ7L2g1Jmd0Ow0KICAgICAgICAmbHQ7cCZndDtTZSBsZSBkZWJlIGRhciBtYW51YWxtZW50ZSBlbCBhbHRvIGVuIGNhc28gZGUgcXVlDQogICAgICAgIHNlYSBpbmZlcmlvciBhbCBkZSBsYXMgcGVzdGHDsWFzJmx0Oy9wJmd0Ow0KICAgICZsdDsvZGQmZ3Q7DQombHQ7L2RsJmd0Ow0KJmx0O2RsJmd0Ow0KICAgICZsdDtkdCZndDtFamVtcGxvJmx0Oy9kdCZndDsNCiAgICAmbHQ7ZGQmZ3Q7DQogICAgICAgICZsdDtwJmd0O0VsIGPDs2RpZ28gZGVsIGFjdHVhbCBlamVtcGxvIGVzOiZsdDsvcCZndDsNCiAgICAgICAgLi4uDQogICAgJmx0Oy9kZCZndDsNCiZsdDsvZGwmZ3Q7DQombHQ7L2RpdiZndDsNCjwvcHJlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2RsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1NTDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlBhcmEgY2FtYmlhciBlbCBhbmNobyBkZWwgYWN0dWFsIGVqZW1wbG8gc2UgdXRpbGl6YSBlbCBzaWd1aWVudGUgY8OzZGlnbyBDU1M8L3A+DQo8cHJlPg0KI2lkX3N1YnBhZ2luYSAudmVydGljYWwtbWVudSAuY2hhbGtib2FyZF92ZXJ0aWNhbF9jb250ZW50IHsNCiAgICBoZWlnaHQ6IDMzMHB4Ow0KfQ0KPC9wcmU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5NZW7DuiBob3Jpem9udGFsPC9oMz4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJob3Jpem9udGFsLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29uc2lkZXJhY2lvbmVzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5BbGd1bmFzIGNvbnNpZGVyYWNpb25lczwvaDU+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+U2UgdXRpbGl6YSBjdWFuZG8gaGF5IHVuYSBzZXJpZSBkZSBvcGNpb25lcyBxdWUgc2UgdmFuIGEgY29sb2NhciBlbiB1bmEgbWlzbWEgcMOhZ2luYSBwZXJvIGVsIHVzdWFyaW8gdmUgdW5hIHBvciB1bmEgYWNvcmRlIGEgdW4gbWVuw7ogZGUgdGV4dG8gZW4gbGEgcGFydGUgc3VwZXJpb3IgZGVsIGNvbnRlbmlkby48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkVuIGNhc28gZGUgcmVxdWVyaXIgY29sb2NhciB1biB0w610dWxvIGVuIGVsIGNvbnRlbmlkbyBkZSBjYWRhIGVsZW1lbnRvLCBzZSBhY29uc2VqYSBhZ3JlZ2FybG8gZW4gdW5hIGV0aXF1ZXRhIDxlbT5oNTwvZW0+Lg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5TZSBsZSBkZWJlIGRhciBtYW51YWxtZW50ZSBlbCBhbHRvIHV0aWxpemFuZG8gQ1NTLjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+RW4gbcOzdmlsLCBlbCBjb21wb3J0YW1pZW50byBkZWwgPHN0cm9uZz5NZW7DuiBob3Jpem9uYWw8L3N0cm9uZz4sIGN1YW5kbyB0aWVuZSBtw6FzIGRlIHRyZXMgcGVzdGHDsWFzLCBlcyBzaW1pbGFyIGFsIDxzdHJvbmc+TWVuw7ogdmVydGljYWw8L3N0cm9uZz4gc2ltcGxlLjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVqZW1wbG8NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZD4NCjxwcmU+DQombHQ7ZGl2IGNsYXNzPSJob3Jpem9udGFsLW1lbnUiJmd0Ow0KJmx0O2RsJmd0Ow0KICAgICZsdDtkdCZndDtDb25zaWRlcmFjaW9uZXMmbHQ7L2R0Jmd0Ow0KICAgICZsdDtkZCZndDsNCiAgICAgICAgJmx0O2g1Jmd0O0NvbnNpZGVyYWNpb25lcyZsdDsvaDUmZ3Q7DQogICAgICAgICZsdDtwJmd0O1NlIGxlIGRlYmUuLi4mbHQ7L3AmZ3Q7DQogICAgJmx0Oy9kZCZndDsNCiZsdDsvZGwmZ3Q7DQombHQ7ZGwmZ3Q7DQogICAgJmx0O2R0Jmd0O0VqZW1wbG8mbHQ7L2R0Jmd0Ow0KICAgICZsdDtkZCZndDsNCiAgICAgICAgJmx0O3AmZ3Q7RWwgY8OzZGlnbyBkZWwgYWN0dWFsIGVqZW1wbG8gZXM6Jmx0Oy9wJmd0Ow0KICAgICAgICAuLi4NCiAgICAmbHQ7L2RkJmd0Ow0KJmx0Oy9kbCZndDsNCiZsdDsvZGl2Jmd0Ow0KPC9wcmU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDU1MNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+UGFyYSBjYW1iaWFyIGVsIGFuY2hvIGRlbCBhY3R1YWwgZWplbXBsbyBzZSB1dGlsaXphIGVsIHNpZ3VpZW50ZSBjw7NkaWdvIENTUy48L3A+DQo8cHJlPg0KI2lkX3N1YnBhZ2luYSAuaG9yaXpvbnRhbC1tZW51IC5jaGFsa2JvYXJkX2NvbnRlbnQgew0KICAgIGhlaWdodDogMzAwcHg7DQp9DQo8L3ByZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kbD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+TWVuw7ogdmVydGljYWxlcyBhIGFtYm9zIGxhZG9zPC9oMz4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ2ZXJ0aWNhbC1tZW51LWJvdGgtc2lkZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxlZnQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb25zaWRlcmFjaW9uZXMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PkFsZ3VuYXMgY29uc2lkZXJhY2lvbmVzPC9oNT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlV0aWxpemFyIGxhIGNsYXNlIENTUyA8ZW0+dmVydGljYWwtbWVudS1ib3RoLXNpZGVzPC9lbT4uPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+U2UgdXRpbGl6YSBjdWFuZG8gaGF5IHVuYSBzZXJpZSBkZSBvcGNpb25lcyBxdWUgc2UgdmFuIGEgY29sb2NhciBlbiB1bmEgbWlzbWEgcMOhZ2luYSBwZXJvIGVsIHVzdWFyaW8gdmUgdW5hIHBvciB1bmEgYWNvcmRlIGEgdW4gbWVuw7ogZGUgdGV4dG8gYSBhbWJvcyBsYWRvcyBkZWwgY29udGVuaWRvLjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkVuIGNhc28gZGUgcmVxdWVyaXIgY29sb2NhciB1biB0w610dWxvIGVuIGVsIGNvbnRlbmlkbyBkZSBjYWRhIGVsZW1lbnRvLCBzZSBhY29uc2VqYSBhZ3JlZ2FybG8gZW4gdW5hIGV0aXF1ZXRhIDxlbT5oNTwvZW0+Lg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+U2UgbGUgZGViZSBkYXIgbWFudWFsbWVudGUgZWwgYWx0byB1dGlsaXphbmRvIENTUy48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5FbiBtw7N2aWwsIGVsIGNvbXBvcnRhbWllbnRvIGRlbCA8c3Ryb25nPk1lbsO6IHZlcnRpY2FsIGEgYW1ib3MgbGFkb3M8L3N0cm9uZz4gZXMgc2ltaWxhciBhbCA8c3Ryb25nPk1lbsO6IHZlcnRpY2FsPC9zdHJvbmc+IHNpbXBsZS48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGVmdD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxyaWdodD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVqZW1wbG8NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRkPg0KPHByZT4NCiZsdDtkaXYgY2xhc3M9InZlcnRpY2FsLW1lbnUtYm90aC1zaWRlcyImZ3Q7DQombHQ7bGVmdCZndDsNCiAgICAmbHQ7ZGwmZ3Q7DQogICAgICAgICZsdDtkdCZndDtDb25zaWRlcmFjaW9uZXMmbHQ7L2R0Jmd0Ow0KICAgICAgICAmbHQ7ZGQmZ3Q7DQogICAgICAgICAgICAmbHQ7aDUmZ3Q7Q29uc2lkZXJhY2lvbmVzJmx0Oy9oNSZndDsNCiAgICAgICAgICAgICZsdDtwJmd0Oy4uLiZsdDsvcCZndDsNCiAgICAgICAgJmx0Oy9kZCZndDsNCiAgICAmbHQ7L2RsJmd0Ow0KJmx0Oy9sZWZ0Jmd0Ow0KJmx0O3JpZ2h0Jmd0Ow0KICAgICZsdDtkbCZndDsNCiAgICAgICAgJmx0O2R0Jmd0O0VqZW1wbG8mbHQ7L2R0Jmd0Ow0KICAgICAgICAmbHQ7ZGQmZ3Q7DQogICAgICAgICAgICAmbHQ7cCZndDtFbCBjw7NkaWdvIGRlbCBhY3R1YWwgZWplbXBsbyBlczombHQ7L3AmZ3Q7DQogICAgICAgICAgICAuLi4NCiAgICAgICAgJmx0Oy9kZCZndDsNCiAgICAmbHQ7L2RsJmd0Ow0KJmx0Oy9yaWdodCZndDsNCiZsdDsvZGl2Jmd0Ow0KPC9wcmU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENTUw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QYXJhIGNhbWJpYXIgZWwgYW5jaG8geSBlbCBhbHRvIHNlIHV0aWxpemEgZWwgc2lndWllbnRlIGPDs2RpZ28gQ1NTLjwvcD4NCjxwcmU+DQojaWRfc3VicGFnZSAudmVydGljYWwtbWVudS1ib3RoLXNpZGVzIC5jaGFsa2JvYXJkX2NvbnRlbnQgew0KICAgIHdpZHRoOiA0OTBweDsNCiAgICBoZWlnaHQ6IDMwMHB4Ow0KfQ0KPC9wcmU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QYXJhIGNhbWJpYXIgbGFzIG3DoXJnZW5lcyBhIGxvcyBsYWRvcyBkZSBsYXMgcGVzdGHDsWFzIChtw6FzIG8gbWVub3MgY2VyY2EgYWwgY29udGVuaWRvKSBzZSB1dGlsaXphIGVsIHNpZ3VpZW50ZSBjw7NkaWdvIENTUzwvcD4NCjxwcmU+DQojaWRfc3VicGFnZSAudmVydGljYWwtbWVudS1ib3RoLXNpZGVzIC5jaGFsa2JvYXJkX2JvdGhfaXRlbXNfcmlnaHQgew0KICAgIG1hcmdpbi1sZWZ0OiAxMHB4Ow0KfQ0KDQojaWRfc3VicGFnZSAudmVydGljYWwtbWVudS1ib3RoLXNpZGVzIC5jaGFsa2JvYXJkX2JvdGhfaXRlbXNfbGVmdCB7DQogICAgbWFyZ2luLXJpZ2h0OiAxMHB4Ow0KfQ0KPC9wcmU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcmlnaHQ+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPlBhZ2luYWNpw7NuIHNlY3VlbmNpYWw8L2gzPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN0cmwtcGFnaW5hdGlvbiIgZGF0YS1sYXllci1oZWlnaHQ9IjIzMHB4IiBkYXRhLWxhYmVsY3VycmVudD0idHJ1ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+VXRpbGl6YWRvIHBhcmEgZGl2aWRpciBlbCBjb250ZW5pZG8gZW4gcMOhZ2luYXMuIFNpbXBsZW1lbnRlIHNlIGFkaWNpb25hIGxhIGNsYXNlIDxlbT5jdHJsLXBhZ2luYXRpb248L2VtPiBhIHVuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVtPiZsdDtkaXYmZ3Q7PC9lbT4gY29udGVuZWRvciB5IHNlIGFncmVnYW4gbGFzIHDDoWdpbmFzLCBjYWRhIHVuYSBlbiB1biA8ZW0+Jmx0O2xpJmd0OzwvZW0+LjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFyYSBjb250cm9sYXIgZWwgYWx0byBkZSBsYXMgcMOhZ2luYXMsIGRlIG1hbmVyYSBxdWUgc2UgbWFudGVuZ2EgdW5pZm9ybWUsIHV0aWxpemFyIGVsIGF0cmlidXRvIDxlbT5kYXRhLWxheWVyLWhlaWdodDwvZW0+LCBjb24gZWwgdmFsb3IgZGUgYWx0byBkZWwgY29udGVuaWRvLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFyYSBpbmRpY2FyIGVsIG7Dum1lcm8gZGUgY2FkYSBww6FnaW5hIHNlIHB1ZWRlIGFkaWNpb25hbG1lbnRlIGVzcGVjaWZpY2FyIGVsIGF0cmlidXRvIDxlbT5kYXRhLWxhYmVsY3VycmVudDwvZW0+IGVzdGFibGVjaWRvIGVuIDxlbT50cnVlPC9lbT4uIEVzbyBhZGljaW9uYSB1biBlbGVtZW50byBjb24gbGEgY2xhc2UgPGVtPmxhYmVsX2N1cnJlbnQ8L2VtPiBxdWUgc2UgcHVlZGUgcG9zaWNpb25hciBtZWRpYW50ZSBDU1MuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+RWplbXBsbzwvaDU+DQo8cHJlPg0KJmx0O2RpdiBjbGFzcz0iY3RybC1wYWdpbmF0aW9uIiBkYXRhLWxheWVyLWhlaWdodD0iMTgwcHgiIGRhdGEtbGFiZWxjdXJyZW50PSJ0cnVlIiAmZ3Q7DQogICZsdDtsaSZndDsNCiAgICBDb250ZW5pZG8gcHJpbWVyYSBww6FnaW5hDQogICZsdDsvbGkmZ3Q7DQogICZsdDtsaSZndDsNCiAgICBTZWd1bmRhIHDDoWdpbmENCiAgJmx0Oy9saSZndDsNCiZsdDsvZGl2Jmd0Ow0KPC9wcmU+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPk90cmEgcMOhZ2luYS48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5zdHJ1Y3Rpb24iPkhhZ2EgY2xpYyBzb2JyZSBsYXMgZmxlY2hhcyBwYXJhIHBhc2FyIGVudHJlIHDDoWdpbmFzPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPlBhZ2luYWNpw7NuIHNlY3VlbmNpYWwgdmVydGljYWw8L2gzPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN0cmwtcGFnaW5hdGlvbiIgZGF0YS1sYXllci1oZWlnaHQ9IjIzMHB4IiBkYXRhLW9yaWVudGF0aW9uPSJ2ZXJ0aWNhbCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExhIG1pc21hIHBhZ2luYWNpw7NuIHNlY3VlbmNpYWwgcGVybyBzdSBkZXNwbGF6YW1pZW50byBlcyBlbiBzZW50aWRvIHZlcnRpY2FsLiBTZSBjb25zdHJ1eWUgZGUgbGEgbWlzbWEgbWFuZXJhIHBlcm8gc2UgYWRpY2lvbmEgZWwgYXRyaWJ1dG8gPGVtPmRhdGEtb3JpZW50YXRpb248L2VtPiBjb24gZWwgdmFsb3IgPGVtPnZlcnRpY2FsPC9lbT4uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+RWplbXBsbzwvaDU+DQo8cHJlPg0KJmx0O2RpdiBjbGFzcz0iY3RybC1wYWdpbmF0aW9uIiBkYXRhLWxheWVyLWhlaWdodD0iMTgwcHgiIDxzdHJvbmcgY2xhc3M9ImNoYW5nZSI+ZGF0YS1vcmllbnRhdGlvbj0idmVydGljYWwiPC9zdHJvbmc+ICZndDsNCiAgJmx0O2xpJmd0Ow0KICAgIENvbnRlbmlkbyBwcmltZXJhIHDDoWdpbmENCiAgJmx0Oy9saSZndDsNCiAgJmx0O2xpJmd0Ow0KICAgIFNlZ3VuZGEgcMOhZ2luYQ0KICAmbHQ7L2xpJmd0Ow0KJmx0Oy9kaXYmZ3Q7DQo8L3ByZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+T3RyYSBww6FnaW5hLjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnN0cnVjdGlvbiI+SGFnYSBjbGljIHNvYnJlIGxhcyBmbGVjaGFzIHBhcmEgcGFzYXIgZW50cmUgcMOhZ2luYXM8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+UGFnaW5hY2nDs24gcG9yIG51bWVyYWw8L2gzPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN0cmwtcGFnaW5hdGlvbiIgZGF0YS1udW1lcmljLXBhZ2luYXRpb249InRydWUiIGRhdGEtbGF5ZXItaGVpZ2h0PSIyMjBweCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+VXRpbGl6YWRvIHBhcmEgZGl2aWRpciBlbCBjb250ZW5pZG8gZW4gcMOhZ2luYXMgeSBuYXZlZ2FyIGVudHJlIGxhcyBww6FnaW5hcyBtZWRpYW50ZSBsYSBudW1lcmFjacOzbiBkZSBsYXMgbWlzbWFzLiBTaW1wbGVtZW50ZSBzZSBhZGljaW9uYSBsYSBjbGFzZSA8ZW0+Y3RybC1wYWdpbmF0aW9uPC9lbT4gYSB1biA8ZW0+Jmx0O2RpdiZndDs8L2VtPiBjb250ZW5lZG9yLCBzZSBsZSBhZGljaW9uYSBlbCBhdHJpYnV0byA8ZW0+ZGF0YS1udW1lcmljLXBhZ2luYXRpb248L2VtPiBlc3RhYmxlY2lkYSBhIDxlbT50cnVlPC9lbT4geSBzZSBhZ3JlZ2FuIGxhcyBww6FnaW5hcywgY2FkYSB1bmEgZW4gdW4gPGVtPiZsdDtsaSZndDs8L2VtPi48L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFyYSBjb250cm9sYXIgZWwgYWx0byBkZSBsYXMgcMOhZ2luYXMsIGRlIG1hbmVyYSBxdWUgc2UgbWFudGVuZ2EgdW5pZm9ybWUsIHV0aWxpemFyIGVsIGF0cmlidXRvIDxlbT5kYXRhLWxheWVyLWhlaWdodDwvZW0+LCBjb24gZWwgdmFsb3IgZGUgYWx0byBkZWwgY29udGVuaWRvLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PkVqZW1wbG88L2g1Pg0KPHByZT4NCiZsdDtkaXYgY2xhc3M9ImN0cmwtcGFnaW5hdGlvbiIgZGF0YS1sYXllci1oZWlnaHQ9IjE4MHB4IiA8c3Ryb25nIGNsYXNzPSJjaGFuZ2UiPmRhdGEtbnVtZXJpYy1wYWdpbmF0aW9uPSJ0cnVlIjwvc3Ryb25nPiAmZ3Q7DQogICZsdDtsaSZndDsNCiAgICBDb250ZW5pZG8gcHJpbWVyYSBww6FnaW5hDQogICZsdDsvbGkmZ3Q7DQogICZsdDtsaSZndDsNCiAgICBTZWd1bmRhIHDDoWdpbmENCiAgJmx0Oy9saSZndDsNCiZsdDsvZGl2Jmd0Ow0KPC9wcmU+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPk90cmEgcMOhZ2luYS48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5zdHJ1Y3Rpb24iPkhhZ2EgY2xpYyBzb2JyZSBsb3MgbsO6bWVyb3MgcGFyYSBwYXNhciBlbnRyZSBww6FnaW5hczwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5QYWdpbmFjacOzbiBwb3IgbGV0cmFzPC9oMz4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdHJsLXBhZ2luYXRpb24iIGRhdGEtbnVtZXJpYy1wYWdpbmF0aW9uPSJ0cnVlIiBkYXRhLWxheWVyLWhlaWdodD0iMjAwcHgiIGRhdGEtdHlwZT0iYSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+SWRlbnRpY28gYSA8c3Ryb25nPlBhZ2luYWNpw7NuIHBvciBudW1lcmFsPC9zdHJvbmc+IHBlcm8gZW4gbHVnYXIgZGUgbsO6bWVyb3Mgc2UgdXRpbGljZW4gbGV0cmFzLCBzZSBkZWJlIGVzcGVjaWZpY2FyIGVsIGF0cmlidXRvIDxlbT5kYXRhLXR5cGU8L2VtPiBjb24gZWwgdmFsb3IgPGVtPmE8L2VtPiBvIDxlbT5BPC9lbT4sIGVzdGUgw7psdGltbyBzaSBzZSBkZXNlYSBxdWUgc2UgcHJlc2VudGUgZW4gbWF5w7pzY3VsYXMuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+RWplbXBsbzwvaDU+DQo8cHJlPg0KJmx0O2RpdiBjbGFzcz0iY3RybC1wYWdpbmF0aW9uIiBkYXRhLWxheWVyLWhlaWdodD0iMTgwcHgiIGRhdGEtbnVtZXJpYy1wYWdpbmF0aW9uPSJ0cnVlIiA8c3Ryb25nIGNsYXNzPSJjaGFuZ2UiPmRhdGEtdHlwZT0iYSI8L3N0cm9uZz4gJmd0Ow0KICAmbHQ7bGkmZ3Q7DQogICAgQ29udGVuaWRvIHByaW1lcmEgcMOhZ2luYQ0KICAmbHQ7L2xpJmd0Ow0KICAmbHQ7bGkmZ3Q7DQogICAgU2VndW5kYSBww6FnaW5hDQogICZsdDsvbGkmZ3Q7DQombHQ7L2RpdiZndDsNCjwvcHJlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5PdHJhIHDDoWdpbmEuPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imluc3RydWN0aW9uIj5IYWdhIGNsaWMgc29icmUgY2FkYSBsZXRyYSBwYXJhIHBhc2FyIGVudHJlIHDDoWdpbmFzPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPlRhYmxhIGRlIGRhdG9zPC9oMz4NCg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9ImRhdGF0YWJsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RXRpcXVldGE8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGVzY3JpcGNpw7NuPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkVqZW1wbG88L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlRhYmxhPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNvbnRlbmVkb3IgcHJpbmNpcGFsPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiZsdDt0YWJsZSBjbGFzcz0iZGF0YXRhYmxlIiZndDsuLi4mbHQ7L3RhYmxlJmd0OzwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9Im9kZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5FbmNhYmV6YWRvPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlNlY2Npw7NuIHF1ZSBjb250aWVuZSBsb3MgdMOtdHVsb3M8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Jmx0O3RoZWFkJmd0Oy4uLiZsdDsvdGhlYWQmZ3Q7PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlTDrXR1bG88L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Q2FkYSB1bm8gZGUgbG9zIHTDrXR1bG9zPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiZsdDt0aCZndDtUZXh0byBkZWwgdMOtdHVsbyZsdDsvdGgmZ3Q7PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0ib2RkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkN1ZXJwbyBkZWwgY29udGVuaWRvPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFncnVwYWRvciBkZWwgY29udGVuaWRvIGdlbmVyYWw8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Jmx0O3Rib2R5Jmd0Oy4uLiZsdDsvdGJvZHkmZ3Q7PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkZpbGFzIGltcGFyZXM8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Q2FkYSB1bmEgZGUgbGFzIGZpbGFzIGltcGFyZXMgbGxldmFuIGxhIGNsYXNlIDxlbT5vZGQ8L2VtPi4gU2UgY3VlbnRhIGluY2x1c2l2ZSBlbCB0w610dWxvLjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4mbHQ7dHIgY2xhc3M9Im9kZCImZ3Q7Li4uJmx0Oy90ciZndDs8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJvZGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Q29udGVuaWRvPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNhZGEgdW5hIGRlIGxhcyBjZWxkYXMgZGUgY29udGVuaWRvLjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4mbHQ7dGQmZ3Q7Li4uJmx0Oy90ZCZndDs8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UGllPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNvbnRlbmVkb3IgZGUgZmlsYXMgcXVlIHRvdGFsaXphbiBvIHByZXNlbnRhbiBpbmZvcm1hY2nDs24gYSBtYW5lcmEgZGUgcGllIGRlIGxhIHRhYmxhLjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4mbHQ7dGZvb3QmZ3Q7Li4uJmx0Oy90Zm9vdCZndDs8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRmb290Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlRvdGFsPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjIiPk1vcmJpIHNjZWxlcmlzcXVlIHF1YW0gYWM8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Zvb3Q+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5BY29yZGXDs248L2gzPg0KICAgICAgICAgICAgICAgICAgICA8cD5QYXJhIGFncnVwYXIgaW5mb3JtYWNpw7NuIHBvciBzZWNjaW9uZXMgZGVzcGxlZ2FuZG8gZWwgY29udGVuaWRvIGRlIGNhZGEgc2VjY2nDs24gYWwgZGFyIGNsaWMgZW4gZWwgdMOtdHVsby48L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPkxvcyBlc3RpbG9zIGdyw6FmaWNvcyBzb24gbG9zIGFzaWduYWRvcyBhbCB0ZW1hIGdyw6FmaWNvIGRlIDxhIGhyZWY9Imh0dHA6Ly9qcXVlcnl1aS5jb20vIiB0YXJnZXQ9Il9ibGFuayI+alF1ZXJ5IFVJPC9hPi48L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWNjb3JkaW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5Vc288L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5TZSBkZWJlIHV0aWxpemFyIGxhIGNsYXNlICJhY2NvcmRpb24iIGVuIHVuIGVsZW1lbnRvIHF1ZSBjb250ZW5nYSBsYSBlc3RydWN0dXJhIHNpZ3VpZW50ZTo8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VW4gPGVtPmgzPC9lbT4gcGFyYSBkZWZpbmlyIGVsIHTDrXR1bG8uPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNlZ3VpZG8gZGVsIDxlbT5oMzwvZW0+IGRlYmUgaGFiZXIgdW4gPGVtPmRpdjwvZW0+IHF1ZSBjb250ZW5nYSBlbCBjdWVycG8gZGVsIGVsZW1lbnRvLjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkVqZW1wbG88L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4NCjxwcmU+Jmx0O2RpdiBjbGFzcz0iYWNjb3JkaW9uIiZndDsNCiAgJmx0O2gzJmd0O1TDrXR1bG8gMSZsdDsvaDMmZ3Q7DQogICZsdDtkaXYmZ3Q7Q29udGVuaWRvIGRlbCBlbGVtZW50byAxJmx0Oy9kaXYmZ3Q7DQogICZsdDtoMyZndDtUw610dWxvIDImbHQ7L2gzJmd0Ow0KICAmbHQ7ZGl2Jmd0O0NvbnRlbmlkbyBkZWwgc2VndW5kbyBlbGVtZW50byZsdDsvZGl2Jmd0Ow0KJmx0Oy9kaXYmZ3Q7PC9wcmU+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIiBpZD0icGFnLWNvbnRlbmlkb2ludGVyYWN0aXZvLXZpZXdmaXJzdCI+DQoNCiAgICAgICAgICAgICAgICAgICAgPGgzPkltYWdlbmVzIGNvbiBjb250ZW5pZG8gZGUgdGV4dG88L2gzPg0KICAgICAgICAgICAgICAgICAgICA8cD5Fc3RlIGZvcm1hdG8gZXMgw7p0aWwgcGFyYSBkZXNwbGVnYXIgY29udGVuaWRvIGV4cGxpY2F0aXZvLCBxdWUgc2Vyw6EgbW9zdHJhZG8gc29icmUgdW5hIGltYWdlbiBhbCBwYXNhciBlbCBtb3VzZSBzb2JyZSBlbGxhLiBQYXJhIHV0aWxpemFybG8gYWdyZWd1ZSBsYSBjbGFzZSA8ZW0+dmlldy1maXJzdDwvZW0+IGEgdW4gY29udGVuZWRvciwgdXN1YWxtZW50ZSB1biA8ZW0+ZGl2PC9lbT4sIGFsIGludGVyaW9yIGFncmVndWUgdW5hIGltYWdlbiB5IG90cm8gY29udGVuZWRvciBjb24gbGEgY2xhc2UgPGVtPnZpZXctY29udGVudDwvZW0+IGVuIGVsIGN1YWwgZGViZSBpciBlbCBjb250ZW5pZG8gcXVlIHNlIG11ZXN0cmEgY29uIGxhIGludGVyYWNjacOzbi48L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94LXRleHQgZXhhbXBsZSIgbGFiZWw9IkVqZW1wbG8iPg0KPHByZT4NCiZsdDtkaXYgY2xhc3M9InZpZXctZmlyc3QiJmd0Ow0KICAgICZsdDtpbWcgc3JjPSJjb250ZW50L3ByaW1hdmVyYS5wbmciIC8mZ3Q7DQogICAgJmx0O2RpdiBjbGFzcz0idmlldy1jb250ZW50IiZndDsNCiAgICAgICAgJmx0O2gyJmd0O1ByaW1hdmVyYSZsdDsvaDImZ3Q7DQogICAgICAgICZsdDtzdHJvbmcmZ3Q7SW5pY2lvOiAmbHQ7L3N0cm9uZyZndDsyMC0yMSBtYXJ6byZsdDticiAvJmd0Ow0KICAgICAgICAmbHQ7c3Ryb25nJmd0O0guIG5vcnRlOiAmbHQ7L3N0cm9uZyZndDtQcmltYXZlcmEmbHQ7YnIgLyZndDsNCiAgICAgICAgJmx0O3N0cm9uZyZndDtILiBzdXI6ICZsdDsvc3Ryb25nJmd0O090b8OxbyZsdDticiAvJmd0Ow0KICAgICAgICAmbHQ7c3Ryb25nJmd0O0luY2xpbmFjacOzbjogJmx0Oy9zdHJvbmcmZ3Q7MMKwJmx0O2JyIC8mZ3Q7DQogICAgJmx0Oy9kaXYmZ3Q7DQombHQ7L2RpdiZndDsNCjwvcHJlPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbCBjw7NkaWdvIGFudGVyaW9yIHNlIHZlcsOtYSBhc8OtOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InZpZXctZmlyc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iY29udGVudC9wcmltYXZlcmEucG5nIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ2aWV3LWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPlByaW1hdmVyYTwvaDI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPkluaWNpbzogPC9zdHJvbmc+MjAtMjEgbWFyem88YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+SC4gbm9ydGU6IDwvc3Ryb25nPlByaW1hdmVyYTxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5ILiBzdXI6IDwvc3Ryb25nPk90b8OxbzxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5JbmNsaW5hY2nDs246IDwvc3Ryb25nPjDCsDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBVbiBlamVtcGxvIHByw6FjdGljbyBzb2JyZSBlbCB1c28gZGUgZXN0ZSBjb250cm9sIHNlIG11ZXN0cmEgYSBjb250aW51YWNpw7NuLCBjb24gbGFzIGVzdGFjaW9uZXMuDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5zdHJ1Y3Rpb24iPlBhc2UgZWwgbW91c2Ugc29icmUgY2FkYSBpbWFnZW4gcGFyYSBtw6FzIGluZm9ybWFjacOzbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJpbWFnZV9jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InZpZXctZmlyc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJjb250ZW50L3ByaW1hdmVyYS5wbmciIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idmlldy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPlByaW1hdmVyYTwvaDI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+SW5pY2lvOiA8L3N0cm9uZz4yMC0yMSBtYXJ6bzxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPkguIG5vcnRlOiA8L3N0cm9uZz5QcmltYXZlcmE8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5ILiBzdXI6IDwvc3Ryb25nPk90b8OxbzxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPkluY2xpbmFjacOzbjogPC9zdHJvbmc+MMKwPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InZpZXctZmlyc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJjb250ZW50L3ZlcmFuby5wbmciIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idmlldy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPlZlcmFubzwvaDI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+SW5pY2lvOiA8L3N0cm9uZz4yMS0yMiBKdW5pbzxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPkguIG5vcnRlOiA8L3N0cm9uZz5WZXJhbm88YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5ILiBzdXI6IDwvc3Ryb25nPkludmllcm5vPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+SW5jbGluYWNpw7NuOiA8L3N0cm9uZz4yMyw1wrogTm9ydGU8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idmlldy1maXJzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9ImNvbnRlbnQvb3Rvbm8ucG5nIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InZpZXctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj5PdG/DsW88L2gyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPkluaWNpbzogPC9zdHJvbmc+MjMtMjQgU2VwdGllbWJyZTxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPkguIG5vcnRlOiA8L3N0cm9uZz5PdG/DsW88YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5ILiBzdXI6IDwvc3Ryb25nPlByaW1hdmVyYTxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPkluY2xpbmFjacOzbjogPC9zdHJvbmc+MMKwPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InZpZXctZmlyc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJjb250ZW50L2ludmllcm5vLnBuZyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ2aWV3LWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+SW52aWVybm88L2gyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPkluaWNpbzogPC9zdHJvbmc+MjEtMjIgRGljaWVtYnJlPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+SC4gbm9ydGU6IDwvc3Ryb25nPkludmllcm5vPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+SC4gc3VyOiA8L3N0cm9uZz5WZXJhbm88YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5JbmNsaW5hY2nDs246IDwvc3Ryb25nPjIzLDXCuiBTdXI8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGJyIGNsYXNzPSJjbGVhciIgLz4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+SW1hZ2VuIHBhcmEgYW1wbGlhcjwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgU2UgdXRpbGl6YSBwYXJhIGFtcGxpYXIgdW5hIGltYWdlbiBhbCBkYXIgY2xpYyBzb2JyZSBlbGxhLCBlbiBjYXNvcyBwb3IgZWplbXBsbyBkb25kZSBubyBxdWVwYSBsYSBpbWFnZW4gb3JpZ2luYWwgcG9yIHNlciBtdXkgZ3JhbmRlLiBQYXJhIGVsbG8gc2UgYXNpZ25hIGxhIGNsYXNlIDxlbT5leHBhbmQtaW1hZ2U8L2VtPiBhIHVuIGNvbnRlbmVkb3IgeSBzZSBsZSBkZWZpbmUgZWwgYXRyaWJ1dG8gPGVtPmRhdGEtc3JjPC9lbT4gY3V5byB2YWxvciBkZWJlIHNlciBsYSBydXRhIGRlIGxhIGltYWdlbi4gUG9yIGRlZmVjdG8sIGVsIHRhbWHDsW8gZGUgbGEgcHJldmlzdWFsaXphY2nDs24gc2Vyw6EgZGUgPHN0cm9uZz4xMDBweCAqIDEwMHB4PC9zdHJvbmc+LCBzaSBzZSBkZXNlYSBkYXIgb3RybyB0YW1hw7FvIGRlYmUgaGFjZXJzZSBwb3IgZXN0aWxvcyBhbCBjb250ZW5lZG9yIHkgZGUgZXNhIG1hbmVyYSBsYSBwcmV2aXN1YWxpemFjacOzbiBzZSBhanVzdGFyw6EgYWwgdGFtYcOxbyBkZSDDqXN0ZS4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFNpIGVsIGNvbnRlbmVkb3IgdGllbmUgdW4gYXRyaWJ1dG8gPGVtPnRpdGxlPC9lbT4sIGRpY2hvIHZhbG9yIHNlIGFzaWduYSBhIGxhIHZlbnRhbmEgY29tbyB0w610dWxvLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveC10ZXh0IGV4YW1wbGUiIGxhYmVsPSJFamVtcGxvIj4NCjxwcmU+DQombHQ7ZGl2IGNsYXNzPSJleHBhbmQtaW1hZ2UiIGRhdGEtc3JjPSJjb250ZW50L29qby5qcGciIHRpdGxlPSJPam8gZGUgcmVwdGlsIiZndDsmbHQ7L2RpdiZndDsNCjwvcHJlPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbCBjw7NkaWdvIGFudGVyaW9yIHNlIHZlcsOtYSBhc8OtOg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5zdHJ1Y3Rpb24iPkNsaWMgZW4gbGEgaW1hZ2VuIHBhcmEgYW1wbGlhcjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZXhwYW5kLWltYWdlIiBkYXRhLXNyYz0iY29udGVudC9vam8uanBnIiB0aXRsZT0iT2pvIGRlIHJlcHRpbCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhYm91dCI+PHN0cm9uZz5JbWFnZW4gMS48L3N0cm9uZz4gT2pvLjxiciAvPjxzdHJvbmc+RnVlbnRlOjwvc3Ryb25nPiBXaWtpbWVkaWEuPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSIgaWQ9InBhZy1jb250ZW5pZG9pbnRlcmFjdGl2by1wb2ludGVycyI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5BcHVudGFkb3JlcyBpbmZvcm1hdGl2b3M8L2gzPg0KICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgIE5vIHNvbiB1biBjb250cm9sIG51ZXZvIHNpbm8gdW5hIG1lemNsYSBkZSBvdHJvcyBjb250cm9sZXMgY29uIGVsIG9iamV0aXZvIGRlIHNlw7FhbGFyIGluZm9ybWFjacOzbiBhbCBpbnRlcmlvciBkZSB1bmEgaW1hZ2VuLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveC10ZXh0IGV4YW1wbGUiIGxhYmVsPSJFamVtcGxvIGRlIGFwdW50YWRvcmVzIGVuIHVuYSBpbWFnZW4iPg0KICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICBFbiBlbCBlamVtcGxvIHNpZ3VpZW50ZSBzZSBtdWVzdHJhIGVsIHVzbyBkZSBsb3MgPHN0cm9uZz5hcHVudGFkb3Jlczwvc3Ryb25nPiBtZXpjbGFkb3MgY29uIGxvcyA8c3Ryb25nPnRvb2x0aXA8L3N0cm9uZz4gcGFyYSBtb3N0cmFyIGNvbnRlbmlkbyBzZWfDum4gbGFzIHBhcnRlcyBkZSBsYSBpbWFnZW4uIExhcyBwb3NpY2lvbmVzIGRlIGxvcyBhcHVudGFkb3JlcyBkZWJlbiBzZXIgZXN0YWJsZWNpZGFzIG1hbnVhbG1lbnRlIGVuIGxvcyBlc3RpbG9zIHBlcnNvbmFsaXphZG9zLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQo8cHJlPg0KJmx0O2RpdiBjbGFzcz0ibm90ZV9wb2ludGVyX3JpZ2h0IG5vdGVfMSImZ3Q7DQogICZsdDtkaXYgY2xhc3M9InRvb2x0aXAiIHRpdGxlPSImbHQ7c3Ryb25nJmd0OzEuJmx0Oy9zdHJvbmcmZ3Q7IENhYmV6YSImZ3Q7MSZsdDsvZGl2Jmd0Ow0KJmx0Oy9kaXYmZ3Q7DQombHQ7ZGl2IGNsYXNzPSJub3RlX3BvaW50ZXJfbGVmdCBub3RlXzIiJmd0Ow0KICAmbHQ7ZGl2IGNsYXNzPSJ0b29sdGlwIiB0aXRsZT0iJmx0O3N0cm9uZyZndDsyLiZsdDsvc3Ryb25nJmd0OyBQZWNobyImZ3Q7MiZsdDsvZGl2Jmd0Ow0KJmx0Oy9kaXYmZ3Q7DQombHQ7ZGl2IGNsYXNzPSJub3RlX3BvaW50ZXJfcmlnaHQgbm90ZV8zIiZndDsNCiAgJmx0O2RpdiBjbGFzcz0idG9vbHRpcCIgdGl0bGU9IiZsdDtzdHJvbmcmZ3Q7My4mbHQ7L3N0cm9uZyZndDsgTWFubyImZ3Q7MyZsdDsvZGl2Jmd0Ow0KJmx0Oy9kaXYmZ3Q7DQombHQ7ZGl2IGNsYXNzPSJub3RlX3BvaW50ZXJfbGVmdCBub3RlXzQiJmd0Ow0KICAmbHQ7ZGl2IGNsYXNzPSJ0b29sdGlwIiB0aXRsZT0iJmx0O3N0cm9uZyZndDs0LiZsdDsvc3Ryb25nJmd0OyBQaWVybmEiJmd0OzQmbHQ7L2RpdiZndDsNCiZsdDsvZGl2Jmd0Ow0KPC9wcmU+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVsIGPDs2RpZ28gYW50ZXJpb3Igc2UgdmVyw61hIGFzw60gKGxhcyBpbnN0cnVjY2lvbmVzIHkgcmVmZXJlbmNpYXMgc29uIGFkaWNpb25hbGVzKToNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imluc3RydWN0aW9uIj5QYXNlIGVsIG1vdXNlIHBvciBjYWRhIHVubyBkZSBsb3MgbsO6bWVyb3MgcGFyYSBvYnRlbmVyIG3DoXMgaW5mb3JtYWNpw7NuPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3hfbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibm90ZV9wb2ludGVyX3JpZ2h0IG5vdGVfMSI+PGRpdiBjbGFzcz0idG9vbHRpcCIgdGl0bGU9IjxzdHJvbmc+MS48L3N0cm9uZz4gQ2FiZXphIj4xPC9kaXY+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibm90ZV9wb2ludGVyX2xlZnQgbm90ZV8yIj48ZGl2IGNsYXNzPSJ0b29sdGlwIiB0aXRsZT0iPHN0cm9uZz4yLjwvc3Ryb25nPiBQZWNobyI+MjwvZGl2PjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5vdGVfcG9pbnRlcl9yaWdodCBub3RlXzMiPjxkaXYgY2xhc3M9InRvb2x0aXAiIHRpdGxlPSI8c3Ryb25nPjMuPC9zdHJvbmc+IE1hbm8iPjM8L2Rpdj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJub3RlX3BvaW50ZXJfbGVmdCBub3RlXzQiPjxkaXYgY2xhc3M9InRvb2x0aXAiIHRpdGxlPSI8c3Ryb25nPjQuPC9zdHJvbmc+IFBpZXJuYSI+NDwvZGl2PjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhYm91dCI+PHN0cm9uZz5JbWFnZW4gMS48L3N0cm9uZz4gUGFydGVzIGRlbCBjdWVycG8uPGJyIC8+PHN0cm9uZz5GdWVudGU6PC9zdHJvbmc+IFdpa2ltZWRpYS48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L3NlY3Rpb24+DQoNCiAgICAgICAgICAgIDwhLS1BY3RpdmlkYWRlcy0tPg0KICAgICAgICAgICAgPHNlY3Rpb24gaWQ9InBhZy1hY3RpdmlkYWRlcyIgcHRpdGxlPSI0LiBUaXBvcyBkZSBhY3RpdmlkYWRlcyI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5HZW5lcmFsaWRhZGVzPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBQYXJhIGRhcmxlIHVuYSBpZGVudGlmaWNhY2nDs24gcHJvcGlhIGEgY2FkYSBhY3RpdmlkYWQgY29uIGVsIGZpbiBkZSByZWNvbm9jZXJsYXMgZsOhY2lsbWVudGUgZW4gbGEgcmV2aXNpw7NuLCBzZSBkZWJlbiBhZ3JlZ2FyIGRvcyBhdHJpYnV0b3MgYSBsYSBldGlxdWV0YSBwcmluY2lwYWwgcXVlIGRlZmluZSBsYSBhY3RpdmlkYWQ6DQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxzdHJvbmc+ZGF0YS1hY3QtaWQ6PC9zdHJvbmc+IFVuIGlkZW50aWZpY2Fkb3IgY29ydG8geSDDum5pY28gZGUgbGEgYWN0aXZpZGFkLCBzaW4gZXNwYWNpb3MgbmkgY2FyYWN0ZXJlcyBlc3BlY2lhbGVzLiBFcyBlbCBxdWUgc2UgbXVlc3RyYSBlbiBlbCByYXN0cmVvIGRlbCBTQ09STS4gVGFtYmnDqW4gZXMgdXRpbGl6YWRvIHBhcmEgb3JkZW5hciBsYXMgYWN0aXZpZGFkZXMgYWwgbW9tZW50byBkZSBsaXN0YXJsYXMgZW4gbGEgdmVudGFuYSBkZSA8c3Ryb25nPlJlc3VsdGFkb3M8L3N0cm9uZz4gcG9yIGxvIHF1ZSBlcyDDunRpbCBjb2xvY2FyIHVuIG7Dum1lcm8gYW50ZXMgZGVsIGlkZW50aWZpY2Fkb3IgcGFyYSBpbmRpY2FyIGVuIHF1ZSBwb3NpY2nDs24gc2UgZGViZXLDrWEgbW9zdHJhciBlbCByZXN1bHRhZG8gZGUgbGEgYWN0aXZpZGFkLCBwb3IgZWplbXBsbzogPGVtPjFfcXVpejwvZW0+IHNlIGxpc3RhcsOtYSBhbnRlcyBkZSA8ZW0+Ml9hcGFyZWFtaWVudG88L2VtPiBzaW4gaW1wb3J0YXIgZWwgdMOtdHVsbyBxdWUgdGVuZ2FuLiBTaSBubyBzZSBlc3BlY2lmaWNhIGVzdGUgY2FtcG8geSBoYXkgbcOhcyBkZSB1bmEgYWN0aXZpZGFkIGRlbCBtaXNtbyB0aXBvIGVuIGVsIHBhcXVldGUsIHNlIHBlcmRlcsOhIGxhIGluZm9ybWFjacOzbiBkZSB1bmEgZGUgZWxsYXMuPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPmRhdGEtYWN0LXRpdGxlOjwvc3Ryb25nPiBFbCBub21icmUgcXVlIGFwYXJlY2Vyw6EgZW4gbGEgdmVudGFuYSBkZSA8c3Ryb25nPlJlc3VsdGFkb3M8L3N0cm9uZz48L2xpPg0KICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICA8cD5WZXIgZWplbXBsbyBlbiBhY3RpdmlkYWQgPHN0cm9uZz5DdWVzdGlvbmFyaW88L3N0cm9uZz4uPC9wPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5DdWVzdGlvbmFyaW88L2gzPg0KDQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgVW4gY3Vlc3Rpb25hcmlvIHNlIGRlZmluZSBhZ3JlZ2FuZG8gbGEgY2xhc2UgPGVtPmpwaXQtYWN0aXZpdGllcy1xdWl6PC9lbT4gYSB1biBjb250ZW5lZG9yIHkgZGVudHJvIGRlIMOpbCBhZ3JlZ2FuZG8gZWxlbWVudG9zIGRlIHRpcG8gPGVtPnF1ZXN0aW9uPC9lbT4gY29uIGVsIGF0cmlidXRvIDxlbT50eXBlPC9lbT4gc2Vnw7puIGVsIHRpcG8gZGUgcHJlZ3VudGEuIENhZGEgcHJlZ3VudGEgYWRlbcOhcyB0aWVuZSB1biBlbGVtZW50byA8ZW0+ZGVzY3JpcHRpb248L2VtPiBwYXJhIGVsIGVudW5jaWFkbyB5IHVuYSBlc3RydWN0dXJhIGVzcGVjw61maWNhIHBhcmEgZWwgY3VlcnBvIHNlZ8O6biBzdSB0aXBvLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPlRpcG9zIGRlIHByZWd1bnRhIGRpc3BvbmlibGVzOjwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkYXRhX2xpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxlbT5FdGlxdWV0YSAobGFiZWwpPC9lbT46IE5vIGVzIGNhbGlmaWNhYmxlLCBzZSB1dGlsaXphIHBhcmEgbW9zdHJhciB1biB0ZXh0byBmaWpvLjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGVtPlNlbGVjY2nDs24gw7puaWNhIChzaW1wbGVjaG9pY2UpPC9lbT46IFBhcmEgc2VsZWNjaW9uYXIgdW5hIG9wY2nDs24gY29ycmVjdGEgZGUgdW5hIGxpc3RhIGRlIHBvc2libGVzIHZhbG9yZXMuPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48ZW0+U2VsZWNjacOzbiBtw7psdGlwbGUgKG11bHRpY2hvaWNlKTwvZW0+OiBQYXJhIHNlbGVjY2lvbmFyIHZhcmlhcyBvcGNpb25lcywgdG9kYXMgbGFzIGNvcnJlY3RhcywgZW4gdW5hIGxpc3RhIGRlIHBvc2libGVzIHZhbG9yZXMuPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48ZW0+U2VsZWNjacOzbiBtw7psdGlwbGUgZW4gY29uanVudG8gKG11bHRpc2V0Y2hvaWNlKTwvZW0+OiBQYXJhIHNlbGVjY2lvbmFyIGxhcyBjb3JyZWN0YXMgZGUgdW5hIGxpc3RhIGRlIHBvc2libGVzIHZhbG9yZXMuIFBlcm1pdGUgZGVmaW5pciB2YXJpb3MgY29uanVudG9zIGNvcnJlY3RvcywgZXhjbHV5ZW50ZXMgZW50cmUgc2kuPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48ZW0+Q2xvemUgKGNvbXBsZXRlKTwvZW0+OiBQcmVzZW50YSB2YXJpYXMgb3BjaW9uZXMgZW50cmUgdW4gY29udGVuaWRvLCBjb24gY29udHJvbGVzIHBhcmEgc2VsZWNjaW9uYXIgbG9zIHZhbG9yZXMgY29ycmVjdG9zLjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGVtPkRlZmluaWNpw7NuIChkZWZpbmV0ZXJtKTwvZW0+OiBQYXJhIHBlcm1pdGlyIGVudHJhZGFzIGRlIHRleHRvIHF1ZSB0aWVuZW4gcXVlIGNvaW5jaWRpciBjb21wbGV0YW1lbnRlIGNvbiBsYXMgcmVzcHVlc3RhcyBjb3JyZWN0YXMsIHNlZ8O6biBlbCB0w6lybWlubyBhIGRlZmluaXIuPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBQb3IgZGVmZWN0byBsYXMgcHJlZ3VudGFzIHNlIG11ZXN0cmFuIGVuIG9yZGVuIGFsZWF0b3JpbywgcGFyYSBkZXNhY3RpdmFyIGVsIG1vZG8gYWxlYXRvcmlvIGFkaWNpb25hciBhbCBjdWVzdGlvbmFyaW8gZWwgYXRyaWJ1dG8gPGVtPmRhdGEtc2h1ZmZsZT0iZmFsc2UiPC9lbT4uDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBMYXMgcHJlZ3VudGFzIHNlIHB1ZWRlbiB2ZXJpZmljYXIgdW5hIGEgdW5hLCBzaSBhbGd1bmEgbm8gZXMgdmVyaWZpY2FkYSBwZXJvIHNlIHJlc3BvbmRlLCBsYSB2ZXJpZmljYWNpw7NuIHNlIGhhcsOhIGFsIG1vbWVudG8gZGUgdmVyaWZpY2FyIGxhIMO6bHRpbWEgcmVzcHVlc3RhLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgQ2FkYSBwcmVndW50YSBwdWVkZSB0ZW5lciB1bmEgcmV0cm9hbGltZW50YWNpw7NuIHBhcmEgY3VhbmRvIHNlIHJlc3VlbHZlIGNvcnJlY3RhbWVudGUgeS9vIHVuYSBwYXJhIGN1YW5kbyBzZSBoYWNlIGRlIG1hbmVyYSBpbmNvcnJlY3RhLiBQYXJhIGRlZmluaXIgbGEgcmV0cm9hbGltZW50YWNpw7NuIHNlIGNyZWEgdW4gZWxlbWVudG8gPGVtPmZlZWRiYWNrPC9lbT4gYWwgaW50ZXJpb3IgZGUgbGEgcHJlZ3VudGEgeSBkZW50cm8gZGUgw6lzdGUgdW5vIG8gbG9zIGRvcyBlbGVtZW50b3M6IDxlbT5jb3JyZWN0PC9lbT4geSA8ZW0+d3Jvbmc8L2VtPiBjb24gZWwgcmVzcGVjdGl2byB0ZXh0by4gVGFtYmnDqW4gc2UgcHVlZGUgZGVmaW5pciB1bmEgcmV0cm9hbGltZW50YWNpw7NuIHBvciBkZWZlY3RvIHBhcmEgdW5vIG8gbG9zIGRvcyByZXN1bHRhZG9zLCBhIG5pdmVsIGRlIGN1ZXN0aW9uYXJpbywgYWdyZWdhbmRvIGxhIG1pc21hIGVzdHJ1Y3R1cmEgcGVybyBhbCBtaXNtbyBuaXZlbCBkZSBsYXMgcHJlZ3VudGFzLCBlcyBkZWNpciwgY29tbyBlbGVtZW50byBoaWpvIGRlIGxhIGV0aXF1ZXRhIHF1ZSBkZWZpbmUgZWwgY3Vlc3Rpb25hcmlvLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaG9yaXpvbnRhbC1tZW51IHBhZy1hY3RpdmlkYWRlcy1jdWVzdGlvbmFyaW8iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdD5FamVtcGxvPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImpwaXQtYWN0aXZpdGllcy1xdWl6IiBkYXRhLWFjdC10aXRsZT0iRWwgY3Vlc3Rpb25hcmlvIiBkYXRhLWFjdC1pZD0iMV9jdWVzdGlvbmFyaW8iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHF1ZXN0aW9uIHR5cGU9InNpbXBsZWNob2ljZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRlc2NyaXB0aW9uPjxwPkxvcyB0aXBvcyBkZSBwcmVndW50YXMgcXVlIGhheSBzb246IHNpbXBsZWNob2ljZSB5IGNvbXBsZXRlPC9wPjwvZGVzY3JpcHRpb24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1yZXNwb25zZT0idHJ1ZSI+RmFsc288L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VmVyZGFkZXJvPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmZWVkYmFjaz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvcnJlY3Q+QXPDrSBlcywgaGF5IG3DoXMgdGlwb3MgZGUgcHJlZ3VudGFzLjwvY29ycmVjdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZlZWRiYWNrPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9xdWVzdGlvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxxdWVzdGlvbiB0eXBlPSJsYWJlbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRlc2NyaXB0aW9uPjxwPkVsIHRpcG8gZGUgcHJlZ3VudGEgImxhYmVsIiBubyBzZSBjYWxpZmljYS48L3A+PC9kZXNjcmlwdGlvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD5TaXJ2ZSwgcG9yIGVqZW1wbG8sIHBhcmEgcHJlc2VudGFyIHRleHRvIGludHJvZHVjdG9yaW8gZGUgb3RyYXMgcHJlZ3VudGFzLiBUZW5lciBlbiBjdWVudGEgcXVlIHNpIHNlIHV0aWxpemEgZXN0ZSB0aXBvIGRlIHByZWd1bnRhcyBlcyBwcm9iYWJsZSBxdWUgbm8gc2VhIGJ1ZW5vIGRlamFyIHF1ZSBsYXMgcHJlZ3VudGFzIHNlIG11ZXN0cmVuIGVuIG9yZGVuIGFsZWF0b3Jpby48L3RleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3F1ZXN0aW9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHF1ZXN0aW9uIHR5cGU9ImNvbXBsZXRlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGVzY3JpcHRpb24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNvYnJlIGxhcyBkaWZlcmVuY2lhcyBlbnRyZSBsb3MgdGlwb3MgZGUgY3Vlc3Rpb25hcmlvLjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rlc2NyaXB0aW9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJpdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGFzIHByZWd1bnRhcyBwb3IgZGVmZWN0byBzb24gbW9zdHJhZGFzIGRlIG1hbmVyYQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPSJhbnN3ZXJzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gZGF0YS1yZXNwb25zZT0idHJ1ZSI+YWxlYXRvcmlhPC9vcHRpb24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPm9yZGVuYWRhPC9vcHRpb24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PiwgcGFyYSBjYW1iaWFyIHN1IGNvbXBvcnRhbWllbnRvIHBvciBkZWZlY3RvIHNlIGRlYmUgYWdyZWdhciBlbCBhdHJpYnV0bw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPSJhbnN3ZXJzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+bmkgaWRlYTwvb3B0aW9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiBkYXRhLXJlc3BvbnNlPSJ0cnVlIj5kYXRhLXNodWZmbGU9ImZhbHNlIjwvb3B0aW9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9xdWVzdGlvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxxdWVzdGlvbiB0eXBlPSJtdWx0aWNob2ljZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRlc2NyaXB0aW9uPjxwPkxvcyBzaWd1aWVudGVzIHRpcG9zIGRlIHByZWd1bnRhcyBzb24gY2FsaWZpY2FibGVzPC9wPjwvZGVzY3JpcHRpb24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1yZXNwb25zZT0idHJ1ZSI+c2ltcGxlY2hvaWNlPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtcmVzcG9uc2U9InRydWUiPmNvbXBsZXRlPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPmxhYmVsPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9xdWVzdGlvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxxdWVzdGlvbiB0eXBlPSJkZWZpbmV0ZXJtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGVzY3JpcHRpb24+PHA+RXNjcmliYSBsYSBhYnJldmlhY2nDs24gZGUgbG9zIHNpZ3VpZW50ZXMgdMOpcm1pbm9zIChubyBlcyBzZW5zaWJsZSBhIG1hecO6c2N1bGFzIG8gbWluw7pzY3VsYXMpPC9wPjwvZGVzY3JpcHRpb24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1yZXNwb25zZT0iT1ZBIj5PYmpldG9zIHZpcnR1YWxlcyBkZSBhcHJlbmRpemFqZTwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXJlc3BvbnNlPSJSRURBIj5SZWN1cnNvcyBlZHVjYXRpdm9zIGRpZ2l0YWxlcyBhYmllcnRvczwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcXVlc3Rpb24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cXVlc3Rpb24gdHlwZT0ibXVsdGlzZXRjaG9pY2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZXNjcmlwdGlvbj48cD5TZWxlY2Npb25lIHNvbGFtZW50ZSBsb3MgcGFyZXMgbyBsb3MgaW1wYXJlczwvcD48L2Rlc2NyaXB0aW9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtcmVzcG9uc2U9IjEiPjE8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1yZXNwb25zZT0iMiI+MjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXJlc3BvbnNlPSIyIj42PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtcmVzcG9uc2U9IjEiPjM8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1yZXNwb25zZT0iMSI+OTwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcXVlc3Rpb24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmVlZGJhY2s+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHdyb25nPk5vIGVzIGNvcnJlY3RvLCBlcyBwcmVjaXNvIHF1ZSByZXZpc2Ugc3UgcmVzcHVlc3RhLjwvd3Jvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZlZWRiYWNrPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHQ+SFRNTDwvZHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRkPg0KPHByZT4NCiZsdDtkaXYgY2xhc3M9ImpwaXQtYWN0aXZpdGllcy1xdWl6IiBkYXRhLWFjdC10aXRsZT0iRWwgY3Vlc3Rpb25hcmlvIiBkYXRhLWFjdC1pZD0iMV9jdWVzdGlvbmFyaW8iJmd0Ow0KICAgICZsdDtxdWVzdGlvbiB0eXBlPSJzaW1wbGVjaG9pY2UiJmd0Ow0KICAgICAgICAmbHQ7ZGVzY3JpcHRpb24mZ3Q7Jmx0O3AmZ3Q7TG9zIHRpcG9zIGRlIHByZWd1bnRhcyBxdWUgaGF5IHNvbjogc2ltcGxlY2hvaWNlIHkgY29tcGxldGUmbHQ7L3AmZ3Q7Jmx0Oy9kZXNjcmlwdGlvbiZndDsNCiAgICAgICAgJmx0O3VsJmd0Ow0KICAgICAgICAgICAgJmx0O2xpIGRhdGEtcmVzcG9uc2U9InRydWUiJmd0O0ZhbHNvJmx0Oy9saSZndDsNCiAgICAgICAgICAgICZsdDtsaSZndDtWZXJkYWRlcm8mbHQ7L2xpJmd0Ow0KICAgICAgICAmbHQ7L3VsJmd0Ow0KICAgICAgICAmbHQ7ZmVlZGJhY2smZ3Q7DQogICAgICAgICAgICAmbHQ7Y29ycmVjdCZndDtBc8OtIGVzLCBoYXkgbcOhcyB0aXBvcyBkZSBwcmVndW50YXMuJmx0Oy9jb3JyZWN0Jmd0Ow0KICAgICAgICAmbHQ7L2ZlZWRiYWNrJmd0Ow0KICAgICZsdDsvcXVlc3Rpb24mZ3Q7DQogICAgJmx0O3F1ZXN0aW9uIHR5cGU9ImxhYmVsIiZndDsNCiAgICAgICAgJmx0O2Rlc2NyaXB0aW9uJmd0OyZsdDtwJmd0O0VsIHRpcG8gZGUgcHJlZ3VudGEgImxhYmVsIiBubyBzZSBjYWxpZmljYS4mbHQ7L3AmZ3Q7Jmx0Oy9kZXNjcmlwdGlvbiZndDsNCiAgICAgICAgJmx0O3RleHQmZ3Q7U2lydmUsIHBvciBlamVtcGxvLCBwYXJhIHByZXNlbnRhciB0ZXh0byBpbnRyb2R1Y3RvcmlvIGRlIG90cmFzIHByZWd1bnRhcy4NCiAgICAgICAgICAgIFRlbmVyIGVuIGN1ZW50YSBxdWUgc2kgc2UgdXRpbGl6YSBlc3RlIHRpcG8gZGUgcHJlZ3VudGFzIGVzIHByb2JhYmxlIHF1ZSBubyBzZWEgYnVlbm8gZGVqYXIgcXVlDQogICAgICAgICAgICBsYXMgcHJlZ3VudGFzIHNlIG11ZXN0cmVuIGVuIG9yZGVuIGFsZWF0b3Jpby4mbHQ7L3RleHQmZ3Q7DQogICAgJmx0Oy9xdWVzdGlvbiZndDsNCiAgICAmbHQ7cXVlc3Rpb24gdHlwZT0iY29tcGxldGUiJmd0Ow0KICAgICAgICAmbHQ7ZGVzY3JpcHRpb24mZ3Q7DQogICAgICAgICAgICAmbHQ7cCZndDtTb2JyZSBsYXMgZGlmZXJlbmNpYXMgZW50cmUgbG9zIHRpcG9zIGRlIGN1ZXN0aW9uYXJpby4mbHQ7L3AmZ3Q7DQogICAgICAgICZsdDsvZGVzY3JpcHRpb24mZ3Q7DQogICAgICAgICZsdDtwIGNsYXNzPSJpdGVtIiZndDsNCiAgICAgICAgICAgIExhcyBwcmVndW50YXMgcG9yIGRlZmVjdG8gc29uIG1vc3RyYWRhcyBkZSBtYW5lcmENCiAgICAgICAgICAgICZsdDtzZWxlY3QgY2xhc3M9ImFuc3dlcnMiJmd0Ow0KICAgICAgICAgICAgICAgICZsdDtvcHRpb24gZGF0YS1yZXNwb25zZT0idHJ1ZSImZ3Q7YWxlYXRvcmlhJmx0Oy9vcHRpb24mZ3Q7DQogICAgICAgICAgICAgICAgJmx0O29wdGlvbiZndDtvcmRlbmFkYSZsdDsvb3B0aW9uJmd0Ow0KICAgICAgICAgICAgJmx0Oy9zZWxlY3QmZ3Q7LCBwYXJhIGNhbWJpYXIgc3UgY29tcG9ydGFtaWVudG8gcG9yIGRlZmVjdG8gc2UgZGViZSBhZ3JlZ2FyIGVsIGF0cmlidXRvDQogICAgICAgICAgICAmbHQ7c2VsZWN0IGNsYXNzPSJhbnN3ZXJzIiZndDsNCiAgICAgICAgICAgICAgICAmbHQ7b3B0aW9uJmd0O25pIGlkZWEmbHQ7L29wdGlvbiZndDsNCiAgICAgICAgICAgICAgICAmbHQ7b3B0aW9uIGRhdGEtcmVzcG9uc2U9InRydWUiJmd0O2RhdGEtc2h1ZmZsZT0iZmFsc2UiJmx0Oy9vcHRpb24mZ3Q7DQogICAgICAgICAgICAmbHQ7L3NlbGVjdCZndDsuDQogICAgICAgICZsdDsvcCZndDsNCiAgICAmbHQ7L3F1ZXN0aW9uJmd0Ow0KICAgICZsdDtxdWVzdGlvbiB0eXBlPSJtdWx0aWNob2ljZSImZ3Q7DQogICAgICAgICZsdDtkZXNjcmlwdGlvbiZndDsmbHQ7cCZndDtMb3Mgc2lndWllbnRlcyB0aXBvcyBkZSBwcmVndW50YXMgc29uIGNhbGlmaWNhYmxlcyZsdDsvcCZndDsmbHQ7L2Rlc2NyaXB0aW9uJmd0Ow0KICAgICAgICAmbHQ7dWwmZ3Q7DQogICAgICAgICAgICAmbHQ7bGkgZGF0YS1yZXNwb25zZT0idHJ1ZSImZ3Q7c2ltcGxlY2hvaWNlJmx0Oy9saSZndDsNCiAgICAgICAgICAgICZsdDtsaSBkYXRhLXJlc3BvbnNlPSJ0cnVlIiZndDtjb21wbGV0ZSZsdDsvbGkmZ3Q7DQogICAgICAgICAgICAmbHQ7bGkmZ3Q7bGFiZWwmbHQ7L2xpJmd0Ow0KICAgICAgICAmbHQ7L3VsJmd0Ow0KICAgICZsdDsvcXVlc3Rpb24mZ3Q7DQogICAgJmx0O3F1ZXN0aW9uIHR5cGU9ImRlZmluZXRlcm0iJmd0Ow0KICAgICAgICAmbHQ7ZGVzY3JpcHRpb24mZ3Q7Jmx0O3AmZ3Q7RXNjcmliYSBsYSBhYnJldmlhY2nDs24gZGUgbG9zIHNpZ3VpZW50ZXMgdMOpcm1pbm9zDQogICAgICAgIChubyBlcyBzZW5zaWJsZSBhIG1hecO6c2N1bGFzIG8gbWluw7pzY3VsYXMpJmx0Oy9wJmd0OyZsdDsvZGVzY3JpcHRpb24mZ3Q7DQogICAgICAgICZsdDt1bCZndDsNCiAgICAgICAgICAgICZsdDtsaSBkYXRhLXJlc3BvbnNlPSJPVkEiJmd0O09iamV0b3MgdmlydHVhbGVzIGRlIGFwcmVuZGl6YWplJmx0Oy9saSZndDsNCiAgICAgICAgICAgICZsdDtsaSBkYXRhLXJlc3BvbnNlPSJSRURBIiZndDtSZWN1cnNvcyBlZHVjYXRpdm9zIGRpZ2l0YWxlcyBhYmllcnRvcyZsdDsvbGkmZ3Q7DQogICAgICAgICZsdDsvdWwmZ3Q7DQogICAgJmx0Oy9xdWVzdGlvbiZndDsNCiAgICAmbHQ7cXVlc3Rpb24gdHlwZT0ibXVsdGlzZXRjaG9pY2UiJmd0Ow0KICAgICAgICAmbHQ7ZGVzY3JpcHRpb24mZ3Q7Jmx0O3AmZ3Q7U2VsZWNjaW9uZSBzb2xhbWVudGUgbG9zIHBhcmVzIG8gbG9zIGltcGFyZXMmbHQ7L3AmZ3Q7Jmx0Oy9kZXNjcmlwdGlvbiZndDsNCiAgICAgICAgJmx0O3VsJmd0Ow0KICAgICAgICAgICAgJmx0O2xpIGRhdGEtcmVzcG9uc2U9IjEiJmd0OzEmbHQ7L2xpJmd0Ow0KICAgICAgICAgICAgJmx0O2xpIGRhdGEtcmVzcG9uc2U9IjIiJmd0OzImbHQ7L2xpJmd0Ow0KICAgICAgICAgICAgJmx0O2xpIGRhdGEtcmVzcG9uc2U9IjIiJmd0OzYmbHQ7L2xpJmd0Ow0KICAgICAgICAgICAgJmx0O2xpIGRhdGEtcmVzcG9uc2U9IjEiJmd0OzMmbHQ7L2xpJmd0Ow0KICAgICAgICAgICAgJmx0O2xpIGRhdGEtcmVzcG9uc2U9IjEiJmd0OzkmbHQ7L2xpJmd0Ow0KICAgICAgICAmbHQ7L3VsJmd0Ow0KICAgICZsdDsvcXVlc3Rpb24mZ3Q7DQogICAgJmx0O2ZlZWRiYWNrJmd0Ow0KICAgICAgICAmbHQ7d3JvbmcmZ3Q7Tm8gZXMgY29ycmVjdG8sIGVzIHByZWNpc28gcXVlIHJldmlzZSBzdSByZXNwdWVzdGEuJmx0Oy93cm9uZyZndDsNCiAgICAmbHQ7L2ZlZWRiYWNrJmd0Ow0KJmx0Oy9kaXYmZ3Q7DQo8L3ByZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHQ+Q1NTIHBlcnNvbmFsaXphZG88L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZD4NCjxwcmU+DQojaWRfc3VicGFnaW5hIC5qcGl0X2FjdGl2aXRpZXNfcXVpel9xdWVzdGlvbl9hbnN3ZXJzIHsgaGVpZ2h0OiAxNTBweDsgb3ZlcmZsb3c6IGF1dG87IH0NCiNpZF9zdWJwYWdpbmEgLmpwaXRfYWN0aXZpdGllc19xdWl6X2JvYXJkIHsgaGVpZ2h0OiAyMjBweDsgfQ0KPC9wcmU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPlNvcGEgZGUgbGV0cmFzPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBVbmEgc29wYSBkZSBsZXRyYXMgc2UgZGVmaW5lIGFncmVnYW5kbyBsYSBjbGFzZSA8ZW0+anBpdC1hY3Rpdml0aWVzLXdvcmRwdXp6bGU8L2VtPiBhIHVuIGNvbnRlbmVkb3IgeSBkZW50cm8gZGUgw6lsIGFncmVnYW5kbyB1biBlbGVtZW50byA8ZW0+bGV0dGVyczwvZW0+IGNvbXB1ZXN0byBwb3IgZWxlbWVudG9zIGRlIHRpcG8gPGVtPnJvdzwvZW0+IGNvbiBsYXMgbGV0cmFzIHF1ZSBjb21wb25lbiB1bmEgZmlsYSBzZXBhcmFkYXMgZW50cmUgZWxsYXMgcG9yIHVuYSBjb21hLiBBZGljaW9uYWxtZW50ZSwgc2UgZGViZSBhZ3JlZ2FyIHVuIGNvbnRlbmVkb3IgY29uIGxhIGNsYXNlIDxlbT53b3JkczwvZW0+IHkgZW4gZWwgaW50ZXJpb3IgZGUgw6lsIGVsZW1lbnRvcyBkZSB0aXBvIDxlbT5saTwvZW0+IGNvbiBlbCBhdHJpYnV0byA8ZW0+ZGF0YS10ZXJtPC9lbT4gcXVlIGRlYmUgY29udGVuZXIgbGEgcGFsYWJyYSBhIGJ1c2Nhci4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJob3Jpem9udGFsLW1lbnUgcGFnLWFjdGl2aWRhZGVzLXNvcGEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdD5FamVtcGxvPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imluc3RydWN0aW9uIj5TZWxlY2Npb25lIGVsIGNvbmNlcHRvIDxzcGFuIGNsYXNzPSJub3Rtb2JpbGUiPmEgbGEgZGVyZWNoYTwvc3Bhbj48c3BhbiBjbGFzcz0ib25seW1vYmlsZSI+ZW4gbGEgcGFydGUgZGUgYWJham88L3NwYW4+IHkgbHVlZ28gYsO6c3F1ZSBsYSBwYWxhYnJhIHF1ZSBsZSBjb3JyZXNwb25kZSBlbiBsYSBzb3BhIGRlIGxldHJhcy48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ianBpdC1hY3Rpdml0aWVzLXdvcmRwdXp6bGUiIGRhdGEtYWN0LWlkPSIyX3NvcGFkZWxldHJhcyIgPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxldHRlcnM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJvdz5DLE8sTSxNLE8sTixTLFUsVCxOLFUsQixVPC9yb3c+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJvdz5PLE4sQyxPLEwsTyxNLEIsTCxBLE4sSSxCPC9yb3c+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJvdz5NLFcsVCxOLEksRSxCLEksUixYLEEsVixVPC9yb3c+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJvdz5NLFUsRCxVLE4sQyxOLMORLEksQSxNLEEsTjwvcm93Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyb3c+TyxSLFksVCxVLFUsRCxHLFMsSixSLEQsVDwvcm93Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyb3c+TixFLFQsVSxYLFUsTixJLEwsSSxMLEssVTwvcm93Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyb3c+UyxBLE8sWCxBLFAsRSxGLEUsSCxHLFAsTDwvcm93Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyb3c+TyxQLEUsTixFLFAsTyxHLFIsQSxFLEwsRzwvcm93Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sZXR0ZXJzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id29yZHMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5CdXNjYSB5IGFwcmVuZGU8L2g1Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGVybT0iZ3BsIj5HZW5lcmFsIHB1YmxpYyBsaWNlbnNlPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGVybT0idHV4Ij5FbCBwaW5nw7xpbm8gbGlicmU8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10ZXJtPSJjb21tb25zIj5DcmVhdGl2ZS4uLjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRlcm09Im9wZW4iPkxpYnJlIC0gQWJpZXJ0bzwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRlcm09InVidW50dSI+U08gZGlyZWN0byBkZXNkZSDDgWZyaWNhPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGVybT0ibGludXgiPkVsIGtlcm5lbCBsaWJyZTwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHQ+SFRNTDwvZHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRkPg0KPHByZT4NCiZsdDtkaXYgY2xhc3M9ImpwaXQtYWN0aXZpdGllcy13b3JkcHV6emxlIiBkYXRhLWFjdC1pZD0iMl9zb3BhZGVsZXRyYXMiICZndDsNCiAgICAmbHQ7bGV0dGVycyZndDsNCiAgICAgICAgJmx0O3JvdyZndDtDLE8sTSxNLE8sTixTLFUsVCxOLFUsQixVJmx0Oy9yb3cmZ3Q7DQogICAgICAgICZsdDtyb3cmZ3Q7TyxOLEMsTyxMLE8sTSxCLEwsQSxOLEksQiZsdDsvcm93Jmd0Ow0KICAgICAgICAmbHQ7cm93Jmd0O00sVyxULE4sSSxFLEIsSSxSLFgsQSxWLFUmbHQ7L3JvdyZndDsNCiAgICAgICAgJmx0O3JvdyZndDtNLFUsRCxVLE4sQyxOLMORLEksQSxNLEEsTiZsdDsvcm93Jmd0Ow0KICAgICAgICAmbHQ7cm93Jmd0O08sUixZLFQsVSxVLEQsRyxTLEosUixELFQmbHQ7L3JvdyZndDsNCiAgICAgICAgJmx0O3JvdyZndDtOLEUsVCxVLFgsVSxOLEksTCxJLEwsSyxVJmx0Oy9yb3cmZ3Q7DQogICAgICAgICZsdDtyb3cmZ3Q7UyxBLE8sWCxBLFAsRSxGLEUsSCxHLFAsTCZsdDsvcm93Jmd0Ow0KICAgICAgICAmbHQ7cm93Jmd0O08sUCxFLE4sRSxQLE8sRyxSLEEsRSxMLEcmbHQ7L3JvdyZndDsNCiAgICAmbHQ7L2xldHRlcnMmZ3Q7DQogICAgJmx0O2RpdiBjbGFzcz0id29yZHMiJmd0Ow0KICAgICAgICAmbHQ7aDUmZ3Q7QnVzY2EgeSBhcHJlbmRlJmx0Oy9oNSZndDsNCiAgICAgICAgJmx0O3VsJmd0Ow0KICAgICAgICAgICAgJmx0O2xpIGRhdGEtdGVybT0iZ3BsIiZndDtHZW5lcmFsIHB1YmxpYyBsaWNlbnNlJmx0Oy9saSZndDsNCiAgICAgICAgICAgICZsdDtsaSBkYXRhLXRlcm09InR1eCImZ3Q7RWwgcGluZ8O8aW5vIGxpYnJlJmx0Oy9saSZndDsNCiAgICAgICAgICAgICZsdDtsaSBkYXRhLXRlcm09ImNvbW1vbnMiJmd0O0NyZWF0aXZlLi4uJmx0Oy9saSZndDsNCiAgICAgICAgICAgICZsdDtsaSBkYXRhLXRlcm09Im9wZW4iJmd0O0xpYnJlIC0gQWJpZXJ0byZsdDsvbGkmZ3Q7DQogICAgICAgICAgICAmbHQ7bGkgZGF0YS10ZXJtPSJ1YnVudHUiJmd0O1NPIGRpcmVjdG8gZGVzZGUgw4FmcmljYSZsdDsvbGkmZ3Q7DQogICAgICAgICAgICAmbHQ7bGkgZGF0YS10ZXJtPSJsaW51eCImZ3Q7RWwga2VybmVsIGxpYnJlJmx0Oy9saSZndDsNCiAgICAgICAgJmx0Oy91bCZndDsNCiAgICAmbHQ7L2RpdiZndDsNCiZsdDsvZGl2Jmd0Ow0KPC9wcmU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFnZSI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiIGlkPSJhY3RpdmlkYWRlc19tZW1vcnkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGgyPkFjdGl2aWRhZCBOby4xNi4gQ29uY8OpbnRyZXNlPC9oMj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5JbnRlbmNpb25hbGlkYWQgcGVkYWfDs2dpY2EgeSBkaWTDoWN0aWNhPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwPkVzdGUgZWplcmNpY2lvIGRlYmUgbWVqb3JhciBsb3MgcHJvY2Vzb3MgZGUgYXByZWhlbnNpw7NuIGRlIHVuYSB0ZW3DoXRpY2EgZXNwZWPDrWZpY2EgeSBlamVyY2l0YXIgbGEgbWVtb3JpYSBvcGVyYXRpdmEuPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGgzPk9iamV0aXZvPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwPkZhY2lsaXRhciBlbCBhcHJlbmRpemFqZSwgYSB0cmF2w6lzIGRlIGxhIHByZWNpc2nDs24sIGVuIGVsIHVzbyBkZSBkZXRlcm1pbmFkb3MgY29uY2VwdG9zLjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5JbnN0cnVjY2nDs248L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHA+RXMgdW5hIHRhYmxhIG8gbWF0cml6IGRlIGltw6FnZW5lcyBvY3VsdGFzLCBsYXMgY3VhbGVzIHNlIGRlYmVuIGlyIGRlc2N1YnJpZW5kbyBlbiBwYXJlcywgbGFzIGltw6FnZW5lcyByZXBldGlkYXMsIGRlIHRhbCBmb3JtYSBxdWUgc2kgaGF5YW1vcyB1bmEgaW1hZ2VuIHJlcGV0aWRhLCBsYXMgZG9zIGltw6FnZW5lcyBxdWVkYXJhbiBhbCBkZXNjdWJpZXJ0bywgc2kgbGFzIGltw6FnZW5lcyBubyBzb24gaWd1YWxlcywgbGFzIGRvcyBpbcOhZ2VuZXMgdm9sdmVyw6FuIGEgZXNjb25kZXJzZS4gPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94X2Nvbm5lY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkEgY29udGludWFjacOzbiBlbmNvbnRyYXLDoSBhIG1hbmVyYSBkZSBlamVtcGxvIGxhIGltcGxlbWVudGFjacOzbiBkZSBsYSBhY3RpdmlkYWQgY29uY8OpbnRyZXNlLjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwaXQtYWN0aXZpdGllcy1tZW1vcnkiIGRhdGEtYWN0LWlkPSJtZW1vcnkiIGRhdGEtYWN0LXRpdGxlPSJDb25jw6ludHJlc2UiIGRhdGEtY292ZXItYmFjaz0iaW1nL2NvdmVyLWJhY2sucG5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWdyb3VwLW1hdGNoPSIzIiBkYXRhLWZpcnN0PSJ0cnVlIiBkYXRhLWNvdmVyLWZvcndhcmQ9ImNvbnRlbnQvaW1nNi5wbmciPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWdyb3VwLW1hdGNoPSIxIiBkYXRhLWZpcnN0PSJ0cnVlIiBkYXRhLWNvdmVyLWZvcndhcmQ9ImNvbnRlbnQvaW1nNS5wbmciIGRhdGEtY29udGVudD0iI21lbW9yeV93aW5kb3dfMiI+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtZ3JvdXAtbWF0Y2g9IjIiIGRhdGEtZmlyc3Q9InRydWUiIGRhdGEtY292ZXItZm9yd2FyZD0iY29udGVudC9pbWc4LnBuZyIgZGF0YS1jb250ZW50PSIjbWVtb3J5X3dpbmRvd18zIj48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1ncm91cC1tYXRjaD0iNCIgZGF0YS1maXJzdD0idHJ1ZSIgZGF0YS1jb3Zlci1mb3J3YXJkPSJjb250ZW50L2ltZzcucG5nIiBkYXRhLWNvbnRlbnQ9IiNtZW1vcnlfd2luZG93XzQiPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWdyb3VwLW1hdGNoPSI4IiBkYXRhLWZpcnN0PSJ0cnVlIiBkYXRhLWNvdmVyLWZvcndhcmQ9ImNvbnRlbnQvaW1nNC5wbmciIGRhdGEtY29udGVudD0iI21lbW9yeV93aW5kb3dfOCI+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtZ3JvdXAtbWF0Y2g9IjUiIGRhdGEtZmlyc3Q9InRydWUiIGRhdGEtY292ZXItZm9yd2FyZD0iY29udGVudC9pbWcxLnBuZyIgZGF0YS1jb250ZW50PSIjbWVtb3J5X3dpbmRvd181Ij48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1ncm91cC1tYXRjaD0iNiIgZGF0YS1maXJzdD0idHJ1ZSIgZGF0YS1jb3Zlci1mb3J3YXJkPSJjb250ZW50L2ltZzIucG5nIiBkYXRhLWNvbnRlbnQ9IiNtZW1vcnlfd2luZG93XzYiPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWdyb3VwLW1hdGNoPSI3IiBkYXRhLWZpcnN0PSJ0cnVlIiBkYXRhLWNvdmVyLWZvcndhcmQ9ImNvbnRlbnQvaW1nMy5wbmciIGRhdGEtY29udGVudD0iI21lbW9yeV93aW5kb3dfNyI+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtZ3JvdXAtbWF0Y2g9IjQiIGRhdGEtZmlyc3Q9ImZhbHNlIiBkYXRhLWNvdmVyLWZvcndhcmQ9ImNvbnRlbnQvaW1nNy5wbmciIGRhdGEtY29udGVudD0iI21lbW9yeV93aW5kb3dfNCI+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtZ3JvdXAtbWF0Y2g9IjUiIGRhdGEtZmlyc3Q9ImZhbHNlIiBkYXRhLWNvdmVyLWZvcndhcmQ9ImNvbnRlbnQvaW1nMS5wbmciIGRhdGEtY29udGVudD0iI21lbW9yeV93aW5kb3dfNSI+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtZ3JvdXAtbWF0Y2g9IjMiIGRhdGEtZmlyc3Q9ImZhbHNlIiBkYXRhLWNvdmVyLWZvcndhcmQ9ImNvbnRlbnQvaW1nNi5wbmciPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWdyb3VwLW1hdGNoPSI2IiBkYXRhLWZpcnN0PSJmYWxzZSIgZGF0YS1jb3Zlci1mb3J3YXJkPSJjb250ZW50L2ltZzIucG5nIiBkYXRhLWNvbnRlbnQ9IiNtZW1vcnlfd2luZG93XzYiPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWdyb3VwLW1hdGNoPSIyIiBkYXRhLWZpcnN0PSJmYWxzZSIgZGF0YS1jb3Zlci1mb3J3YXJkPSJjb250ZW50L2ltZzgucG5nIiBkYXRhLWNvbnRlbnQ9IiNtZW1vcnlfd2luZG93XzMiPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWdyb3VwLW1hdGNoPSI3IiBkYXRhLWZpcnN0PSJmYWxzZSIgZGF0YS1jb3Zlci1mb3J3YXJkPSJjb250ZW50L2ltZzMucG5nIiBkYXRhLWNvbnRlbnQ9IiNtZW1vcnlfd2luZG93XzciPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWdyb3VwLW1hdGNoPSIxIiBkYXRhLWZpcnN0PSJmYWxzZSIgZGF0YS1jb3Zlci1mb3J3YXJkPSJjb250ZW50L2ltZzUucG5nIiBkYXRhLWNvbnRlbnQ9IiNtZW1vcnlfd2luZG93XzIiPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWdyb3VwLW1hdGNoPSI4IiBkYXRhLWZpcnN0PSJmYWxzZSIgZGF0YS1jb3Zlci1mb3J3YXJkPSJjb250ZW50L2ltZzQucG5nIiBkYXRhLWNvbnRlbnQ9IiNtZW1vcnlfd2luZG93XzgiPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJtZW1vcnlfd2luZG93XzIiIGNsYXNzPSJ3LWNvbnRlbnQiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PHA+Mi4gIU11eSBiaWVuISAgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gRHVpcyBzY2VsZXJpc3F1ZSBlbmltIGV1IG1hdXJpcyBtYXR0aXMgY29udmFsbGlzLiBDdXJhYml0dXIgYSBsZWN0dXMgYSB0dXJwaXMgbGFvcmVldCBtYXR0aXMgaW4gZXUgcXVhbS4gU2VkIGV1IHR1cnBpcyBxdWlzIGRvbG9yIGN1cnN1cyByaG9uY3VzLiBQcmFlc2VudCBsYWNpbmlhIHZpdmVycmEgbmlzbCBxdWlzIGFsaXF1YW0uIE5hbSBxdWlzIGRpZ25pc3NpbSBsYWN1cywgZXQgYmliZW5kdW0gcmlzdXMuIEZ1c2NlIHN1c2NpcGl0IG5vbiBlcmF0IHZlaGljdWxhIGF1Y3Rvci4gVmVzdGlidWx1bSBlbmltIHRvcnRvciwgdmVuZW5hdGlzIHZlbCBuaXNsIHNlZCwgdmFyaXVzIHVsdHJpY2VzIGxvcmVtLiBQcm9pbiBldSBmZXJtZW50dW0gbGVjdHVzLiBTdXNwZW5kaXNzZSBjb252YWxsaXMgZXN0IGEgY29tbW9kbyB1bGxhbWNvcnBlci48L3A+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ibWVtb3J5X3dpbmRvd18zIiBjbGFzcz0idy1jb250ZW50IiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjxwPjMuICFNdXkgYmllbiEgIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIER1aXMgc2NlbGVyaXNxdWUgZW5pbSBldSBtYXVyaXMgbWF0dGlzIGNvbnZhbGxpcy4gQ3VyYWJpdHVyIGEgbGVjdHVzIGEgdHVycGlzIGxhb3JlZXQgbWF0dGlzIGluIGV1IHF1YW0uIFNlZCBldSB0dXJwaXMgcXVpcyBkb2xvciBjdXJzdXMgcmhvbmN1cy4gUHJhZXNlbnQgbGFjaW5pYSB2aXZlcnJhIG5pc2wgcXVpcyBhbGlxdWFtLiBOYW0gcXVpcyBkaWduaXNzaW0gbGFjdXMsIGV0IGJpYmVuZHVtIHJpc3VzLiBGdXNjZSBzdXNjaXBpdCBub24gZXJhdCB2ZWhpY3VsYSBhdWN0b3IuIFZlc3RpYnVsdW0gZW5pbSB0b3J0b3IsIHZlbmVuYXRpcyB2ZWwgbmlzbCBzZWQsIHZhcml1cyB1bHRyaWNlcyBsb3JlbS4gUHJvaW4gZXUgZmVybWVudHVtIGxlY3R1cy4gU3VzcGVuZGlzc2UgY29udmFsbGlzIGVzdCBhIGNvbW1vZG8gdWxsYW1jb3JwZXIuPC9wPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Im1lbW9yeV93aW5kb3dfNCIgY2xhc3M9InctY29udGVudCIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48cD40LiAhTXV5IGJpZW4hICBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBEdWlzIHNjZWxlcmlzcXVlIGVuaW0gZXUgbWF1cmlzIG1hdHRpcyBjb252YWxsaXMuIEN1cmFiaXR1ciBhIGxlY3R1cyBhIHR1cnBpcyBsYW9yZWV0IG1hdHRpcyBpbiBldSBxdWFtLiBTZWQgZXUgdHVycGlzIHF1aXMgZG9sb3IgY3Vyc3VzIHJob25jdXMuIFByYWVzZW50IGxhY2luaWEgdml2ZXJyYSBuaXNsIHF1aXMgYWxpcXVhbS4gTmFtIHF1aXMgZGlnbmlzc2ltIGxhY3VzLCBldCBiaWJlbmR1bSByaXN1cy4gRnVzY2Ugc3VzY2lwaXQgbm9uIGVyYXQgdmVoaWN1bGEgYXVjdG9yLiBWZXN0aWJ1bHVtIGVuaW0gdG9ydG9yLCB2ZW5lbmF0aXMgdmVsIG5pc2wgc2VkLCB2YXJpdXMgdWx0cmljZXMgbG9yZW0uIFByb2luIGV1IGZlcm1lbnR1bSBsZWN0dXMuIFN1c3BlbmRpc3NlIGNvbnZhbGxpcyBlc3QgYSBjb21tb2RvIHVsbGFtY29ycGVyLjwvcD48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJtZW1vcnlfd2luZG93XzUiIGNsYXNzPSJ3LWNvbnRlbnQiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PHA+NS4gIU11eSBiaWVuISAgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gRHVpcyBzY2VsZXJpc3F1ZSBlbmltIGV1IG1hdXJpcyBtYXR0aXMgY29udmFsbGlzLiBDdXJhYml0dXIgYSBsZWN0dXMgYSB0dXJwaXMgbGFvcmVldCBtYXR0aXMgaW4gZXUgcXVhbS4gU2VkIGV1IHR1cnBpcyBxdWlzIGRvbG9yIGN1cnN1cyByaG9uY3VzLiBQcmFlc2VudCBsYWNpbmlhIHZpdmVycmEgbmlzbCBxdWlzIGFsaXF1YW0uIE5hbSBxdWlzIGRpZ25pc3NpbSBsYWN1cywgZXQgYmliZW5kdW0gcmlzdXMuIEZ1c2NlIHN1c2NpcGl0IG5vbiBlcmF0IHZlaGljdWxhIGF1Y3Rvci4gVmVzdGlidWx1bSBlbmltIHRvcnRvciwgdmVuZW5hdGlzIHZlbCBuaXNsIHNlZCwgdmFyaXVzIHVsdHJpY2VzIGxvcmVtLiBQcm9pbiBldSBmZXJtZW50dW0gbGVjdHVzLiBTdXNwZW5kaXNzZSBjb252YWxsaXMgZXN0IGEgY29tbW9kbyB1bGxhbWNvcnBlci48L3A+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ibWVtb3J5X3dpbmRvd182IiBjbGFzcz0idy1jb250ZW50IiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjxwPjYuICFNdXkgYmllbiEgIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIER1aXMgc2NlbGVyaXNxdWUgZW5pbSBldSBtYXVyaXMgbWF0dGlzIGNvbnZhbGxpcy4gQ3VyYWJpdHVyIGEgbGVjdHVzIGEgdHVycGlzIGxhb3JlZXQgbWF0dGlzIGluIGV1IHF1YW0uIFNlZCBldSB0dXJwaXMgcXVpcyBkb2xvciBjdXJzdXMgcmhvbmN1cy4gUHJhZXNlbnQgbGFjaW5pYSB2aXZlcnJhIG5pc2wgcXVpcyBhbGlxdWFtLiBOYW0gcXVpcyBkaWduaXNzaW0gbGFjdXMsIGV0IGJpYmVuZHVtIHJpc3VzLiBGdXNjZSBzdXNjaXBpdCBub24gZXJhdCB2ZWhpY3VsYSBhdWN0b3IuIFZlc3RpYnVsdW0gZW5pbSB0b3J0b3IsIHZlbmVuYXRpcyB2ZWwgbmlzbCBzZWQsIHZhcml1cyB1bHRyaWNlcyBsb3JlbS4gUHJvaW4gZXUgZmVybWVudHVtIGxlY3R1cy4gU3VzcGVuZGlzc2UgY29udmFsbGlzIGVzdCBhIGNvbW1vZG8gdWxsYW1jb3JwZXIuPC9wPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Im1lbW9yeV93aW5kb3dfNyIgY2xhc3M9InctY29udGVudCIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48cD43LiAhTXV5IGJpZW4hICBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBEdWlzIHNjZWxlcmlzcXVlIGVuaW0gZXUgbWF1cmlzIG1hdHRpcyBjb252YWxsaXMuIEN1cmFiaXR1ciBhIGxlY3R1cyBhIHR1cnBpcyBsYW9yZWV0IG1hdHRpcyBpbiBldSBxdWFtLiBTZWQgZXUgdHVycGlzIHF1aXMgZG9sb3IgY3Vyc3VzIHJob25jdXMuIFByYWVzZW50IGxhY2luaWEgdml2ZXJyYSBuaXNsIHF1aXMgYWxpcXVhbS4gTmFtIHF1aXMgZGlnbmlzc2ltIGxhY3VzLCBldCBiaWJlbmR1bSByaXN1cy4gRnVzY2Ugc3VzY2lwaXQgbm9uIGVyYXQgdmVoaWN1bGEgYXVjdG9yLiBWZXN0aWJ1bHVtIGVuaW0gdG9ydG9yLCB2ZW5lbmF0aXMgdmVsIG5pc2wgc2VkLCB2YXJpdXMgdWx0cmljZXMgbG9yZW0uIFByb2luIGV1IGZlcm1lbnR1bSBsZWN0dXMuIFN1c3BlbmRpc3NlIGNvbnZhbGxpcyBlc3QgYSBjb21tb2RvIHVsbGFtY29ycGVyLjwvcD48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJtZW1vcnlfd2luZG93XzgiIGNsYXNzPSJ3LWNvbnRlbnQiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PHA+OC4gIU11eSBiaWVuISAgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gRHVpcyBzY2VsZXJpc3F1ZSBlbmltIGV1IG1hdXJpcyBtYXR0aXMgY29udmFsbGlzLiBDdXJhYml0dXIgYSBsZWN0dXMgYSB0dXJwaXMgbGFvcmVldCBtYXR0aXMgaW4gZXUgcXVhbS4gU2VkIGV1IHR1cnBpcyBxdWlzIGRvbG9yIGN1cnN1cyByaG9uY3VzLiBQcmFlc2VudCBsYWNpbmlhIHZpdmVycmEgbmlzbCBxdWlzIGFsaXF1YW0uIE5hbSBxdWlzIGRpZ25pc3NpbSBsYWN1cywgZXQgYmliZW5kdW0gcmlzdXMuIEZ1c2NlIHN1c2NpcGl0IG5vbiBlcmF0IHZlaGljdWxhIGF1Y3Rvci4gVmVzdGlidWx1bSBlbmltIHRvcnRvciwgdmVuZW5hdGlzIHZlbCBuaXNsIHNlZCwgdmFyaXVzIHVsdHJpY2VzIGxvcmVtLiBQcm9pbiBldSBmZXJtZW50dW0gbGVjdHVzLiBTdXNwZW5kaXNzZSBjb252YWxsaXMgZXN0IGEgY29tbW9kbyB1bGxhbWNvcnBlci48L3A+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIGNsYXNzPSJjbGVhciIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3hfZW5kIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+Q3J1Y2lncmFtYTwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgVW5hIGNydWNpZ3JhbWEgc2UgZGVmaW5lIGFncmVnYW5kbyBsYSBjbGFzZSA8ZW0+anBpdC1hY3Rpdml0aWVzLWNyb3Nzd29yZDwvZW0+IGEgdW4gY29udGVuZWRvciB5IGRlbnRybyBkZSDDqWwgYWdyZWdhbmRvIGRvcyBlbGVtZW50b3M6IDxlbT5ob3Jpem9udGFsPC9lbT4geSA8ZW0+dmVydGljYWw8L2VtPjsgeSBlbiBlbCBpbnRlcmlvciBkZSBlbGxvcyB1bmEgbGlzdGEgZGUgZWxlbWVudG9zIGRlIHRpcG8gPGVtPmxpPC9lbT4gY29uIGVsIGF0cmlidXRvIDxlbT5kYXRhLXRlcm08L2VtPiBxdWUgZGViZSBjb250ZW5lciBsYSBwYWxhYnJhIGNvcnJlY3RhLCBlbCBhdHJpYnV0byA8ZW0+ZGF0YS1yb3c8L2VtPiBjb24gZWwgbsO6bWVybyBkZSBsYSBmaWxhIHkgZWwgYXRyaWJ1dG8gPGVtPmRhdGEtY29sPC9lbT4gY29uIGVsIG7Dum1lcm8gZGUgbGEgY29sdW1uYSBkZXNkZSBkb25kZSBpbmljaWEgbGEgcGFsYWJyYS4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJob3Jpem9udGFsLW1lbnUgcGFnLWFjdGl2aWRhZGVzLWNydWNpZ3JhbWEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdD5FamVtcGxvPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImpwaXQtYWN0aXZpdGllcy1jcm9zc3dvcmQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhvcml6b250YWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtcm93PSIyIiBkYXRhLWNvbD0iMCIgZGF0YS10ZXJtPSJhYWFhIj40IHZlY2VzIGxhIGE8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXJvdz0iMiIgZGF0YS1jb2w9IjciIGRhdGEtdGVybT0ibWFtYSI+TGEgbWFkcmU8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXJvdz0iNCIgZGF0YS1jb2w9IjMiIGRhdGEtdGVybT0ic2FiYWRvIj5BbnRlcyBkZWwgZG9taW5nbzwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtcm93PSI2IiBkYXRhLWNvbD0iMSIgZGF0YS10ZXJtPSJjaW5jbyI+NTwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtcm93PSI5IiBkYXRhLWNvbD0iMSIgZGF0YS10ZXJtPSJqb3RhIGpvdGEiPmpqPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaG9yaXpvbnRhbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2ZXJ0aWNhbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1yb3c9IjAiIGRhdGEtY29sPSI0IiBkYXRhLXRlcm09ImNhZXMiPlZhcyBwYXJhIGVsIHN1ZWxvPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1yb3c9IjAiIGRhdGEtY29sPSI5IiBkYXRhLXRlcm09ImxhZG8iPlF1ZWRhIGEgdW4gY29zdGFkbzwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtcm93PSI1IiBkYXRhLWNvbD0iNSIgZGF0YS10ZXJtPSJjb21hIj4sPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdmVydGljYWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2RsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdD5IVE1MPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQ+DQo8cHJlPg0KJmx0O2RpdiBjbGFzcz0ianBpdC1hY3Rpdml0aWVzLWNyb3Nzd29yZCImZ3Q7DQogICAgJmx0O2hvcml6b250YWwmZ3Q7DQogICAgICAgICZsdDtsaSBkYXRhLXJvdz0iMiIgZGF0YS1jb2w9IjAiIGRhdGEtdGVybT0iYWFhYSImZ3Q7NCB2ZWNlcyBsYSBhJmx0Oy9saSZndDsNCiAgICAgICAgJmx0O2xpIGRhdGEtcm93PSIyIiBkYXRhLWNvbD0iNyIgZGF0YS10ZXJtPSJtYW1hIiZndDtMYSBtYWRyZSZsdDsvbGkmZ3Q7DQogICAgICAgICZsdDtsaSBkYXRhLXJvdz0iNCIgZGF0YS1jb2w9IjMiIGRhdGEtdGVybT0ic2FiYWRvIiZndDtBbnRlcyBkZWwgZG9taW5nbyZsdDsvbGkmZ3Q7DQogICAgICAgICZsdDtsaSBkYXRhLXJvdz0iNiIgZGF0YS1jb2w9IjEiIGRhdGEtdGVybT0iY2luY28iJmd0OzUmbHQ7L2xpJmd0Ow0KICAgICAgICAmbHQ7bGkgZGF0YS1yb3c9IjkiIGRhdGEtY29sPSIxIiBkYXRhLXRlcm09ImpvdGEgam90YSImZ3Q7amombHQ7L2xpJmd0Ow0KICAgICZsdDsvaG9yaXpvbnRhbCZndDsNCiAgICAmbHQ7dmVydGljYWwmZ3Q7DQogICAgICAgICZsdDtsaSBkYXRhLXJvdz0iMCIgZGF0YS1jb2w9IjQiIGRhdGEtdGVybT0iY2FlcyImZ3Q7VmFzIHBhcmEgZWwgc3VlbG8mbHQ7L2xpJmd0Ow0KICAgICAgICAmbHQ7bGkgZGF0YS1yb3c9IjAiIGRhdGEtY29sPSI5IiBkYXRhLXRlcm09ImxhZG8iJmd0O1F1ZWRhIGEgdW4gY29zdGFkbyZsdDsvbGkmZ3Q7DQogICAgICAgICZsdDtsaSBkYXRhLXJvdz0iNSIgZGF0YS1jb2w9IjUiIGRhdGEtdGVybT0iY29tYSImZ3Q7LCZsdDsvbGkmZ3Q7DQogICAgJmx0Oy92ZXJ0aWNhbCZndDsNCiZsdDsvZGl2Jmd0Ow0KPC9wcmU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSIgaWQ9InBhZy1hY3RpdmlkYWRlcy1hcnJhc3RyYXIyIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPkNvbXBsZXRhciAtIE3Dumx0aXBsZXMgb3BjaW9uZXM8L2gzPg0KICAgICAgICAgICAgICAgICAgICA8cD5VbmEgYWN0aXZpZGFkIGRlIGFycmFzdHJhciBzZSBkZWZpbmUgYWdyZWdhbmRvIGxhIGNsYXNlIDxlbT5qcGl0LWFjdGl2aXRpZXMtZHJvcHBhYmxlPC9lbT4gYSB1biBjb250ZW5lZG9yIHkgZGVudHJvIGRlIMOpbCBkZWZpbmllbmRvIHVuIGNvbnRlbmlkbyBIVE1MIHRlbmllbmRvIGVuIGN1ZW50YTogZGVmaW5pciBsb3Mgb3LDrWdlbmVzIG1hcmNhbmRvIGVsZW1lbnRvcyBjb24gbGEgY2xhc2UgPGVtPmRhdGEtZ3JvdXA8L2VtPiBjdXlvIHZhbG9yIHNlcsOhIGVsIG7Dum1lcm8gZGVsIGdydXBvIGFsIHF1ZSBwZXJ0ZW5lY2UgZWwgZWxlbWVudG8geSBkZWZpbmlyIGxvcyBkZXN0aW5vcyBtYXJjYW5kbyBlbGVtZW50b3MgY29uIGVsIGF0cmlidXRvIDxlbT5kYXRhLXRhcmdldC1ncm91cDwvZW0+IGN1eW8gdmFsb3Igc2Vyw6EgZWwgbsO6bWVybyBkZWwgZ3J1cG8gcXVlIGFjZXB0YSBjb21vIGNvcnJlY3RvLjwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+U2kgbGEgYWN0aXZpZGFkIHRpZW5lIG3DoXMgZWxlbWVudG9zIHBhcmEgYXJyYXN0cmFyIHF1ZSBkZXN0aW5vcywgZW50b25jZXMgZGViZSBsbGV2YXIgZWwgYXRyaWJ1dG8gPGVtPmRhdGEtdmVyaWZ5LXR5cGU9InRhcmdldCI8L2VtPi48L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPlNpIGxhIGNhbnRpZGFkIGRlIG9wY2lvbmVzIGNvcnJlY3RhcyBlcyBzdXBlcmlvciBhIGxhIGNhbnRpZGFkIGRlIGRlc3Rpbm9zIGRlYmUgYWdyZWdhcnNlIGVsIGF0cmlidXRvIDxlbT5kYXRhLW11bHRpcGxlLW9wdGlvbnM9InRydWUiPC9lbT4uPC9wPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJqcGl0LWFjdGl2aXRpZXMtZHJvcHBhYmxlIiBkYXRhLXZlcmlmeS10eXBlPSJ0YXJnZXQiIGRhdGEtbXVsdGlwbGUtb3B0aW9ucz0idHJ1ZSIgZGF0YS1hY3QtdGl0bGU9IkFycmFzdHJhciB5IHNvbHRhciBwb3IgZ3J1cG9zIC8gQ2xhc2lmaWNhciIgIGRhdGEtYWN0LWlkPSJkcjBwLWFhNC0wMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94X3BhbmVsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94X3BhbmVsX2FjdGl2aXR5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveF9kcm9wcGFibGUgaW5zdHJ1Y3Rpb24iIGRhdGEtdGFyZ2V0LWdyb3VwPSIxIj5BcnJhc3RyZSBhcXXDrS4uLjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94X2Ryb3BwYWJsZSBpbnN0cnVjdGlvbiIgZGF0YS10YXJnZXQtZ3JvdXA9IjEiPkFycmFzdHJlIGFxdcOtLi4uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3hfZHJvcHBhYmxlIGluc3RydWN0aW9uIiBkYXRhLXRhcmdldC1ncm91cD0iMSI+QXJyYXN0cmUgYXF1w60uLi48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveF9wYW5lbF9hY3Rpdml0eSBkb3duIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1ncm91cD0iMSIgPkd1aXRhcnJhIE55bG9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtZ3JvdXA9IjEiID5HdWl0YXJyYSBFbMOpY3RyaWNhPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtZ3JvdXA9IjMiID5GbGF1dGEgdHJhdmVyc2E8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1ncm91cD0iMSIgPkJham88L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1ncm91cD0iMyIgPlR1YmE8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1ncm91cD0iMSIgPlZpb2zDrW48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1ncm91cD0iMSIgPlZpb2xhPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtZ3JvdXA9IjMiID5BcnBhPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtZ3JvdXA9IjEiID5WaW9sb25jZWxsbzwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWdyb3VwPSIxIiA+Q29udHJhYmFqbzwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWdyb3VwPSIxIiA+UGVyY3VzaW9uZXM8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIGNsYXNzPSJjbGVhciIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3hfZW5kIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSIgaWQ9InBhZy1hY3RpdmlkYWRlcy1hcnJhc3RyYXIxIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPkFycmFzdHJhciB5IHNvbHRhciAtIG1vZG8gYXBhcmVhbWllbnRvPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBVbmEgYWN0aXZpZGFkIGRlIGFycmFzdHJhciBzZSBkZWZpbmUgYWdyZWdhbmRvIGxhIGNsYXNlIDxlbT5qcGl0LWFjdGl2aXRpZXMtZHJvcHBhYmxlPC9lbT4gYSB1biBjb250ZW5lZG9yIHkgZGVudHJvIGRlIMOpbCBkZWZpbmllbmRvIHVuIGNvbnRlbmlkbyBIVE1MIHRlbmllbmRvIGVuIGN1ZW50YTogZGVmaW5pciBsb3Mgb3LDrWdlbmVzIG1hcmNhbmRvIGVsZW1lbnRvcyBjb24gbGEgY2xhc2UgPGVtPmRhdGEtZ3JvdXA8L2VtPiBjdXlvIHZhbG9yIHNlcsOhIGVsIG7Dum1lcm8gZGVsIGdydXBvIGFsIHF1ZSBwZXJ0ZW5lY2UgZWwgZWxlbWVudG8geSBkZWZpbmlyIGxvcyBkZXN0aW5vcyBtYXJjYW5kbyBlbGVtZW50b3MgY29uIGVsIGF0cmlidXRvIDxlbT5kYXRhLXRhcmdldC1nb3J1cDwvZW0+IGN1eW8gdmFsb3Igc2Vyw6EgZWwgbsO6bWVybyBkZWwgZ3J1cG8gcXVlIGFjZXB0YSBjb21vIGNvcnJlY3RvLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgU2kgbGEgYWN0aXZpZGFkIHRpZW5lIG3DoXMgZWxlbWVudG9zIHBhcmEgYXJyYXN0cmFyIHF1ZSBkZXN0aW5vcywgZW50b25jZXMgZGViZSBsbGV2YXIgZWwgYXRyaWJ1dG8gPGVtPmRhdGEtdmVyaWZ5LXR5cGU9InRhcmdldCI8L2VtPi4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imhvcml6b250YWwtbWVudSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0PkVqZW1wbG88L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iYXJyYXN0cmFyMSIgY2xhc3M9ImpwaXQtYWN0aXZpdGllcy1kcm9wcGFibGUiIGRhdGEtdmVyaWZ5LXR5cGU9InRhcmdldCIgZGF0YS1hY3QtaWQ9ImFycmFzdHJhcjEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+Q29tcGxldGUgbG9zIGVzcGFjaW9zIGVuIGJsYW5jbyBjb24gbGFzIGNhcGl0YWxlcyBjb3JyZXNwb25kaWVudGVzLCBkZWwgbGlzdGFkbyBpbmZlcmlvci48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+UmlzYXJhbGRhPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGRhdGEtdGFyZ2V0LWdyb3VwPSIxIj48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+QW50aW9xdWlhPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGRhdGEtdGFyZ2V0LWdyb3VwPSIyIj48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Tm9ydGUgZGUgU2FudGFuZGVyPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGRhdGEtdGFyZ2V0LWdyb3VwPSIzIj48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQ+Q2FwaXRhbGVzOjwvaDQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1ncm91cD0iMiIgY2xhc3M9Iml0ZW1fMSI+TWVkZWxsw61uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWdyb3VwPSI0IiBjbGFzcz0iaXRlbV8yIiA+Qm9nb3TDoTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1ncm91cD0iNCIgY2xhc3M9Iml0ZW1fMyIgPlJpb2FjaGE8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtZ3JvdXA9IjMiIGNsYXNzPSJpdGVtXzQiID5Dw7pjdXRhPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWdyb3VwPSIxIiBjbGFzcz0iaXRlbV81IiA+UGVyZWlyYTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgY2xhc3M9ImNsZWFyIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3hfZW5kIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0PkhUTUw8L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZD4NCjxwcmU+DQombHQ7ZGl2IGlkPSJhcnJhc3RyYXIiIGNsYXNzPSJqcGl0LWFjdGl2aXRpZXMtZHJvcHBhYmxlIiBkYXRhLXZlcmlmeS10eXBlPSJ0YXJnZXQiIGRhdGEtYWN0LWlkPSJhcnJhc3RyYXIxIiZndDsNCiAgICAmbHQ7cCZndDtDb21wbGV0ZSBsb3MgZXNwYWNpb3MgZW4gYmxhbmNvIGNvbiBsYXMgY2FwaXRhbGVzIGNvcnJlc3BvbmRpZW50ZXMsIGRlbCBsaXN0YWRvIGluZmVyaW9yLiZsdDsvcCZndDsNCiAgICAmbHQ7dGFibGUmZ3Q7DQogICAgICAgICZsdDt0ciZndDsNCiAgICAgICAgICAgICZsdDt0aCZndDtSaXNhcmFsZGEmbHQ7L3RoJmd0Ow0KICAgICAgICAgICAgJmx0O3RkIGNsYXNzPSJjb25lY3Rpb24iJmd0OyZsdDtzcGFuIGNsYXNzPSJpY29uX2hvcml6b250YWxfYXJyb3ciJmd0OyZsdDsvc3BhbiZndDsmbHQ7L3RkJmd0Ow0KICAgICAgICAgICAgJmx0O3RkIGRhdGEtdGFyZ2V0LWdyb3VwPSIxIiZndDsmbHQ7L3RkJmd0Ow0KICAgICAgICAmbHQ7L3RyJmd0Ow0KICAgICAgICAmbHQ7dHImZ3Q7DQogICAgICAgICAgICAmbHQ7dGgmZ3Q7QW50aW9xdWlhJmx0Oy90aCZndDsNCiAgICAgICAgICAgICZsdDt0ZCBjbGFzcz0iY29uZWN0aW9uIiZndDsmbHQ7c3BhbiBjbGFzcz0iaWNvbl9ob3Jpem9udGFsX2Fycm93IiZndDsmbHQ7L3NwYW4mZ3Q7Jmx0Oy90ZCZndDsNCiAgICAgICAgICAgICZsdDt0ZCBkYXRhLXRhcmdldC1ncm91cD0iMiImZ3Q7Jmx0Oy90ZCZndDsNCiAgICAgICAgJmx0Oy90ciZndDsNCiAgICAgICAgJmx0O3RyJmd0Ow0KICAgICAgICAgICAgJmx0O3RoJmd0O05vcnRlIGRlIFNhbnRhbmRlciZsdDsvdGgmZ3Q7DQogICAgICAgICAgICAmbHQ7dGQgY2xhc3M9ImNvbmVjdGlvbiImZ3Q7Jmx0O3NwYW4gY2xhc3M9Imljb25faG9yaXpvbnRhbF9hcnJvdyImZ3Q7Jmx0Oy9zcGFuJmd0OyZsdDsvdGQmZ3Q7DQogICAgICAgICAgICAmbHQ7dGQgZGF0YS10YXJnZXQtZ3JvdXA9IjMiJmd0OyZsdDsvdGQmZ3Q7DQogICAgICAgICZsdDsvdHImZ3Q7DQogICAgJmx0Oy90YWJsZSZndDsNCg0KICAgICZsdDtoNCZndDtDYXBpdGFsZXM6Jmx0Oy9oNCZndDsNCiAgICAmbHQ7ZGl2Jmd0Ow0KICAgICAgICAmbHQ7ZGl2IGRhdGEtZ3JvdXA9IjIiIGNsYXNzPSJpdGVtXzEiJmd0O01lZGVsbMOtbiZsdDsvZGl2Jmd0Ow0KICAgICAgICAmbHQ7ZGl2IGRhdGEtZ3JvdXA9IjQiIGNsYXNzPSJpdGVtXzIiICZndDtCb2dvdMOhJmx0Oy9kaXYmZ3Q7DQogICAgICAgICZsdDtkaXYgZGF0YS1ncm91cD0iNCIgY2xhc3M9Iml0ZW1fMyIgJmd0O1Jpb2FjaGEmbHQ7L2RpdiZndDsNCiAgICAgICAgJmx0O2RpdiBkYXRhLWdyb3VwPSIzIiBjbGFzcz0iaXRlbV80IiAmZ3Q7Q8O6Y3V0YSZsdDsvZGl2Jmd0Ow0KICAgICAgICAmbHQ7ZGl2IGRhdGEtZ3JvdXA9IjEiIGNsYXNzPSJpdGVtXzUiICZndDtQZXJlaXJhJmx0Oy9kaXYmZ3Q7DQogICAgJmx0Oy9kaXYmZ3Q7DQogICAgJmx0O2JyIGNsYXNzPSJjbGVhciIgLyZndDsNCg0KICAgICZsdDtkaXYgY2xhc3M9ImJveF9lbmQiJmd0OyZsdDsvZGl2Jmd0Ow0KJmx0Oy9kaXYmZ3Q7DQo8L3ByZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHQ+Q1NTIHBlcnNvbmFsaXphZG88L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZD4NCjxwcmU+DQojYXJyYXN0cmFyLmpwaXQtYWN0aXZpdGllcy1kcm9wcGFibGUgLndvcmRzX2NvbnRhaW5lciB7DQogICAgaGVpZ2h0OiA1MHB4Ow0KfQ0KDQojYXJyYXN0cmFyLmpwaXQtYWN0aXZpdGllcy1kcm9wcGFibGUgdGFibGUgew0KICAgIGVtcHR5LWNlbGxzOiBzaG93Ow0KICAgIGNsZWFyOiBib3RoOw0KfQ0KDQojYXJyYXN0cmFyLmpwaXQtYWN0aXZpdGllcy1kcm9wcGFibGUgdGggew0KICAgIGNvbG9yOiAjMDAwOw0KICAgIHBhZGRpbmc6IDVweDsNCiAgICB0ZXh0LWFsaWduOiByaWdodDsNCn0NCg0KI2FycmFzdHJhci5qcGl0LWFjdGl2aXRpZXMtZHJvcHBhYmxlIHRkLmRyb3BwYWJsZSB7DQogICAgd2lkdGg6IDgwcHg7DQogICAgaGVpZ2h0OiAxNnB4Ow0KfQ0KDQojYXJyYXN0cmFyLmpwaXQtYWN0aXZpdGllcy1kcm9wcGFibGUgdGQuY29uZWN0aW9uIHsNCiAgICB3aWR0aDogMzBweDsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgcGFkZGluZzogNXB4IDEwcHg7DQp9DQoNCiNhcnJhc3RyYXIuanBpdC1hY3Rpdml0aWVzLWRyb3BwYWJsZSAuZHJhZ2dhYmxlIHsNCiAgICBmbG9hdDogbGVmdDsNCiAgICBtYXJnaW46IDAgNXB4IDVweCAwOw0KICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICB3aWR0aDogODBweDsNCn0NCg0KI2FycmFzdHJhciAuaXRlbV8xIHsNCiAgICAgbGVmdDogNTBweDsNCn0NCg0KI2FycmFzdHJhciAuaXRlbV8yIHsNCiAgICAgbGVmdDogMTUwcHg7DQp9DQoNCiNhcnJhc3RyYXIgLml0ZW1fMyB7DQogICAgIGxlZnQ6IDI1MHB4Ow0KfQ0KDQojYXJyYXN0cmFyIC5pdGVtXzQgew0KICAgICBsZWZ0OiAzNTBweDsNCn0NCg0KI2FycmFzdHJhciAuaXRlbV81IHsNCiAgICAgbGVmdDogNDUwcHg7DQp9DQo8L3ByZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kbD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIiBpZD0icGFnLWFjdGl2aWRhZGVzLWFycmFzdHJhcjIiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+QXJyYXN0cmFyIHkgc29sdGFyIC0gbW9kbyBkacOhbG9nbzwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxwPlBvc2libGUgbW9kaWZpY2FjacOzbiBkZSBsYSBhY3RpdmlkYWQgZGUgYXJyYXN0cmFyIHkgc29sdGFyLCBlbiBlc3RlIGNhc28gcGFyYSBjb21wbGV0YXIgdW4gZGnDoWxvZ28uPC9wPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imhvcml6b250YWwtbWVudSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0PkVqZW1wbG88L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iYXJyYXN0cmFyMiIgY2xhc3M9ImpwaXQtYWN0aXZpdGllcy1kcm9wcGFibGUiIGRhdGEtdmVyaWZ5LXR5cGU9InRhcmdldCIgZGF0YS1hY3QtaWQ9ImFycmFzdHJhcjIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5BcnJhc3RyZSB1bmEgcGFsYWJyYSBkZSBsYSBkZXJlY2hhIHBhcmEgY29tcGxldGFyIHVuYSBkZSBsYXMgc2VudGVuY2lhcyBkZSBsYSBpenF1aWVyZGEuPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+wqFPaCwgZ2xvcmlhIDxidXR0b24gZGF0YS10YXJnZXQtZ3JvdXA9IjEiPiZuYnNwOzwvYnV0dG9uPiE8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPiFPaCwgPGJ1dHRvbiBkYXRhLXRhcmdldC1ncm91cD0iMiI+Jm5ic3A7PC9idXR0b24+IGlubW9ydGFsITwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+wqFFbiBzdXJjb3MgZGUgZG9sb3JlczwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+ZWwgYmllbiA8YnV0dG9uIGRhdGEtdGFyZ2V0LWdyb3VwPSIzIj4mbmJzcDs8L2J1dHRvbj4geWEhPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWdyb3VwPSIzIj5nZXJtaW5hPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1ncm91cD0iMiI+asO6YmlsbzwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtZ3JvdXA9IjEiPmlubWFyY2VzaWJsZTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveF9lbmQiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHQ+SFRNTDwvZHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRkPg0KPHByZT4NCiZsdDtkaXYgaWQ9ImFycmFzdHJhciIgY2xhc3M9ImpwaXQtYWN0aXZpdGllcy1kcm9wcGFibGUiIGRhdGEtdmVyaWZ5LXR5cGU9InRhcmdldCIgZGF0YS1hY3QtaWQ9ImFycmFzdHJhcjIiJmd0Ow0KICAgICZsdDtkaXYmZ3Q7DQogICAgICAgICZsdDtwJmd0O0FycmFzdHJlIHVuYSBwYWxhYnJhIGRlIGxhIGRlcmVjaGEgcGFyYSBjb21wbGV0YXIgdW5hIGRlIGxhcyBzZW50ZW5jaWFzIGRlIGxhIGl6cXVpZXJkYS4mbHQ7L3AmZ3Q7DQogICAgJmx0Oy9kaXYmZ3Q7DQogICAgJmx0O2RpdiZndDsNCiAgICAgICAgJmx0O3RhYmxlJmd0Ow0KICAgICAgICAgICAgJmx0O3Rib2R5Jmd0Ow0KICAgICAgICAgICAgICAgICZsdDt0ciZndDsNCiAgICAgICAgICAgICAgICAgICAgJmx0O3RkJmd0Ow0KICAgICAgICAgICAgICAgICAgICAgICAgJmx0O3AmZ3Q7wqFPaCwgZ2xvcmlhICZsdDtidXR0b24gZGF0YS10YXJnZXQtZ3JvdXA9IjEiJmd0OyZuYnNwOyZsdDsvYnV0dG9uJmd0OyEmbHQ7L3AmZ3Q7DQogICAgICAgICAgICAgICAgICAgICAgICAmbHQ7cCZndDshT2gsICZsdDtidXR0b24gZGF0YS10YXJnZXQtZ3JvdXA9IjIiJmd0OyZuYnNwOyZsdDsvYnV0dG9uJmd0OyBpbm1vcnRhbCEmbHQ7L3AmZ3Q7DQogICAgICAgICAgICAgICAgICAgICAgICAmbHQ7cCZndDvCoUVuIHN1cmNvcyBkZSBkb2xvcmVzJmx0Oy9wJmd0Ow0KICAgICAgICAgICAgICAgICAgICAgICAgJmx0O3AmZ3Q7ZWwgYmllbiAmbHQ7YnV0dG9uIGRhdGEtdGFyZ2V0LWdyb3VwPSIzIiZndDsmbmJzcDsmbHQ7L2J1dHRvbiZndDsgeWEhJmx0Oy9wJmd0Ow0KICAgICAgICAgICAgICAgICAgICAmbHQ7L3RkJmd0Ow0KICAgICAgICAgICAgICAgICAgICAmbHQ7dGQgY2xhc3M9InNvdXJjZXMiJmd0Ow0KICAgICAgICAgICAgICAgICAgICAgICAgJmx0O2RpdiBkYXRhLWdyb3VwPSIzIiZndDtnZXJtaW5hJmx0Oy9kaXYmZ3Q7DQogICAgICAgICAgICAgICAgICAgICAgICAmbHQ7ZGl2IGRhdGEtZ3JvdXA9IjIiJmd0O2rDumJpbG8mbHQ7L2RpdiZndDsNCiAgICAgICAgICAgICAgICAgICAgICAgICZsdDtkaXYgZGF0YS1ncm91cD0iMSImZ3Q7aW5tYXJjZXNpYmxlJmx0Oy9kaXYmZ3Q7DQogICAgICAgICAgICAgICAgICAgICZsdDsvdGQmZ3Q7DQogICAgICAgICAgICAgICAgJmx0Oy90ciZndDsNCiAgICAgICAgICAgICZsdDsvdGJvZHkmZ3Q7DQogICAgICAgICZsdDsvdGFibGUmZ3Q7DQogICAgJmx0Oy9kaXYmZ3Q7DQogICAgJmx0O2RpdiBjbGFzcz0iYm94X2VuZCImZ3Q7Jmx0Oy9kaXYmZ3Q7DQombHQ7L2RpdiZndDsNCjwvcHJlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2RsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdD5DU1MgcGVyc29uYWxpemFkbzwvZHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRkPg0KPHByZT4NCiNhcnJhc3RyYXIuanBpdC1hY3Rpdml0aWVzLWRyb3BwYWJsZSB0ZC5zb3VyY2VzIHsNCiAgICBwYWRkaW5nLWxlZnQ6IDEwMHB4Ow0KfQ0KDQojYXJyYXN0cmFyLmpwaXQtYWN0aXZpdGllcy1kcm9wcGFibGUgLmRyYWdnYWJsZSB7DQogICAgd2lkdGg6IDkwcHg7DQogICAgZmxvYXQ6IGxlZnQ7DQogICAgbWFyZ2luLWJvdHRvbTogNXB4Ow0KICAgIGNsZWFyOiBib3RoOw0KICAgIGhlaWdodDogMTVweDsNCn0NCg0KI2FycmFzdHJhci5qcGl0LWFjdGl2aXRpZXMtZHJvcHBhYmxlIC5kcm9wcGFibGUgew0KICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50Ow0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQ7DQogICAgd2lkdGg6IDEwMHB4Ow0KICAgIGhlaWdodDogMjVweDsNCn0NCg0KI2FycmFzdHJhci5qcGl0LWFjdGl2aXRpZXMtZHJvcHBhYmxlIC5qcGl0X2FjdGl2aXRpZXNfanBpdGRyb3BwYWJsZV9kcm9wcGVkIHsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7DQogICAgY29sb3I6ICMwMDA7DQogICAgd2lkdGg6IDkycHg7DQogICAgaGVpZ2h0OiAxN3B4Ow0KfQ0KDQojYXJyYXN0cmFyLmpwaXQtYWN0aXZpdGllcy1kcm9wcGFibGUgLmpwaXRfYWN0aXZpdGllc19qcGl0ZHJvcHBhYmxlX2Ryb3BwZWQuZHJhZ2dhYmxlLndyb25nIHsNCiAgICBjb2xvcjogI0Q2MEMxQjsNCn0NCjwvcHJlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2RsPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiIGlkPSJwYWctYWN0aXZpZGFkZXMtYXJyYXN0cmFyMyI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5BcnJhc3RyYXIgeSBzb2x0YXIgLSBtb2RvIGNvbXBsZXRhcjwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxwPlBvc2libGUgbW9kaWZpY2FjacOzbiBkZSBsYSBhY3RpdmlkYWQgZGUgYXJyYXN0cmFyIHkgc29sdGFyLCBlbiBlc3RlIGNhc28gcGFyYSBjb21wbGV0YXIgdW5hIG9yYWNpw7NuLjwvcD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJob3Jpem9udGFsLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdD5FamVtcGxvPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImFycmFzdHJhcjMiIGNsYXNzPSJqcGl0LWFjdGl2aXRpZXMtZHJvcHBhYmxlIiBkYXRhLWFjdC1pZD0iYXJyYXN0cmFyMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkFycmFzdHJlIGVsIGZyYWdtZW50byBjb3JyZWN0byBwYXJhIGNvbXBsZXRhciBjYWRhIHJlZnLDoW4uPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPk5vIHBvciBtYWRydWdhciBtw6FzIDwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgZGF0YS10YXJnZXQtZ3JvdXA9IjEiPjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EaW1lIGNvbiBxdWllbiBhbmRhcyA8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGRhdGEtdGFyZ2V0LWdyb3VwPSIyIj48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+QWwgbWFsIHRpZW1wbyA8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGRhdGEtdGFyZ2V0LWdyb3VwPSIzIj48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0Pkxpc3RhIGRlIGZyYWdtZW50b3M6PC9oND4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtZ3JvdXA9IjMiPmJ1ZW5hIGNhcmEuPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1ncm91cD0iMiI+eSB0ZSBkaXLDqSBxdWllbiBlcmVzLjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtZ3JvdXA9IjEiPmFtYW5lY2UgbcOhcyB0ZW1wcmFuby48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94X2VuZCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2RsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdD5IVE1MPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQ+DQo8cHJlPg0KJmx0O2RpdiBpZD0iYXJyYXN0cmFyIiBjbGFzcz0ianBpdC1hY3Rpdml0aWVzLWRyb3BwYWJsZSIgZGF0YS1hY3QtaWQ9ImFycmFzdHJhcjMiJmd0Ow0KICAgICZsdDtkaXYmZ3Q7DQogICAgICAgICZsdDtwJmd0O0FycmFzdHJlIGVsIGZyYWdtZW50byBjb3JyZWN0byBwYXJhIGNvbXBsZXRhciBjYWRhIHJlZnLDoW4uJmx0Oy9wJmd0Ow0KICAgICAgICAmbHQ7dGFibGUmZ3Q7DQogICAgICAgICAgICAmbHQ7dHImZ3Q7DQogICAgICAgICAgICAgICAgJmx0O3RoJmd0O05vIHBvciBtYWRydWdhciBtw6FzICZsdDsvdGgmZ3Q7DQogICAgICAgICAgICAgICAgJmx0O3RkIGRhdGEtdGFyZ2V0LWdyb3VwPSIxIiZndDsmbHQ7L3RkJmd0Ow0KICAgICAgICAgICAgJmx0Oy90ciZndDsNCiAgICAgICAgICAgICZsdDt0ciZndDsNCiAgICAgICAgICAgICAgICAmbHQ7dGgmZ3Q7RGltZSBjb24gcXVpZW4gYW5kYXMgJmx0Oy90aCZndDsNCiAgICAgICAgICAgICAgICAmbHQ7dGQgZGF0YS10YXJnZXQtZ3JvdXA9IjIiJmd0OyZsdDsvdGQmZ3Q7DQogICAgICAgICAgICAmbHQ7L3RyJmd0Ow0KICAgICAgICAgICAgJmx0O3RyJmd0Ow0KICAgICAgICAgICAgICAgICZsdDt0aCZndDtBbCBtYWwgdGllbXBvICZsdDsvdGgmZ3Q7DQogICAgICAgICAgICAgICAgJmx0O3RkIGRhdGEtdGFyZ2V0LWdyb3VwPSIzIiZndDsmbHQ7L3RkJmd0Ow0KICAgICAgICAgICAgJmx0Oy90ciZndDsNCiAgICAgICAgJmx0Oy90YWJsZSZndDsNCiAgICAmbHQ7L2RpdiZndDsNCiAgICAmbHQ7ZGl2Jmd0Ow0KICAgICAgICAmbHQ7aDQmZ3Q7TGlzdGEgZGUgZnJhZ21lbnRvczombHQ7L2g0Jmd0Ow0KICAgICAgICAmbHQ7ZGl2Jmd0Ow0KICAgICAgICAgICAgJmx0O2RpdiBkYXRhLWdyb3VwPSIzIiZndDtidWVuYSBjYXJhLiZsdDsvZGl2Jmd0Ow0KICAgICAgICAgICAgJmx0O2RpdiBkYXRhLWdyb3VwPSIyIiZndDt5IHRlIGRpcsOpIHF1aWVuIGVyZXMuJmx0Oy9kaXYmZ3Q7DQogICAgICAgICAgICAmbHQ7ZGl2IGRhdGEtZ3JvdXA9IjEiJmd0O2FtYW5lY2UgbcOhcyB0ZW1wcmFuby4mbHQ7L2RpdiZndDsNCiAgICAgICAgJmx0Oy9kaXYmZ3Q7DQogICAgJmx0Oy9kaXYmZ3Q7DQogICAgJmx0O2RpdiBjbGFzcz0iYm94X2VuZCImZ3Q7Jmx0Oy9kaXYmZ3Q7DQombHQ7L2RpdiZndDsNCjwvcHJlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2RsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdD5DU1MgcGVyc29uYWxpemFkbzwvZHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRkPg0KPHByZT4NCiNhcnJhc3RyYXIuanBpdC1hY3Rpdml0aWVzLWRyb3BwYWJsZSB0YWJsZSB7DQogICAgZW1wdHktY2VsbHM6IHNob3c7DQogICAgYm9yZGVyLXNwYWNpbmc6IDAgNXB4Ow0KICAgIGNvbG9yOiAjZmZmOw0KfQ0KDQojYXJyYXN0cmFyLmpwaXQtYWN0aXZpdGllcy1kcm9wcGFibGUgdGggew0KICAgIGNvbG9yOiAjMDAwOw0KICAgIHBhZGRpbmc6IDVweDsNCiAgICB0ZXh0LWFsaWduOiByaWdodDsNCiAgICBmb250LXdlaWdodDogbm9ybWFsOw0KfQ0KDQojYXJyYXN0cmFyLmpwaXQtYWN0aXZpdGllcy1kcm9wcGFibGUgdGQgew0KICAgIHBhZGRpbmc6IDVweDsNCiAgICBib3JkZXI6IDFweCBkYXNoZWQgIzc3Nzc3NzsNCiAgICB0ZXh0LWFsaWduOiBsZWZ0Ow0KICAgIHdpZHRoOiAxODBweDsNCn0NCg0KI2FycmFzdHJhci5qcGl0LWFjdGl2aXRpZXMtZHJvcHBhYmxlIC5kcmFnZ2FibGUgew0KICAgIG1hcmdpbjogMCA1cHggNXB4IDA7DQogICAgd2lkdGg6IDE4MHB4Ow0KICAgIHRleHQtYWxpZ246IGxlZnQ7DQp9DQoNCiNhcnJhc3RyYXIuanBpdC1hY3Rpdml0aWVzLWRyb3BwYWJsZSAuanBpdF9hY3Rpdml0aWVzX2pwaXRkcm9wcGFibGVfZHJvcHBlZCB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2ZiZjllYTsNCiAgICBjb2xvcjogIzAwMDAwMDsNCiAgICBib3JkZXItY29sb3I6ICNmYmY5ZWE7DQp9DQoNCiNhcnJhc3RyYXIuanBpdC1hY3Rpdml0aWVzLWRyb3BwYWJsZSAuanBpdF9hY3Rpdml0aWVzX2pwaXRkcm9wcGFibGVfZHJvcHBlZC5kcmFnZ2FibGUud3Jvbmcgew0KICAgIGNvbG9yOiAjRDYwQzFCOw0KfQ0KPC9wcmU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSIgaWQ9InBhZy1hY3RpdmlkYWRlcy1hcnJhc3RyYXI0Ij4NCiAgICAgICAgICAgICAgICAgICAgPGgzPkFycmFzdHJhciB5IHNvbHRhciAtIGluc2VydGFuZG8gY29udGVuaWRvPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPHA+UG9zaWJsZSBtb2RpZmljYWNpw7NuIGRlIGxhIGFjdGl2aWRhZCBkZSBhcnJhc3RyYXIgeSBzb2x0YXIsIGVuIGVzdGUgY2FzbyBwYXJhIGNvbXBsZXRhciB1bmEgb3JhY2nDs24uPC9wPg0KDQogICAgICAgICAgICAgICAgICAgIDxwPkEgZGlmZXJlbmNpYSBkZSBsYXMgb3RyYXMgZGUgYXJyYXN0cmFyIHkgc29sdGFyLCBlc3RlIGVzcXVlbWEgYWdyZWdhIGVsIGNvbnRlbmlkbyBkZWwgPHN0cm9uZz5vcmlnZW48L3N0cm9uZz4gZW4gZWwgPHN0cm9uZz5kZXN0aW5vPC9zdHJvbmc+IHBvciBsbyBxdWUgbm8gc2UgcHVlZGUgcXVpdGFyIGRlIGFsbMOtIHVuYSB2ZXogYXJyYXN0cmFkby4gUGFyYSBlc3RvIGVzIG5lY2VzYXJpbyBhZ3JlZ2FyIGFsIGNvbnRlbmVkb3IgcHJpbmNpcGFsIGRlIGxhIGFjdGl2aWRhZCBlbCBhdHJpYnV0byA8ZW0+ZGF0YS1kcm9wcGFibGUtY29udGVudC1pbm5lcjwvZW0+IGVzdGFibGVjaWRvIGEgPGVtPnRydWU8L2VtPi4gVGFtYmnDqW4gc2UgcHVlZGUgZXN0YWJsZWNlciBlbCBhdHJpYnV0byA8ZW0+ZGF0YS1kcm9wcGFibGUtY29udGVudC1oZWxwZXI8L2VtPiBjb24gdW4gdmFsb3IgcGFyYSBjb2xvY2FyIGVuIGVsIDxzdHJvbmc+b3JpZ2VuPC9zdHJvbmc+IHVuYSB2ZXogcXVlIHNlIGhheWEgcmVpbmljaWFkbyBsYSBhY3RpdmlkYWQsIGVuIGVsIGVqZW1wbG8gZXMgIi4uLiIuPC9wPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imhvcml6b250YWwtbWVudSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0PkVqZW1wbG88L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iYXJyYXN0cmFyNCIgY2xhc3M9ImpwaXQtYWN0aXZpdGllcy1kcm9wcGFibGUiIGRhdGEtZHJvcHBhYmxlLWNvbnRlbnQtaW5uZXI9InRydWUiIGRhdGEtZHJvcHBhYmxlLWNvbnRlbnQtaGVscGVyPSIuLi4iIGRhdGEtYWN0LWlkPSJhcnJhc3RyYXI0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXN0cmUgZWwgZnJhZ21lbnRvIGNvcnJlY3RvIHBhcmEgY29tcGxldGFyIGNhZGEgcmVmcsOhbi4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Nw6FzIHZhbGUgdGFyZGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGRhdGEtdGFyZ2V0LWdyb3VwPSIxIj4uLi48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+TcOhcyB2YWxlIHBhamFybyBlbiBtYW5vPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBkYXRhLXRhcmdldC1ncm91cD0iMiI+Li4uPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkN1YW5kbyBlbCByw61vIHN1ZW5hPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBkYXRhLXRhcmdldC1ncm91cD0iMyI+Li4uPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFsIHF1ZSBhIGJ1ZW4gw6FyYm9sIHNlIGFycmltYTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgZGF0YS10YXJnZXQtZ3JvdXA9IjQiPi4uLjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQ+TGlzdGFkbyBkZSBmcmFnbWVudG9zOjwvaDQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWdyb3VwPSI0Ij5idWVuYSBzb21icmEgbGUgY29iaWphPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1ncm91cD0iMSI+cXVlIG51bmNhPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1ncm91cD0iMyI+cGllZHJhcyBsbGV2YTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtZ3JvdXA9IjIiPnF1ZSBjaWVuIHZvbGFuZG88L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgY2xhc3M9ImNsZWFyIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3hfZW5kIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0PkhUTUw8L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZD4NCjxwcmU+DQombHQ7ZGl2IGlkPSJhcnJhc3RyYXIiIGNsYXNzPSJqcGl0LWFjdGl2aXRpZXMtZHJvcHBhYmxlIiBkYXRhLWRyb3BwYWJsZS1jb250ZW50LWlubmVyPSJ0cnVlIg0KICAgICAgICBkYXRhLWRyb3BwYWJsZS1jb250ZW50LWhlbHBlcj0iLi4uIiBkYXRhLWFjdC1pZD0iYXJyYXN0cmFyNCImZ3Q7DQogICAgJmx0O2RpdiZndDsNCiAgICAgICAgQXJyYXN0cmUgZWwgZnJhZ21lbnRvIGNvcnJlY3RvIHBhcmEgY29tcGxldGFyIGNhZGEgcmVmcsOhbi4NCiAgICAgICAgJmx0O3RhYmxlJmd0Ow0KICAgICAgICAgICAgJmx0O3RyJmd0Ow0KICAgICAgICAgICAgICAgICZsdDt0aCZndDtNw6FzIHZhbGUgdGFyZGUmbHQ7L3RoJmd0Ow0KICAgICAgICAgICAgICAgICZsdDt0ZCBkYXRhLXRhcmdldC1ncm91cD0iMSImZ3Q7Li4uJmx0Oy90ZCZndDsNCiAgICAgICAgICAgICZsdDsvdHImZ3Q7DQogICAgICAgICAgICAmbHQ7dHImZ3Q7DQogICAgICAgICAgICAgICAgJmx0O3RoJmd0O03DoXMgdmFsZSBwYWphcm8gZW4gbWFubyZsdDsvdGgmZ3Q7DQogICAgICAgICAgICAgICAgJmx0O3RkIGRhdGEtdGFyZ2V0LWdyb3VwPSIyIiZndDsuLi4mbHQ7L3RkJmd0Ow0KICAgICAgICAgICAgJmx0Oy90ciZndDsNCiAgICAgICAgICAgICZsdDt0ciZndDsNCiAgICAgICAgICAgICAgICAmbHQ7dGgmZ3Q7Q3VhbmRvIGVsIHLDrW8gc3VlbmEmbHQ7L3RoJmd0Ow0KICAgICAgICAgICAgICAgICZsdDt0ZCBkYXRhLXRhcmdldC1ncm91cD0iMyImZ3Q7Li4uJmx0Oy90ZCZndDsNCiAgICAgICAgICAgICZsdDsvdHImZ3Q7DQogICAgICAgICAgICAmbHQ7dHImZ3Q7DQogICAgICAgICAgICAgICAgJmx0O3RoJmd0O0FsIHF1ZSBhIGJ1ZW4gw6FyYm9sIHNlIGFycmltYSZsdDsvdGgmZ3Q7DQogICAgICAgICAgICAgICAgJmx0O3RkIGRhdGEtdGFyZ2V0LWdyb3VwPSI0IiZndDsuLi4mbHQ7L3RkJmd0Ow0KICAgICAgICAgICAgJmx0Oy90ciZndDsNCiAgICAgICAgJmx0Oy90YWJsZSZndDsNCiAgICAmbHQ7L2RpdiZndDsNCiAgICAmbHQ7ZGl2Jmd0Ow0KICAgICAgICAmbHQ7aDQmZ3Q7TGlzdGFkbyBkZSBmcmFnbWVudG9zOiZsdDsvaDQmZ3Q7DQogICAgICAgICZsdDtkaXYmZ3Q7DQogICAgICAgICAgICAmbHQ7ZGl2IGRhdGEtZ3JvdXA9IjQiJmd0O2J1ZW5hIHNvbWJyYSBsZSBjb2JpamEmbHQ7L2RpdiZndDsNCiAgICAgICAgICAgICZsdDtkaXYgZGF0YS1ncm91cD0iMSImZ3Q7cXVlIG51bmNhJmx0Oy9kaXYmZ3Q7DQogICAgICAgICAgICAmbHQ7ZGl2IGRhdGEtZ3JvdXA9IjMiJmd0O3BpZWRyYXMgbGxldmEmbHQ7L2RpdiZndDsNCiAgICAgICAgICAgICZsdDtkaXYgZGF0YS1ncm91cD0iMiImZ3Q7cXVlIGNpZW4gdm9sYW5kbyZsdDsvZGl2Jmd0Ow0KICAgICAgICAmbHQ7L2RpdiZndDsNCiAgICAgICAgJmx0O2JyIGNsYXNzPSJjbGVhciIgLyZndDsNCiAgICAmbHQ7L2RpdiZndDsNCiAgICAmbHQ7ZGl2IGNsYXNzPSJib3hfZW5kIiZndDsmbHQ7L2RpdiZndDsNCiZsdDsvZGl2Jmd0Ow0KPC9wcmU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0PkNTUyBwZXJzb25hbGl6YWRvPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQ+DQo8cHJlPg0KI2FycmFzdHJhci5qcGl0LWFjdGl2aXRpZXMtZHJvcHBhYmxlIHRhYmxlIHsNCiAgICBlbXB0eS1jZWxsczogc2hvdzsNCiAgICBib3JkZXItc3BhY2luZzogMCA1cHg7DQp9DQoNCiNhcnJhc3RyYXIuanBpdC1hY3Rpdml0aWVzLWRyb3BwYWJsZSB0aCB7DQogICAgcGFkZGluZzogNXB4Ow0KICAgIHRleHQtYWxpZ246IHJpZ2h0Ow0KICAgIGJvcmRlci1yaWdodDogbm9uZTsNCn0NCg0KI2FycmFzdHJhci5qcGl0LWFjdGl2aXRpZXMtZHJvcHBhYmxlIHRkIHsNCiAgICBwYWRkaW5nOiA1cHg7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGJvcmRlci1ib3R0b206IDFweCBkYXNoZWQgIzc3Nzc3NzsNCiAgICB0ZXh0LWFsaWduOiBsZWZ0Ow0KICAgIHdpZHRoOiAyMDBweDsNCn0NCg0KI2FycmFzdHJhci5qcGl0LWFjdGl2aXRpZXMtZHJvcHBhYmxlIC5kcmFnZ2FibGUgew0KICAgIGZsb2F0OiBsZWZ0Ow0KICAgIG1hcmdpbjogMCA1cHggNXB4IDA7DQp9DQoNCiNhcnJhc3RyYXIuanBpdC1hY3Rpdml0aWVzLWRyb3BwYWJsZSAud3Jvbmcgew0KICAgIGJvcmRlci1jb2xvcjogI0Q2MEMxQjsNCiAgICBjb2xvcjogI0Q2MEMxQjsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsNCn0NCjwvcHJlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2RsPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiIGlkPSJwYWctYWN0aXZpZGFkZXMtYXJyYXN0cmFyZ3J1cG9zIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPkFycmFzdHJhciB5IHNvbHRhciBwb3IgZ3J1cG9zIC8gQ2xhc2lmaWNhcjwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgRXMgc2ltaWxhciBhIGxhIGFjdGl2aWRhZCBkZSBhcnJhc3RyYXIgeSBzb2x0YXIgcGVybyBwZXJtaXRlIGFycmFzdHJhciBtw7psdGlwbGVzIGVsZW1lbnRvcyBhIHVuIG1pc21vIGNvbnRlbmVkb3IsIHBhcmEgY2xhc2lmaWNhciB0b2RvcyBsb3MgZWxlbWVudG9zIHBvciBncnVwb3MsIGFkZW3DoXMsIG5vIHJlaW5pY2lhIGN1YW5kbyBmaW5hbGl6YSBjb24gZXJyb3JlcyBzaW5vIHF1ZSBwZXJtaXRlIGNvbnRpbnVhciBkZXNkZSBlbCBlc3RhZG8gYWN0dWFsLiBPdHJhIGRpZmVyZW5jaWEgZXMgcXVlIGVzdGEgYWN0aXZpZGFkIHPDrSByZXF1aWVyZSBxdWUgZWwgdXN1YXJpbyBsYSB2ZXJpZmlxdWUsIGFsIGNvbnRyYXJpbyBkZSBsYSBhY3RpdmlkYWQgZGUgYXJyYXN0cmFyIG5vcm1hbCBxdWUgc2UgdmVyaWZpY2EgY3VhbmRvIHNlIHRlcm1pbmFuIGRlIGFycmFzdHJhciBsb3MgZWxlbWVudG9zIG8gY3VhbmRvIHNlIGxsZW5hbiBsb3MgZGVzdGlub3MuDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBTZSBkZWZpbmUgYWdyZWdhbmRvIGxhIGNsYXNlIDxlbT5qcGl0LWFjdGl2aXRpZXMtbXVsdGlkcm9wcGFibGU8L2VtPiBhIHVuIGNvbnRlbmVkb3IgeSBkZW50cm8gZGUgw6lsIGRlZmluaWVuZG8gdW4gY29udGVuaWRvIEhUTUwgdGVuaWVuZG8gZW4gY3VlbnRhOiBkZWZpbmlyIGxvcyBvcsOtZ2VuZXMgbWFyY2FuZG8gZWxlbWVudG9zIGNvbiBsYSBjbGFzZSA8ZW0+ZGF0YS1ncm91cDwvZW0+IGN1eW8gdmFsb3Igc2Vyw6EgZWwgbsO6bWVybyBkZWwgZ3J1cG8gYWwgcXVlIHBlcnRlbmVjZSBlbCBlbGVtZW50byB5IGRlZmluaXIgbG9zIGRlc3Rpbm9zIG1hcmNhbmRvIGVsZW1lbnRvcyBjb24gZWwgYXRyaWJ1dG8gPGVtPmRhdGEtdGFyZ2V0LWdvcnVwPC9lbT4gY3V5byB2YWxvciBzZXLDoSBlbCBuw7ptZXJvIGRlbCBncnVwbyBxdWUgYWNlcHRhIGNvbW8gY29ycmVjdG8uDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+TG9zIGVzdGlsb3MgY29ycmVzcG9uZGllbnRlcyBzZSBlbmN1ZW50cmFuIGVuIDxzdHJvbmc+Y3NzL2N1c3RvbS5jc3M8L3N0cm9uZz4sIGVuIGxhIHNlY2Npw7NuICJBY3RpdmlkYWQgYXJyYXN0cmFyIHkgc29sdGFyIHBvciBncnVwb3MiLjwvcD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJob3Jpem9udGFsLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdD5FamVtcGxvPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImFycmFzdHJhcmdydXBvcyIgY2xhc3M9ImpwaXQtYWN0aXZpdGllcy1tdWx0aWRyb3BwYWJsZSIgZGF0YS1hY3QtdGl0bGU9IkFycmFzdHJhciB5IHNvbHRhciBtw7psdGlwbGUiIGRhdGEtYWN0LWlkPSJhY3RfbWRyYWciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJib3hfdGFyZ2V0cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGg1Pkx1Z2FyZXM8L2g1PjxkaXYgZGF0YS10YXJnZXQtZ3JvdXA9IjEiIGNsYXNzPSJ0YXJnZXQiPjwvZGl2PjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGg1PkFuaW1hbGVzPC9oNT48ZGl2IGRhdGEtdGFyZ2V0LWdyb3VwPSIyIiBjbGFzcz0idGFyZ2V0Ij48L2Rpdj48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxoNT5NdWplcmVzPC9oNT48ZGl2IGRhdGEtdGFyZ2V0LWdyb3VwPSIzIiBjbGFzcz0idGFyZ2V0Ij48L2Rpdj48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnV0dG9ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iZ2VuZXJhbCB2ZXJpZnkiPlZlcmlmaWNhcjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImdlbmVyYWwgY29udGludWUiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+Q29udGludWFyIGludGVudGFuZG88L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94X2VuZCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtZ3JvdXA9IjMiPlllc2VuaWE8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtZ3JvdXA9IjMiPk1hcmluYTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1ncm91cD0iMyI+SmVubmlmZXI8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtZ3JvdXA9IjIiPk9ybml0b3JyaW5jbzwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1ncm91cD0iMSI+TWVkZWxsw61uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWdyb3VwPSIzIj5DcmlzdGluYTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1ncm91cD0iMSI+TGEgVW5pw7NuPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWdyb3VwPSIyIj5FbGVmYW50ZTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1ncm91cD0iMyI+U2FuZHJhPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWdyb3VwPSIzIj5DYXJvbGluYTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2RsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdD5IVE1MPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQ+DQo8cHJlPg0KJmx0O2RpdiBpZD0iYXJyYXN0cmFyZ3J1cG9zIiBjbGFzcz0ianBpdC1hY3Rpdml0aWVzLW11bHRpZHJvcHBhYmxlIiBkYXRhLWFjdC10aXRsZT0iQXJyYXN0cmFyIHkgc29sdGFyIG3Dumx0aXBsZSIgZGF0YS1hY3QtaWQ9ImFjdF9tZHJhZyImZ3Q7DQogICAgJmx0O3RhYmxlIGNsYXNzPSJib3hfdGFyZ2V0cyImZ3Q7DQogICAgICAgICZsdDt0Ym9keSZndDsNCiAgICAgICAgICAgICZsdDt0ciZndDsNCiAgICAgICAgICAgICAgICAmbHQ7dGQmZ3Q7Jmx0O2g1Jmd0O0x1Z2FyZXMmbHQ7L2g1Jmd0OyZsdDtkaXYgZGF0YS10YXJnZXQtZ3JvdXA9IjEiIGNsYXNzPSJ0YXJnZXQiJmd0OyZsdDsvZGl2Jmd0OyZsdDsvdGQmZ3Q7DQogICAgICAgICAgICAgICAgJmx0O3RkJmd0OyZsdDtoNSZndDtBbmltYWxlcyZsdDsvaDUmZ3Q7Jmx0O2RpdiBkYXRhLXRhcmdldC1ncm91cD0iMiIgY2xhc3M9InRhcmdldCImZ3Q7Jmx0Oy9kaXYmZ3Q7Jmx0Oy90ZCZndDsNCiAgICAgICAgICAgICAgICAmbHQ7dGQmZ3Q7Jmx0O2g1Jmd0O011amVyZXMmbHQ7L2g1Jmd0OyZsdDtkaXYgZGF0YS10YXJnZXQtZ3JvdXA9IjMiIGNsYXNzPSJ0YXJnZXQiJmd0OyZsdDsvZGl2Jmd0OyZsdDsvdGQmZ3Q7DQogICAgICAgICAgICAmbHQ7L3RyJmd0Ow0KICAgICAgICAmbHQ7L3Rib2R5Jmd0Ow0KICAgICZsdDsvdGFibGUmZ3Q7DQogICAgJmx0O2RpdiBjbGFzcz0iYnV0dG9ucyImZ3Q7DQogICAgICAgICZsdDtidXR0b24gY2xhc3M9ImdlbmVyYWwgdmVyaWZ5IiZndDtWZXJpZmljYXImbHQ7L2J1dHRvbiZndDsNCiAgICAgICAgJmx0O2J1dHRvbiBjbGFzcz0iZ2VuZXJhbCBjb250aW51ZSIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7IiZndDtDb250aW51YXIgaW50ZW50YW5kbyZsdDsvYnV0dG9uJmd0Ow0KICAgICZsdDsvZGl2Jmd0Ow0KICAgICZsdDtkaXYgY2xhc3M9ImJveF9lbmQiJmd0OyZsdDsvZGl2Jmd0Ow0KICAgICZsdDtkaXYgY2xhc3M9InNvdXJjZXMiJmd0Ow0KICAgICAgICAmbHQ7ZGl2IGRhdGEtZ3JvdXA9IjMiJmd0O1llc2VuaWEmbHQ7L2RpdiZndDsNCiAgICAgICAgJmx0O2RpdiBkYXRhLWdyb3VwPSIzIiZndDtNYXJpbmEmbHQ7L2RpdiZndDsNCiAgICAgICAgJmx0O2RpdiBkYXRhLWdyb3VwPSIzIiZndDtKZW5uaWZlciZsdDsvZGl2Jmd0Ow0KICAgICAgICAmbHQ7ZGl2IGRhdGEtZ3JvdXA9IjIiJmd0O09ybml0b3JyaW5jbyZsdDsvZGl2Jmd0Ow0KICAgICAgICAmbHQ7ZGl2IGRhdGEtZ3JvdXA9IjEiJmd0O01lZGVsbMOtbiZsdDsvZGl2Jmd0Ow0KICAgICAgICAmbHQ7ZGl2IGRhdGEtZ3JvdXA9IjMiJmd0O0NyaXN0aW5hJmx0Oy9kaXYmZ3Q7DQogICAgICAgICZsdDtkaXYgZGF0YS1ncm91cD0iMSImZ3Q7TGEgVW5pw7NuJmx0Oy9kaXYmZ3Q7DQogICAgICAgICZsdDtkaXYgZGF0YS1ncm91cD0iMiImZ3Q7RWxlZmFudGUmbHQ7L2RpdiZndDsNCiAgICAgICAgJmx0O2RpdiBkYXRhLWdyb3VwPSIzIiZndDtTYW5kcmEmbHQ7L2RpdiZndDsNCiAgICAgICAgJmx0O2RpdiBkYXRhLWdyb3VwPSIzIiZndDtDYXJvbGluYSZsdDsvZGl2Jmd0Ow0KICAgICZsdDsvZGl2Jmd0Ow0KJmx0Oy9kaXYmZ3Q7DQo8L3ByZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHQ+Q1NTIHBlcnNvbmFsaXphZG88L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZD4NCjxwcmU+DQojYXJyYXN0cmFyZ3J1cG9zIHRhYmxlIHsNCiAgICBtYXJnaW46IGF1dG87DQogICAgbWF4LXdpZHRoOiA1OTBweDsNCn0NCg0KI2FycmFzdHJhcmdydXBvcyBoNSB7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgIGZvbnQtc2l6ZTogMTZweDsNCiAgICBjb2xvcjogIzAwMDsNCiAgICBib3JkZXItYm90dG9tOiAycHggZG90dGVkICM5NUIwQ0I7DQp9DQoNCiNhcnJhc3RyYXJncnVwb3MgdGQgew0KICAgIGhlaWdodDogMTUwcHg7DQogICAgdmVydGljYWwtYWxpZ246IHRvcDsNCn0NCg0KI2FycmFzdHJhcmdydXBvcyB0ZCAudGFyZ2V0IHsNCiAgICBtaW4taGVpZ2h0OiAxNTBweDsNCiAgICB3aWR0aDogMTkwcHg7DQogICAgb3ZlcmZsb3c6IGF1dG87DQp9DQoNCiNhcnJhc3RyYXJncnVwb3MuanBpdC1hY3Rpdml0aWVzLW11bHRpZHJvcHBhYmxlIC5zb3VyY2VzIHsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBoZWlnaHQ6IDY1cHg7DQogICAgbWFyZ2luOiAxMHB4IGF1dG8gMDsNCn0NCg0KI2FycmFzdHJhcmdydXBvcy5qcGl0LWFjdGl2aXRpZXMtbXVsdGlkcm9wcGFibGUgLmRyYWdnYWJsZSB7DQogICAgd2lkdGg6IDE2NXB4Ow0KICAgIGZsb2F0OiBsZWZ0Ow0KICAgIG1hcmdpbjogMCAxcHggNXB4Ow0KfQ0KDQojYXJyYXN0cmFyZ3J1cG9zIHRhYmxlIC5kcmFnZ2FibGUuZGlzYWJsZWQgew0KICAgIGN1cnNvcjogZGVmYXVsdDsNCn0NCg0KI2FycmFzdHJhcmdydXBvcy5qcGl0LWFjdGl2aXRpZXMtbXVsdGlkcm9wcGFibGUgLmJ1dHRvbnMgew0KICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgICBwYWRkaW5nOiA1cHggMDsNCiAgICBjbGVhcjogYm90aDsNCn0NCjwvcHJlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2RsPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+Q2xvemU8L2gzPg0KICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFVuYSBhY3RpdmlkYWQgdGlwbyBDbG96ZSBzZSBkZWZpbmUgYWdyZWdhbmRvIGxhIGNsYXNlIDxlbT5qcGl0LWFjdGl2aXRpZXMtY2xvemU8L2VtPiBhIHVuIGNvbnRlbmVkb3IgeSwgZGVudHJvIGRlIMOpbCwgY29uc3RydXllbmRvIHVuIGNvbnRlbmlkbyBIVE1MIGVuIGVsIHF1ZSBzZSBlbmN1ZW50cmVuIGVsZW1lbnRvcyA8ZW0+c2VsZWN0PC9lbT4gZSA8ZW0+aW5wdXQ8L2VtPiBkZSB0aXBvIDxlbT50ZXh0PC9lbT4gKGluZGljYWRvIGV4cGzDrWNpdGFtZW50ZSkuDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBUb2RvcyBsYXMgbGlzdGFzIDxlbT5zZWxlY3Q8L2VtPiBzb24gcHJvY2VzYWRhcyBjb21vIGNhbXBvcyBkZSBsb3MgY3VhbGVzIGVsIHVzdWFyaW8gZGViZXLDoSBzZWxlY2Npb25hciB1biB2YWxvci4gQ2FkYSBsaXN0YSBkZWJlIGNvbnRlbmVyIHVuYSBvcGNpw7NuICg8ZW0+b3B0aW9uPC9lbT4pIGNvbiBlbCBhdHJpYnV0byA8ZW0+ZGF0YS1yZXNwb25zZTwvZW0+IGVzdGFibGVjaWRvIGEgPGVtPnRydWU8L2VtPiBpbmRpY2FuZG8gbGEgb3BjacOzbiBjb3JyZWN0YSBkZSBsYSBsaXN0YS4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgIExvcyBlbGVtZW50b3MgPGVtPmlucHV0PC9lbT4gZGUgdGlwbyA8ZW0+dGV4dDwvZW0+IHRhbWJpw6luIHNvbiBwcm9jZXNhZG9zIHkgZGViZW4gY29udGVuZXIgdW4gYXRyaWJ1dG8gPGVtPmRhdGEtcmVzcG9uc2U8L2VtPiBjb24gZWwgdGV4dG8gcXVlIGRlYmUgc2VyIGVzY3JpdG8gcG9yIGVsIHVzdWFyaW8gcGFyYSBjb21wbGV0YXIgbGEgYWN0aXZpZGFkLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgRGVudHJvIGRlbCBjb250ZW5pZG8gSFRNTCBlcyBpbXBvcnRhbnRlIGluY2x1aXIgdW4gZWxlbWVudG8gY29uIGxhIGNsYXNlIENTUyA8ZW0+Ym94X2VuZDwvZW0+IGVuIGN1eW8gaW50ZXJpb3Igc2UgY2FyZ2Fyw6EgZWwgcmVzdWx0YWRvIGFsIHZhbGlkYXIgbGEgYWN0aXZpZGFkLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgQWRlbcOhcywgZW4gZWwgY29udGVuZWRvciBwcmluY2lwYWwgZGUgbGEgY2xhc2Ugc2UgcHVlZGUgYWdyZWdhciBlbCBhdHJpYnV0byA8ZW0+ZGF0YS1wYXJlbnQtbWFyay1zZWxlY3RvcjwvZW0+IGNvbiB1biBzZWxlY3RvciBDU1MgcXVlIHBlcm1pdGEgc2VsZWNjaW9uYXIgZWwgcGFkcmUgZGUgbG9zIGVsZW1lbnRvcyBwYXJhIG1hcmNhciBlbCBlc3RhZG8gY29ycmVjdG8gbyBpbmNvcnJlY3RvIGRlIGxhIHJlc3B1ZXN0YSwgZXNvIGNvbiBlbCBmaW4gZGUgYXNpZ25hciBmYWNpbG1lbnRlIGVsZW1lbnRvcyBncsOhZmljb3MgcXVlIHBlcm1pdGFuIGRpc3Rpbmd1aXIgZWwgZXN0YWRvIGRlIGxhIHJlc3B1ZXN0YSB5YSBxdWUgbG9zIGNvbnRyb2xlcyBIVE1MIGRlIGZvcm11bGFyaW8gcmVzdHJpbmdlbiBtdWNoYXMgb3BjaW9uZXMgZGUgcHJlc2VudGFjacOzbi4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imhvcml6b250YWwtbWVudSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0PkVqZW1wbG88L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PkRlIDxjaXRlPkVsIGNhbnRvIGRlbCBhbnRpb3F1ZcOxbzwvY2l0ZT48L2g1Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJqcGl0LWFjdGl2aXRpZXMtY2xvemUiIGRhdGEtcGFyZW50LW1hcmstc2VsZWN0b3I9InNwYW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWW8gcXVlIG5hY8OtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PGlucHV0IHR5cGU9InRleHQiIGRhdGEtcmVzcG9uc2U9ImFsdGl2byIgLz48L3NwYW4+IHkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48c2VsZWN0PjxvcHRpb24gZGF0YS1yZXNwb25zZT0idHJ1ZSI+bGlicmU8L29wdGlvbj48b3B0aW9uPmZ1ZXJ0ZTwvb3B0aW9uPjwvc2VsZWN0Pjwvc3Bhbj48YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb2JyZSB1bmENCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48c2VsZWN0PjxvcHRpb24+c2VsdmE8L29wdGlvbj48b3B0aW9uIGRhdGEtcmVzcG9uc2U9InRydWUiPnNpZXJyYTwvb3B0aW9uPjwvc2VsZWN0Pjwvc3Bhbj4gYW50aW9xdWXDsWE8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDCoUxsZXbDsyBlbCBoaWVycm8gZW50cmUgbGFzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PGlucHV0IHR5cGU9InRleHQiIGRhdGEtcmVzcG9uc2U9Im1hbm9zIiAvPjwvc3Bhbj4sPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9ycXVlIGVuIGVsIGN1ZWxsbw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxzZWxlY3Q+PG9wdGlvbj5zZSB2ZSBmZW88L29wdGlvbj48b3B0aW9uIGRhdGEtcmVzcG9uc2U9InRydWUiPm1lIHBlc2E8L29wdGlvbj48b3B0aW9uPm1lIGhpZXJlPC9vcHRpb24+PC9zZWxlY3Q+PC9zcGFuPiE8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94X2VuZCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2RsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdD5IVE1MPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQ+DQo8cHJlPg0KJmx0O2RpdiBjbGFzcz0ianBpdC1hY3Rpdml0aWVzLWNsb3plIiBkYXRhLXBhcmVudC1tYXJrLXNlbGVjdG9yPSJzcGFuIiZndDsNCiAgICAmbHQ7cCZndDsNCiAgICAgICAgWW8gcXVlIG5hY8OtDQogICAgICAgICZsdDtzcGFuJmd0Ow0KICAgICAgICAgICAgJmx0O2lucHV0IHR5cGU9InRleHQiIGRhdGEtcmVzcG9uc2U9ImFsdGl2byIgLyZndDsNCiAgICAgICAgJmx0Oy9zcGFuJmd0Ow0KICAgICAgICB5DQogICAgICAgICZsdDtzcGFuJmd0Ow0KICAgICAgICAgICAgJmx0O3NlbGVjdCZndDsNCiAgICAgICAgICAgICAgICAmbHQ7b3B0aW9uIGRhdGEtcmVzcG9uc2U9InRydWUiJmd0O2xpYnJlJmx0Oy9vcHRpb24mZ3Q7DQogICAgICAgICAgICAgICAgJmx0O29wdGlvbiZndDtmdWVydGUmbHQ7L29wdGlvbiZndDsNCiAgICAgICAgICAgICZsdDsvc2VsZWN0Jmd0Ow0KICAgICAgICAmbHQ7L3NwYW4mZ3Q7DQogICAgICAgICZsdDticiAvJmd0Ow0KICAgICAgICBzb2JyZSB1bmENCiAgICAgICAgJmx0O3NwYW4mZ3Q7DQogICAgICAgICAgICAmbHQ7c2VsZWN0Jmd0Ow0KICAgICAgICAgICAgICAgICZsdDtvcHRpb24mZ3Q7c2VsdmEmbHQ7L29wdGlvbiZndDsNCiAgICAgICAgICAgICAgICAmbHQ7b3B0aW9uIGRhdGEtcmVzcG9uc2U9InRydWUiJmd0O3NpZXJyYSZsdDsvb3B0aW9uJmd0Ow0KICAgICAgICAgICAgJmx0Oy9zZWxlY3QmZ3Q7DQogICAgICAgICZsdDsvc3BhbiZndDsNCiAgICAgICAgYW50aW9xdWXDsWEmbHQ7YnIgLyZndDsNCiAgICAgICAgwqFMbGV2w7MgZWwgaGllcnJvIGVudHJlIGxhcw0KICAgICAgICAmbHQ7c3BhbiZndDsNCiAgICAgICAgICAgICZsdDtpbnB1dCB0eXBlPSJ0ZXh0IiBkYXRhLXJlc3BvbnNlPSJtYW5vcyIgLyZndDsNCiAgICAgICAgJmx0Oy9zcGFuJmd0Ow0KICAgICAgICAsJmx0O2JyIC8mZ3Q7DQogICAgICAgIHBvcnF1ZSBlbiBlbCBjdWVsbG8NCiAgICAgICAgJmx0O3NwYW4mZ3Q7DQogICAgICAgICAgICAmbHQ7c2VsZWN0Jmd0Ow0KICAgICAgICAgICAgICAgICZsdDtvcHRpb24mZ3Q7c2UgdmUgZmVvJmx0Oy9vcHRpb24mZ3Q7DQogICAgICAgICAgICAgICAgJmx0O29wdGlvbiBkYXRhLXJlc3BvbnNlPSJ0cnVlIiZndDttZSBwZXNhJmx0Oy9vcHRpb24mZ3Q7DQogICAgICAgICAgICAgICAgJmx0O29wdGlvbiZndDttZSBoaWVyZSZsdDsvb3B0aW9uJmd0Ow0KICAgICAgICAgICAgJmx0Oy9zZWxlY3QmZ3Q7DQogICAgICAgICZsdDsvc3BhbiZndDsNCiAgICAgICAgISZsdDticiAvJmd0Ow0KICAgICZsdDsvcCZndDsNCg0KICAgICZsdDtkaXYgY2xhc3M9ImJveF9lbmQiJmd0OyZsdDsvZGl2Jmd0Ow0KJmx0Oy9kaXYmZ3Q7DQo8L3ByZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kbD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+T3JkZW5hcjwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgVW5hIGFjdGl2aWRhZCBkZSBvcmRlbmFyIHNlIGRlZmluZSBhZ3JlZ2FuZG8gbGEgY2xhc2UgPGVtPmpwaXQtYWN0aXZpdGllcy1zb3J0YWJsZTwvZW0+IGEgdW4gY29udGVuZWRvciB5LCBkZW50cm8gZGUgw6lsLCBjb25zdHJ1eWVuZG8gZWwgY29udGVuaWRvIEhUTUwuDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBBcGxpY2EgcGFyYSBjdWFscXVpZXIgSFRNTCB5IG9wZXJhIHNvYnJlIGxvcyBlbGVtZW50b3MgPGVtPmxpPC9lbT4gcXVlIGVzdMOpbiBjb250ZW5pZG9zIGRlbnRybyBkZSB1biA8ZW0+dWw8L2VtPiBjb24gY2xhc2UgQ1NTIDxlbT5zb3J0YWJsZTwvZW0+LiBMb3MgPGVtPmxpPC9lbT4gZGViZW4gdGVuZXIgdW4gYXRyaWJ1dG8gPGVtPmRhdGEtcG9zaXRpb248L2VtPiBjb24gZWwgaW5kaWNlIHF1ZSBpbmRpY2EgbGEgcG9zaWNpw7NuIGFkZWN1YWRhLCBsYSBjdWFsIDxzdHJvbmc+ZW1waWV6YSBkZXNkZSBjZXJvPC9zdHJvbmc+Lg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgU2kgc2UgcmVxdWllcmUgcXVlIGVsIG9yZGVuYW1pZW50byBzZWEgaG9yaXpvbnRhbCBlcyBwcmVjaXNvIGFncmVnYXIgYWwgPGVtPnVsPC9lbT4gY29udGVuZWRvciBsYSBjbGFzZSA8ZW0+c29ydGFibGUtaG9yaXpvbnRhbDwvZW0+LiBTZSBwdWVkZW4gdGVuZXIgdmFyaWFzIGxpc3RhcyBob3Jpem9udGFsZXMgbyBjb21iaW5hciBob3Jpem9udGFsZXMgY29uIHZlcnRpY2FsZXMsIHBlcm8gc2UgZGViZSBtYW50ZW5lciBjb2hlcmVuY2lhIGVuIGVsIGluZGljZSBkZXNkZSBjZXJvIGVuIGxhIHByaW1lcmEgbGlzdGEgaGFzdGEgbGEgY2FudGlkYWQgdG90YWwgZGUgZWxlbWVudG9zIG9yZGVuYWRvcyBlbiBsYSDDumx0aW1hIGxpc3RhLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgRXhpc3RlIHVuIGF0cmlidXRvIGFkaWNpb25hbCBxdWUgZXMgPGVtPmRhdGEtc2V0LXBvc2l0aW9uPC9lbT4sIGVsIGN1YWwgc2lydmUgcGFyYSBpbmRpY2FyIHF1ZSBzZSBkZWJlIGFncmVnYXIgbGEgcG9zaWNpw7NuIGEgdW4gZWxlbWVudG8gZGVudHJvIGRlbCBjb250ZW5pZG8gb3JkZW5hZG8uIEVzIMO6dGlsIHNpIHNlIHF1aWVyZSBjb2xvY2FyLCBlbiB1biBsdWdhciBhbCBpbnRlcmlvciBkZWwgY29udGVuaWRvIGRlbCBlbGVtZW50bywgbGEgcG9zaWNpw7NuIHF1ZSBlc3TDoSBvY3VwYW5kbyBlbiBlbCBsaXN0YWRvIGNvbXBsZXRvLiBFbCB2YWxvciBkZWwgYXRyaWJ1dG8gZGViZSBzZXIgZWwgc2VsZWN0b3IgQ1NTIGRlbCBlbGVtZW50byBkZW50cm8gZGVsIGNvbnRlbmlkbyBkZWwgw610ZW0uDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBEZW50cm8gZGVsIGNvbnRlbmlkbyBIVE1MIGVzIGltcG9ydGFudGUgaW5jbHVpciB1biBlbGVtZW50byBjb24gbGEgY2xhc2UgQ1NTIDxlbT5ib3hfZW5kPC9lbT4gZW4gY3V5byBpbnRlcmlvciBzZSBjYXJnYXLDoSBlbCByZXN1bHRhZG8gYWwgdmFsaWRhciBsYSBhY3RpdmlkYWQuDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaG9yaXpvbnRhbC1tZW51Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHQ+RWplbXBsbzwvZHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJqcGl0LWFjdGl2aXRpZXMtc29ydGFibGUiIGRhdGEtYWN0LWlkPSJvcmRlbmFyXzEiIGRhdGEtc2V0LXBvc2l0aW9uPSJzcGFuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imluc3RydWN0aW9uIj5PcmRlbmUgbGEgZXN0cm9mYSBtb3ZpZW5kbyBsYXMgbMOtbmVhcyBvIGxhcyBwYWxhYnJhcyBzZWfDum4gc2VhIG5lY2VzYXJpbywgdmVydGljYWwgeS9vIGhvcml6b250YWxtZW50ZS48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5EZSA8Y2l0ZT5FbCBjYW50byBkZWwgYW50aW9xdWXDsW88L2NpdGU+PC9oNT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ic29ydGFibGUgc29ydGFibGUtaG9yaXpvbnRhbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtcG9zaXRpb249IjEiPnF1ZTwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtcG9zaXRpb249IjAiPig8c3Bhbj4xPC9zcGFuPikgRWwgaGFjaGE8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXBvc2l0aW9uPSIyIj5taXMgbWF5b3JlczwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIGNsYXNzPSJjbGVhciIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ic29ydGFibGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXBvc2l0aW9uPSI0Ij4oPHNwYW4+Mjwvc3Bhbj4pIGxhIHF1aWVybyBwb3JxdWUgYSBzdXMgZ29scGVzPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1wb3NpdGlvbj0iNSI+KDxzcGFuPjM8L3NwYW4+KSBsaWJyZXMgYWNlbnRvcyByZXN1ZW5hbjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtcG9zaXRpb249IjMiPig8c3Bhbj40PC9zcGFuPikgbWUgZGVqYXJvbiBwb3IgaGVyZW5jaWEsPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3hfZW5kIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0PkhUTUw8L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZD4NCjxwcmU+DQombHQ7ZGl2IGNsYXNzPSJqcGl0LWFjdGl2aXRpZXMtc29ydGFibGUiIGRhdGEtc2V0LXBvc2l0aW9uPSJzcGFuIiZndDsNCiAgICAmbHQ7dWwgY2xhc3M9InNvcnRhYmxlIHNvcnRhYmxlLWhvcml6b250YWwiJmd0Ow0KICAgICAgICAmbHQ7bGkgZGF0YS1wb3NpdGlvbj0iMSImZ3Q7cXVlJmx0Oy9saSZndDsNCiAgICAgICAgJmx0O2xpIGRhdGEtcG9zaXRpb249IjAiJmd0OygmbHQ7c3BhbiZndDsxJmx0Oy9zcGFuJmd0OykgRWwgaGFjaGEmbHQ7L2xpJmd0Ow0KICAgICAgICAmbHQ7bGkgZGF0YS1wb3NpdGlvbj0iMiImZ3Q7bWlzIG1heW9yZXMmbHQ7L2xpJmd0Ow0KICAgICZsdDsvdWwmZ3Q7DQogICAgJmx0O2JyIGNsYXNzPSJjbGVhciIgLyZndDsNCiAgICAmbHQ7dWwgY2xhc3M9InNvcnRhYmxlIiZndDsNCiAgICAgICAgJmx0O2xpIGRhdGEtcG9zaXRpb249IjQiJmd0OygmbHQ7c3BhbiZndDsyJmx0Oy9zcGFuJmd0OykgbGEgcXVpZXJvIHBvcnF1ZSBhIHN1cyBnb2xwZXMmbHQ7L2xpJmd0Ow0KICAgICAgICAmbHQ7bGkgZGF0YS1wb3NpdGlvbj0iNSImZ3Q7KCZsdDtzcGFuJmd0OzMmbHQ7L3NwYW4mZ3Q7KSBsaWJyZXMgYWNlbnRvcyByZXN1ZW5hbiZsdDsvbGkmZ3Q7DQogICAgICAgICZsdDtsaSBkYXRhLXBvc2l0aW9uPSIzIiZndDsoJmx0O3NwYW4mZ3Q7NCZsdDsvc3BhbiZndDspIG1lIGRlamFyb24gcG9yIGhlcmVuY2lhLCZsdDsvbGkmZ3Q7DQogICAgJmx0Oy91bCZndDsNCiAgICAmbHQ7ZGl2IGNsYXNzPSJib3hfZW5kIiZndDsmbHQ7L2RpdiZndDsNCiZsdDsvZGl2Jmd0Ow0KPC9wcmU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgQXVucXVlIHBvciBkZWZlY3RvIGVsIG9yZGVuYW1pZW50byBlcyBob3Jpem9udGFsIG8gdmVydGljYWwsIGxhIHByZXNlbnRhY2nDs24gZGVwZW5kZSBkZSBsb3MgZXN0aWxvcywgcHVkaWVuZG9zZSBjcmVhciBtw7psdGlwbGVzIGRpc3RyaWJ1Y2lvbmVzLCBjb21vIHNlIG11ZXN0cmEgYSBjb250aW51YWNpw7NuLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imhvcml6b250YWwtbWVudSBwYWctYWN0aXZpZGFkZXMtc29ydGFibGUtZWplbXBsbzIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdD5FamVtcGxvPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImpwaXQtYWN0aXZpdGllcy1zb3J0YWJsZSBtYXRyaXoiIGRhdGEtYWN0LWlkPSJvcmRlbmFyXzIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJzb3J0YWJsZSBzb3J0YWJsZS1ob3Jpem9udGFsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1wb3NpdGlvbj0iMSI+MjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtcG9zaXRpb249IjkiPio8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXBvc2l0aW9uPSIzIj40PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1wb3NpdGlvbj0iOCI+OTwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtcG9zaXRpb249IjQiPjU8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXBvc2l0aW9uPSI1Ij42PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1wb3NpdGlvbj0iMTEiPiM8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXBvc2l0aW9uPSI2Ij43PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1wb3NpdGlvbj0iMiI+MzwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtcG9zaXRpb249IjAiPjE8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXBvc2l0aW9uPSI3Ij44PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1wb3NpdGlvbj0iMTAiPjA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveF9lbmQiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHQ+SFRNTDwvZHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRkPg0KPHByZT4NCiZsdDtkaXYgY2xhc3M9ImpwaXQtYWN0aXZpdGllcy1zb3J0YWJsZSBtYXRyaXoiJmd0Ow0KICAgICZsdDt1bCBjbGFzcz0ic29ydGFibGUgc29ydGFibGUtaG9yaXpvbnRhbCImZ3Q7DQogICAgICAgICZsdDtsaSBkYXRhLXBvc2l0aW9uPSIxIiZndDsyJmx0Oy9saSZndDsNCiAgICAgICAgJmx0O2xpIGRhdGEtcG9zaXRpb249IjkiJmd0OyombHQ7L2xpJmd0Ow0KICAgICAgICAmbHQ7bGkgZGF0YS1wb3NpdGlvbj0iMyImZ3Q7NCZsdDsvbGkmZ3Q7DQogICAgICAgICZsdDtsaSBkYXRhLXBvc2l0aW9uPSI4IiZndDs5Jmx0Oy9saSZndDsNCiAgICAgICAgJmx0O2xpIGRhdGEtcG9zaXRpb249IjQiJmd0OzUmbHQ7L2xpJmd0Ow0KICAgICAgICAmbHQ7bGkgZGF0YS1wb3NpdGlvbj0iNSImZ3Q7NiZsdDsvbGkmZ3Q7DQogICAgICAgICZsdDtsaSBkYXRhLXBvc2l0aW9uPSIxMSImZ3Q7IyZsdDsvbGkmZ3Q7DQogICAgICAgICZsdDtsaSBkYXRhLXBvc2l0aW9uPSI2IiZndDs3Jmx0Oy9saSZndDsNCiAgICAgICAgJmx0O2xpIGRhdGEtcG9zaXRpb249IjIiJmd0OzMmbHQ7L2xpJmd0Ow0KICAgICAgICAmbHQ7bGkgZGF0YS1wb3NpdGlvbj0iMCImZ3Q7MSZsdDsvbGkmZ3Q7DQogICAgICAgICZsdDtsaSBkYXRhLXBvc2l0aW9uPSI3IiZndDs4Jmx0Oy9saSZndDsNCiAgICAgICAgJmx0O2xpIGRhdGEtcG9zaXRpb249IjEwIiZndDswJmx0Oy9saSZndDsNCiAgICAmbHQ7L3VsJmd0Ow0KICAgICZsdDtkaXYgY2xhc3M9ImJveF9lbmQiJmd0OyZsdDsvZGl2Jmd0Ow0KJmx0Oy9kaXYmZ3Q7DQo8L3ByZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHQ+Q1NTIHBlcnNvbmFsaXphZG88L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZD4NCjxwcmU+DQouanBpdC1hY3Rpdml0aWVzLXNvcnRhYmxlLm1hdHJpeiB1bC5zb3J0YWJsZSB7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBmbGV4LXdyYXA6IHdyYXA7DQogICAgd2lkdGg6IDE1MHB4Ow0KICAgIG1hcmdpbjogYXV0bzsNCiAgICBmbG9hdDogbm9uZTsNCiAgICBwYWRkaW5nOiA1cHg7DQogICAgYm9yZGVyOiAxcHggc29saWQ7DQp9DQoNCi5qcGl0LWFjdGl2aXRpZXMtc29ydGFibGUubWF0cml6IC5zb3J0YWJsZS1pdGVtIHsNCiAgICB3aWR0aDogNDRweDsNCiAgICBoZWlnaHQ6IDI0cHg7DQogICAgcGFkZGluZzogMTBweCAwOw0KICAgIG1hcmdpbjogMnB4Ow0KICAgIGJvcmRlcjogMXB4IHNvbGlkICM5NUIwQ0I7DQogICAgYm9yZGVyLXJhZGl1czogNXB4Ow0KICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgICBmb250LXNpemU6IDMwcHg7DQogICAgYm94LXNoYWRvdzogMnB4IDJweCAycHggI2FhYTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOw0KfQ0KDQouanBpdC1hY3Rpdml0aWVzLXNvcnRhYmxlLm1hdHJpeiB1bC5zb3J0YWJsZS1ob3Jpem9udGFsIC5zb3J0YWJsZS1pdGVtOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1LCA1NiwgMjAxLCAwLjEpOw0KfQ0KDQouanBpdC1hY3Rpdml0aWVzLXNvcnRhYmxlLm1hdHJpeiB1bC5zb3J0YWJsZS1ob3Jpem9udGFsIC5zb3J0YWJsZS1pdGVtOmhvdmVyOmJlZm9yZSB7DQogICAgY29udGVudDogIlxmMjYzIjsNCiAgICBmb250LXNpemU6IDEycHg7DQogICAgbGVmdDogMDsNCiAgICB0b3A6IDA7DQp9DQo8L3ByZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kbD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+Q2xhc2lmaWNhcjwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgUGVybWl0ZSByZWFsaXphciB1bmEgYWN0aXZpZGFkIGRvbmRlIHNlIGNsYXNpZmljYW4gY29udGVuaWRvcyBlbnRyZSBkb3MgcG9zaWJsZXMgdmFsb3JlcywgY29tbzogPHN0cm9uZz5WZXJkYWRlcm8vRmFsc288L3N0cm9uZz4gbyA8c3Ryb25nPlNpL05vPC9zdHJvbmc+Lg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgVW5hIGFjdGl2aWRhZCBkZSBjbGFzaWZpY2FyIHNlIGRlZmluZSBhZ3JlZ2FuZG8gbGEgY2xhc2UgPGVtPmpwaXQtYWN0aXZpdGllcy1jaGVjazwvZW0+IGEgdW4gY29udGVuZWRvciB5IGRlbnRybyBkZSDDqWw6DQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkYXRhX2xpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlVuYSBldGlxdWV0YSA8ZW0+d29yZHM8L2VtPiBjb21wdWVzdGEgcG9yIGVsZW1lbnRvcyA8ZW0+bGk8L2VtPiBxdWUgY29udGVuZHLDoW4gbGFzIHBhbGFicmFzIG8gZWxlbWVudG9zIGEgY2xhc2lmaWNhci4gTG9zIDxlbT5saTwvZW0+IHF1ZSBjb250ZW5nYW4gYSBsb3MgaW5jbHVpZG9zL3ZlcmRhZGVyb3Mvc8OtIGRlYmVuIHRlbmVyIGVsIGF0cmlidXRvIDxlbT5kYXRhLXZhbDwvZW0+IGVzdGFibGVjaWRvIGVuIDxlbT50cnVlPC9lbT4uPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MYSBlc3RydWN0dXJhIEhUTUwgcGVyc29uYWxpemFkYSBwYXJhIGRhciBlbCBjb250ZXh0byBkZXNlYWRvLCBhc2lnbmFuZG8gbGFzIHNpZ3VpZW50ZXMgY2xhc2VzIGEgbG9zIGNvbnRyb2xlcyBlbiBsb3MgcXVlIHNlIGRlc2VlIG1vc3RyYXIgbGEgaW5mb3JtYWNpw7NuIGNvcnJlc3BvbmRpZW50ZS4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRhdGFfbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48ZW0+cGxheTwvZW0+OiBlcyBlbCBjb250ZW5lZG9yIGluaWNpYWwuIFNlIG9jdWx0YSBhbCBtb3N0cmFyIGxvcyByZXN1bHRhZG9zIHkgc2UgdnVlbHZlIGEgY2FyZ2FyIGFsIG1vbWVudG8gZGUgcmVpbnRlbnRhciBsYSBhY3RpdmlkYWQuPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxlbT53b3JkX2NvbnRlbnQ8L2VtPjogZWxlbWVudG8gZG9uZGUgc2UgbW9zdHJhcsOhbiBsYXMgInBhbGFicmFzIiBhIGNsYXNpZmljYXIuIFNlIGVuY3VlbnRyYSBhbCBpbnRlcmlvciBkZWwgY29udGVuZWRvciBtYXJjYWRvIGNvbW8gPGVtPnBsYXk8L2VtPi48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGVtPnllczwvZW0+OiBlbGVtZW50byBxdWUgc2UgY29tcG9ydGEgY29tbyBlbCBzw60gbyB2ZXJkYWRlcm8gYWwgY2xhc2lmaWNhci4gU3VlbGUgc2VyIHVuIDxlbT5idXR0b248L2VtPiBwZXJvIHB1ZWRlIHNlciBjdWFscXVpZXIgb3RybyBlbGVtZW50by48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGVtPm5vdDwvZW0+OiBlbGVtZW50byBxdWUgc2UgY29tcG9ydGEgY29tbyBlbCBubyBvIGZhbHNvIGFsIGNsYXNpZmljYXIuIFN1ZWxlIHNlciB1biA8ZW0+YnV0dG9uPC9lbT4gcGVybyBwdWVkZSBzZXIgY3VhbHF1aWVyIG90cm8gZWxlbWVudG8uPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxlbT5ib3hfY29uY2x1dGlvbjwvZW0+OiBlcyBlbCBjb250ZW5lZG9yIHF1ZSBzZSBtdWVzdHJhIGFsIGZpbmFsaXphciBsYSBjbGFzaWZpY2FjacOzbi4gU2kgc2UgZGVzZWEgcXVlIHNlIG11ZXN0cmVuIGxhcyByZXNwdWVzdGFzIGNvcnJlY3RhbWVudGUgbyBpbmNvcnJlY3RhbWVudGUgY2xhc2lmaWNhZGFzIHNlIGRlYmUgYWRpY2lvbmFyIHVuYSBvIGxhcyBkb3Mgc2lndWllbnRlcyBjbGFzZXMsIHNlZ8O6biBzZSBkZXNlZS4gRWwgbm8gaW5jbHVpciB1bmEgZGUgZWxsYXMgaGFyw6EgcXVlIG5vIHNlIG11ZXN0cmVuIGVzb3MgdGlwb3MgZGUgcmVzdWx0YWRvcy4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZGF0YV9saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGVtPmNvcnJlY3Rfd29yZHM8L2VtPiAob3BjaW9uYWwpOiBjb250ZW5lZG9yIGRvbmRlIHNlIG1vc3RyYXLDoW4gbGFzIHBhbGFicmFzIGNsYXNpZmljYWRhcyBjb3JyZWN0YW1lbnRlLjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxlbT53cm9uZ193b3JkczwvZW0+IChvcGNpb25hbCk6ICBjb250ZW5lZG9yIGRvbmRlIHNlIG1vc3RyYXLDoW4gbGFzIHBhbGFicmFzIHF1ZSBmdWVyb24gY2xhc2lmaWNhZGFzIGluY29ycmVjdGFtZW50ZS48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxlbT5yZWxvYWQ8L2VtPiAob3BjaW9uYWwpOiBlbGVtZW50byBxdWUgY29udHJvbGEgZWwgcmVpbmljaW8gZGUgbGEgYWN0aXZpZGFkIGx1ZWdvIGRlIGNhZGEgcm9uZGEgZGUgY2xhc2lmaWNhY2nDs24uIFNpIG5vIHNlIGFkaWNpb25hLCBsYSBhY3RpdmlkYWQgdGVuZHLDoSB1bmEgc29sYSByb25kYSBkZSBjbGFzaWZpY2FjacOzbi4gU3VlbGUgc2VyIHVuIDxlbT5idXR0b248L2VtPiBwZXJvIHB1ZWRlIHNlciBjdWFscXVpZXIgb3RybyBlbGVtZW50by48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGVtPmhpdHM8L2VtPiAob3BjaW9uYWwpOiBlcyB1biBjb250ZW5lZG9yIGRvbmRlIHNlIGNvcGlhIGxhIGNhbnRpZGFkIGRlIGFjaWVydG9zIGFsIGNsYXNpZmljYXIuPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxlbT5taXNzPC9lbT4gKG9wY2lvbmFsKTogZXMgdW4gY29udGVuZWRvciBkb25kZSBzZSBjb3BpYSBsYSBjYW50aWRhZCBkZSBjbGFzaWZpY2FjaW9uZXMgaW5jb3JyZWN0YXMuPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJob3Jpem9udGFsLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdD5FamVtcGxvPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImpwaXQtYWN0aXZpdGllcy1jaGVjayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8d29yZHM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsPSJ0cnVlIj5NZWRlbGzDrW48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbD0idHJ1ZSI+Q2FydGFnZW5hPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VHVyw61uPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWw9InRydWUiPlNhbnRhIE1hcnRhPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SG9uZyBLb25nPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UXVpdG88L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbD0idHJ1ZSI+VmlsbGF2aWNlbmNpbzwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkxpbWE8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbD0idHJ1ZSI+UGFzdG88L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbD0idHJ1ZSI+QXJtZW5pYTwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3dvcmRzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm9hcmQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrX2xlZnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwbGF5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkluZGlxdWUgc2kgbGEgc2lndWllbnRlIGNpdWRhZCBlcyBvIG5vIGNvbG9tYmlhbmE6PC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id29yZF9jb250ZW50Ij4mbmJzcDs8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ1dHRvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InllcyBnZW5lcmFsIj5TaTwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9Im5vdCBnZW5lcmFsIj5ObzwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3hfY29uY2x1dGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+wqFIYSBmaW5hbGl6YWRvITwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5BbCBjbGFzaWZpY2FyIGhhIHRlbmlkbyBsb3Mgc2lndWllbnRlcyBhY2llcnRvcyB5IGRlc2FjaWVydG9zOjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+QWNpZXJ0b3M6PC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvcnJlY3Rfd29yZHMiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+RGVzYWNpZXJ0b3M6PC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Indyb25nX3dvcmRzIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidXR0b25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJnZW5lcmFsIHJlbG9hZCI+Vm92bGVyIGEgY2xhc2lmaWNhciBsYXMgY2l1ZGFkZXMgaW5jb3JyZWN0YW1lbnRlIGNsYXNpZmljYWRhczwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrX3JpZ2h0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94X3Jlc3VsdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb3JyZWN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaXRzIj4wPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dCI+QWNpZXJ0b3M8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id3JvbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1pc3MiPjA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0Ij5EZXNhY2llcnRvczwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2RsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdD5IVE1MPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQ+DQo8cHJlPg0KJmx0O2RpdiBjbGFzcz0ianBpdC1hY3Rpdml0aWVzLWNoZWNrIiZndDsNCiAgICAmbHQ7d29yZHMmZ3Q7DQogICAgICAgICZsdDtsaSBkYXRhLXZhbD0idHJ1ZSImZ3Q7TWVkZWxsw61uJmx0Oy9saSZndDsNCiAgICAgICAgJmx0O2xpIGRhdGEtdmFsPSJ0cnVlIiZndDtDYXJ0YWdlbmEmbHQ7L2xpJmd0Ow0KICAgICAgICAmbHQ7bGkmZ3Q7VHVyw61uJmx0Oy9saSZndDsNCiAgICAgICAgJmx0O2xpIGRhdGEtdmFsPSJ0cnVlIiZndDtTYW50YSBNYXJ0YSZsdDsvbGkmZ3Q7DQogICAgICAgICZsdDtsaSZndDtIb25nIEtvbmcmbHQ7L2xpJmd0Ow0KICAgICAgICAmbHQ7bGkmZ3Q7UXVpdG8mbHQ7L2xpJmd0Ow0KICAgICAgICAmbHQ7bGkgZGF0YS12YWw9InRydWUiJmd0O1ZpbGxhdmljZW5jaW8mbHQ7L2xpJmd0Ow0KICAgICAgICAmbHQ7bGkmZ3Q7TGltYSZsdDsvbGkmZ3Q7DQogICAgICAgICZsdDtsaSBkYXRhLXZhbD0idHJ1ZSImZ3Q7UGFzdG8mbHQ7L2xpJmd0Ow0KICAgICAgICAmbHQ7bGkgZGF0YS12YWw9InRydWUiJmd0O0FybWVuaWEmbHQ7L2xpJmd0Ow0KICAgICZsdDsvd29yZHMmZ3Q7DQogICAgJmx0O2RpdiBjbGFzcz0iYm9hcmQiJmd0Ow0KICAgICAgICAmbHQ7ZGl2IGNsYXNzPSJjaGVja19sZWZ0IiZndDsNCiAgICAgICAgICAgICZsdDtkaXYgY2xhc3M9InBsYXkiJmd0Ow0KICAgICAgICAgICAgICAgICZsdDtwJmd0O0luZGlxdWUgc2kgbGEgc2lndWllbnRlIGNpdWRhZCBlcyBvIG5vIGNvbG9tYmlhbmE6Jmx0Oy9wJmd0Ow0KICAgICAgICAgICAgICAgICZsdDtkaXYgY2xhc3M9IndvcmRfY29udGVudCImZ3Q7Jm5ic3A7Jmx0Oy9kaXYmZ3Q7DQogICAgICAgICAgICAgICAgJmx0O2RpdiBjbGFzcz0iYnV0dG9ucyImZ3Q7DQogICAgICAgICAgICAgICAgICAgICZsdDtidXR0b24gY2xhc3M9InllcyBnZW5lcmFsIiZndDtTaSZsdDsvYnV0dG9uJmd0Ow0KICAgICAgICAgICAgICAgICAgICAmbHQ7YnV0dG9uIGNsYXNzPSJub3QgZ2VuZXJhbCImZ3Q7Tm8mbHQ7L2J1dHRvbiZndDsNCiAgICAgICAgICAgICAgICAmbHQ7L2RpdiZndDsNCiAgICAgICAgICAgICZsdDsvZGl2Jmd0Ow0KICAgICAgICAgICAgJmx0O2RpdiBjbGFzcz0iYm94X2NvbmNsdXRpb24iJmd0Ow0KICAgICAgICAgICAgICAgICZsdDtoMyZndDvCoUhhIGZpbmFsaXphZG8hJmx0Oy9oMyZndDsNCiAgICAgICAgICAgICAgICAmbHQ7cCZndDtBbCBjbGFzaWZpY2FyIGhhIHRlbmlkbyBsb3Mgc2lndWllbnRlcyBhY2llcnRvcyB5IGRlc2FjaWVydG9zOiZsdDsvcCZndDsNCiAgICAgICAgICAgICAgICAmbHQ7cCZndDsNCiAgICAgICAgICAgICAgICAgICAgJmx0O3N0cm9uZyZndDtBY2llcnRvczombHQ7L3N0cm9uZyZndDsNCiAgICAgICAgICAgICAgICAgICAgJmx0O3NwYW4gY2xhc3M9ImNvcnJlY3Rfd29yZHMiJmd0OyZsdDsvc3BhbiZndDsNCiAgICAgICAgICAgICAgICAmbHQ7L3AmZ3Q7DQogICAgICAgICAgICAgICAgJmx0O3AmZ3Q7DQogICAgICAgICAgICAgICAgICAgICZsdDtzdHJvbmcmZ3Q7RGVzYWNpZXJ0b3M6Jmx0Oy9zdHJvbmcmZ3Q7DQogICAgICAgICAgICAgICAgICAgICZsdDtzcGFuIGNsYXNzPSJ3cm9uZ193b3JkcyImZ3Q7Jmx0Oy9zcGFuJmd0Ow0KICAgICAgICAgICAgICAgICZsdDsvcCZndDsNCiAgICAgICAgICAgICAgICAmbHQ7ZGl2IGNsYXNzPSJidXR0b25zIiZndDsNCiAgICAgICAgICAgICAgICAgICAgJmx0O2J1dHRvbiBjbGFzcz0iZ2VuZXJhbCByZWxvYWQiJmd0O1ZvdmxlciBhIGNsYXNpZmljYXIgbGFzIGNpdWRhZGVzIGluY29ycmVjdGFtZW50ZSBjbGFzaWZpY2FkYXMmbHQ7L2J1dHRvbiZndDsNCiAgICAgICAgICAgICAgICAmbHQ7L2RpdiZndDsNCiAgICAgICAgICAgICZsdDsvZGl2Jmd0Ow0KICAgICAgICAmbHQ7L2RpdiZndDsNCiAgICAgICAgJmx0O2RpdiBjbGFzcz0iY2hlY2tfcmlnaHQiJmd0Ow0KICAgICAgICAgICAgJmx0O2RpdiBjbGFzcz0iYm94X3Jlc3VsdCImZ3Q7DQogICAgICAgICAgICAgICAgJmx0O2RpdiBjbGFzcz0iY29ycmVjdCImZ3Q7DQogICAgICAgICAgICAgICAgICAgICZsdDtkaXYgY2xhc3M9ImhpdHMiJmd0OzAmbHQ7L2RpdiZndDsNCiAgICAgICAgICAgICAgICAgICAgJmx0O2RpdiBjbGFzcz0idGV4dCImZ3Q7QWNpZXJ0b3MmbHQ7L2RpdiZndDsNCiAgICAgICAgICAgICAgICAmbHQ7L2RpdiZndDsNCiAgICAgICAgICAgICAgICAmbHQ7ZGl2IGNsYXNzPSJ3cm9uZyImZ3Q7DQogICAgICAgICAgICAgICAgICAgICZsdDtkaXYgY2xhc3M9Im1pc3MiJmd0OzAmbHQ7L2RpdiZndDsNCiAgICAgICAgICAgICAgICAgICAgJmx0O2RpdiBjbGFzcz0idGV4dCImZ3Q7RGVzYWNpZXJ0b3MmbHQ7L2RpdiZndDsNCiAgICAgICAgICAgICAgICAmbHQ7L2RpdiZndDsNCiAgICAgICAgICAgICZsdDsvZGl2Jmd0Ow0KICAgICAgICAmbHQ7L2RpdiZndDsNCiAgICAmbHQ7L2RpdiZndDsNCiZsdDsvZGl2Jmd0Ow0KPC9wcmU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0PkNTUyBwZXJzb25hbGl6YWRvPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQ+DQo8cHJlIGNsYXNzPSJub3Rtb2JpbGUiPg0KLmpwaXQtYWN0aXZpdGllcy1jaGVjayB7DQogICAgZGlzcGxheTogZmxleDsNCn0NCg0KLmpwaXQtYWN0aXZpdGllcy1jaGVjayAuY2hlY2tfbGVmdCB7DQogICAgZmxvYXQ6IGxlZnQ7DQogICAgd2lkdGg6IDUwJTsNCn0NCg0KLmpwaXQtYWN0aXZpdGllcy1jaGVjayAuY2hlY2tfbGVmdCAud29yZF9jb250ZW50IHsNCiAgICBiYWNrZ3JvdW5kOiAjZmZmZmZmIG5vbmUgcmVwZWF0IHNjcm9sbCAwIDA7DQogICAgYm94LXNoYWRvdzogM3B4IDNweCAzcHggI2RhZGJkYzsNCiAgICBtYXJnaW4tYm90dG9tOiAxMHB4Ow0KICAgIHBhZGRpbmc6IDIwcHggMTBweDsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgZm9udC1zaXplOiAyMHB4Ow0KfQ0KDQouanBpdC1hY3Rpdml0aWVzLWNoZWNrIC5jaGVja19yaWdodCB7DQogICAgZmxvYXQ6IHJpZ2h0Ow0KfQ0KDQouanBpdC1hY3Rpdml0aWVzLWNoZWNrIC5idXR0b25zIHsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQp9DQoNCi5qcGl0LWFjdGl2aXRpZXMtY2hlY2sgLmJ1dHRvbnMgYnV0dG9uLnllcywNCi5qcGl0LWFjdGl2aXRpZXMtY2hlY2sgLmJ1dHRvbnMgYnV0dG9uLm5vdCB7DQogICAgZm9udC1zaXplOiAzMHB4Ow0KfQ0KDQouanBpdC1hY3Rpdml0aWVzLWNoZWNrIC5ib3hfcmVzdWx0IHsNCiAgICBmbG9hdDogbGVmdDsNCiAgICBmb250LXNpemU6IDIwcHg7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KfQ0KDQouanBpdC1hY3Rpdml0aWVzLWNoZWNrIC5ib3hfcmVzdWx0ID4gZGl2IHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOw0KICAgIGJveC1zaGFkb3c6IDNweCAzcHggM3B4ICNjYmNjY2M7DQogICAgcGFkZGluZzogMTBweDsNCiAgICB3aWR0aDogMTEwcHg7DQogICAgZmxvYXQ6IGxlZnQ7DQogICAgbWFyZ2luOiAwIDEwcHg7DQp9DQoNCi5qcGl0LWFjdGl2aXRpZXMtY2hlY2sgLmJveF9yZXN1bHQgLmNvcnJlY3Qgew0KICAgIGNvbG9yOiAjOGJjNTQxOw0KfQ0KLmpwaXQtYWN0aXZpdGllcy1jaGVjayAuYm94X3Jlc3VsdCAuaGl0cyB7DQogICAgZm9udC1zaXplOjMwcHg7DQp9DQoNCi5qcGl0LWFjdGl2aXRpZXMtY2hlY2sgLmJveF9yZXN1bHQgLndyb25nIHsNCiAgICBjb2xvcjogI2Q2MGMxYjsNCn0NCi5qcGl0LWFjdGl2aXRpZXMtY2hlY2sgLmJveF9yZXN1bHQgLm1pc3Mgew0KICAgIGZvbnQtc2l6ZTozMHB4Ow0KfQ0KPC9wcmU+DQo8cHJlIGNsYXNzPSJvbmx5bW9iaWxlIj4NCi5qcGl0LWFjdGl2aXRpZXMtY2hlY2sgLmNoZWNrX2xlZnQgew0KICAgIG1hcmdpbi1ib3R0b206IDEwcHg7DQp9DQoNCi5qcGl0LWFjdGl2aXRpZXMtY2hlY2sgLmNoZWNrX2xlZnQgLndvcmRfY29udGVudCB7DQogICAgYmFja2dyb3VuZDogI2ZmZmZmZiBub25lIHJlcGVhdCBzY3JvbGwgMCAwOw0KICAgIGJveC1zaGFkb3c6IDNweCAzcHggM3B4ICNkYWRiZGM7DQogICAgbWFyZ2luLWJvdHRvbTogMTBweDsNCiAgICBwYWRkaW5nOiAyMHB4IDEwcHg7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgIGZvbnQtc2l6ZTogMjBweDsNCn0NCg0KLmpwaXQtYWN0aXZpdGllcy1jaGVjayAuYnV0dG9ucyB7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KfQ0KDQouanBpdC1hY3Rpdml0aWVzLWNoZWNrIC5idXR0b25zIGJ1dHRvbi55ZXMsDQouanBpdC1hY3Rpdml0aWVzLWNoZWNrIC5idXR0b25zIGJ1dHRvbi5ub3Qgew0KICAgIGZvbnQtc2l6ZTogMjBweDsNCn0NCg0KLmpwaXQtYWN0aXZpdGllcy1jaGVjayAuYm94X3Jlc3VsdCB7DQogICAgZmxvYXQ6IGxlZnQ7DQogICAgZm9udC1zaXplOiAyMHB4Ow0KICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCn0NCg0KLmpwaXQtYWN0aXZpdGllcy1jaGVjayAuYm94X3Jlc3VsdCA+IGRpdiB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjsNCiAgICBib3gtc2hhZG93OiAzcHggM3B4IDNweCAjY2JjY2NjOw0KICAgIHBhZGRpbmc6IDEwcHg7DQogICAgd2lkdGg6IDExMHB4Ow0KICAgIGZsb2F0OiBsZWZ0Ow0KICAgIG1hcmdpbjogMCAxMHB4Ow0KfQ0KDQouanBpdC1hY3Rpdml0aWVzLWNoZWNrIC5ib3hfcmVzdWx0IC5jb3JyZWN0IHsNCiAgICBjb2xvcjogIzhiYzU0MTsNCn0NCi5qcGl0LWFjdGl2aXRpZXMtY2hlY2sgLmJveF9yZXN1bHQgLmhpdHMgew0KICAgIGZvbnQtc2l6ZTozMHB4Ow0KfQ0KDQouanBpdC1hY3Rpdml0aWVzLWNoZWNrIC5ib3hfcmVzdWx0IC53cm9uZyB7DQogICAgY29sb3I6ICNkNjBjMWI7DQp9DQouanBpdC1hY3Rpdml0aWVzLWNoZWNrIC5ib3hfcmVzdWx0IC5taXNzIHsNCiAgICBmb250LXNpemU6MzBweDsNCn0NCjwvcHJlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2RsPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+TWFyY2FyPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBTaXJ2ZSBwYXJhIHNlw7FhbGFyIHpvbmFzIGRlbnRybyBkZSB1bmEgaW1hZ2VuLCBkZWZpbmllbmRvIGN1YWxlcyBzb24gY29ycmVjdGFzIHkgY3VhbGVzIG5vLiBVbmEgYWN0aXZpZGFkIGRlIGNsYXNpZmljYXIgc2UgZGVmaW5lIGFncmVnYW5kbyBsYSBjbGFzZSA8ZW0+anBpdC1hY3Rpdml0aWVzLW1hcms8L2VtPiBhIHVuIGNvbnRlbmVkb3IgeSBzZSBkZWJlbiBkZWZpbmlyICLDoXJlYXMiIGNvbiBsYSBldGlxdWV0YSA8ZW0+YXJlYTwvZW0+IGluZGljYW5kbyBjdWFsZXMgw6FyZWFzIHNvbiBjb3JyZWN0YXMgbWVkaWFudGUgZWwgYXRyaWJ1dG8gPGVtPmNvcnJlY3Q8L2VtPiBjb24gdmFsb3IgPGVtPnRydWU8L2VtPiwgbGFzIHBvc2ljaW9uZXMgZW4gPGVtPng8L2VtPiB5IGVuIDxlbT55PC9lbT4geSBlbCB0YW1hw7FvIGRlIGFuY2hvICg8ZW0+dzwvZW0+KSB5IGFsdG8gKDxlbT5oPC9lbT4pLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgTGEgcmV0cm9hbGltZW50YWNpw7NuIHNlIHB1ZWRlIGFkaWNpb25hciBhIGxhIGFjdGl2aWRhZCBtZWRpYW50ZSB1biBlbGVtZW50byA8ZW0+ZmVlZGJhY2s8L2VtPiBxdWUgdGllbmUgZG9zIHBvc2libGVzIHZhbG9yZXMsIGRlZmluaWRvcyBjb24gbG9zIGVsZW1lbnRvcyA8ZW0+Y29ycmVjdDwvZW0+IHkgPGVtPndyb25nPC9lbT4uDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJob3Jpem9udGFsLW1lbnUgcGFnLWFjdGl2aWRhZGVzLW1hcmNhciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0PkVqZW1wbG88L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ianBpdC1hY3Rpdml0aWVzLW1hcmsiIGRhdGEtYWN0LWlkPSJtYXJjYXJfMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iY29udGVudC9wYWdpbmEuanBnIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFyZWEgc2hhcGU9InJlY3QiIGNvcnJlY3Q9InRydWUiIHg9IjAiIHk9IjAiIHc9IjE3MCIgaD0iMTU1IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFyZWEgc2hhcGU9InJlY3QiIGNvcnJlY3Q9ImZhbHNlIiB4PSIyMDAiIHk9IjUiIHc9IjE2NSIgaD0iMTQwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFyZWEgc2hhcGU9InJlY3QiIGNvcnJlY3Q9ImZhbHNlIiB4PSI1IiB5PSIxODUiIHc9IjE3MCIgaD0iMjEwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFyZWEgc2hhcGU9InJlY3QiIGNvcnJlY3Q9InRydWUiIHg9IjE4NSIgeT0iMTU1IiB3PSIxODAiIGg9IjI0MCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmZWVkYmFjaz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29ycmVjdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9zIGVsZW1lbnRvcyBxdWUgaGEgbWFyY2FkbyBlbiBsYSBpbWFnZW4gc29uIGxvcyBjb3JyZWN0b3MgwqFGZWxpY2l0YWNpb25lcyENCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NvcnJlY3Q+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHdyb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBObyBzZSBtYXJjYXJvbiB0b2RhcyBsYXMgw6FyZWFzIGNvcnJlY3Rhcy4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3dyb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mZWVkYmFjaz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0PkhUTUw8L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZD4NCjxwcmU+DQombHQ7ZGl2IGNsYXNzPSJqcGl0LWFjdGl2aXRpZXMtbWFyayImZ3Q7DQogICAgJmx0O2ltZyBzcmM9ImNvbnRlbnQvcGFnaW5hLmpwZyIgLyZndDsNCiAgICAmbHQ7YXJlYSBzaGFwZT0icmVjdCIgY29ycmVjdD0idHJ1ZSIgeD0iMCIgeT0iMCIgdz0iMTcwIiBoPSIxNTUiIC8mZ3Q7DQogICAgJmx0O2FyZWEgc2hhcGU9InJlY3QiIGNvcnJlY3Q9ImZhbHNlIiB4PSIyMDAiIHk9IjUiIHc9IjE2NSIgaD0iMTQwIiAvJmd0Ow0KICAgICZsdDthcmVhIHNoYXBlPSJyZWN0IiBjb3JyZWN0PSJmYWxzZSIgeD0iNSIgeT0iMTg1IiB3PSIxNzAiIGg9IjIxMCIgLyZndDsNCiAgICAmbHQ7YXJlYSBzaGFwZT0icmVjdCIgY29ycmVjdD0idHJ1ZSIgeD0iMTg1IiB5PSIxNTUiIHc9IjE4MCIgaD0iMjQwIiAvJmd0Ow0KICAgICZsdDtmZWVkYmFjayZndDsNCiAgICAgICAgJmx0O2NvcnJlY3QmZ3Q7DQogICAgICAgICAgICBMb3MgZWxlbWVudG9zIHF1ZSBoYSBtYXJjYWRvIGVuIGxhIGltYWdlbiBzb24gbG9zIGNvcnJlY3RvcyDCoUZlbGljaXRhY2lvbmVzIQ0KICAgICAgICAmbHQ7L2NvcnJlY3QmZ3Q7DQogICAgICAgICZsdDt3cm9uZyZndDsNCiAgICAgICAgICAgIE5vIHNlIG1hcmNhcm9uIHRvZGFzIGxhcyDDoXJlYXMgY29ycmVjdGFzLg0KICAgICAgICAmbHQ7L3dyb25nJmd0Ow0KICAgICZsdDsvZmVlZGJhY2smZ3Q7DQombHQ7L2RpdiZndDsNCjwvcHJlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2RsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdD5DU1MgcGVyc29uYWxpemFkbzwvZHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRkPg0KPHByZT4NCi5qcGl0LWFjdGl2aXRpZXMtbWFyayB7DQogICAgd2lkdGg6IDQwMHB4Ow0KICAgIG1hcmdpbjogYXV0bzsNCn0NCjwvcHJlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2RsPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgIEVuIGxhIGNvbmZpZ3VyYWNpw7NuIHBvciBkZWZlY3RvIMO6bmljYW1lbnRlIHNlIHB1ZWRlbiBkZWZpbmlyIHJlY3TDoW5ndWxvcy4gRXhpc3RlIHVuYSBwb3NpYmlsaWRhZCBwYXJhIGRlZmluaXIgb3RybyB0aXBvIGRlIMOhcmVhcy4gUGFyYSBlbGxvIHNlIHJlcXVpZXJlOg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZGF0YV9saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbiBlbCBjb250ZW5lZG9yIHByaW5jaXBhbCwgZXN0YWJsZWNlciBlbCBhdHJpYnV0byA8ZW0+ZGF0YS1tYXJrLXR5cGU8L2VtPiBhbCB2YWxvciBkZSA8ZW0+bWFwPC9lbT4uPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EZWZpbmlyIHVuIG1hcGEgY29uIGxhcyDDoXJlYXMgY29ycmVzcG9uZGllbnRlcywgc2lndWllbmRvIGVsIGVzcXVlbWEgZGUgPGEgaHJlZj0iaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS90YWdzL3RhZ19tYXAuYXNwIiB0YXJnZXQ9Il9ibGFuayI+bWFwYXM8L2E+IGRlIGltw6FnZW5lcyBkZSBIVE1MLjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWRpY2lvbmFyIGEgbGEgaW1hZ2VuIGVsIGF0cmlidXRvIDxlbT51c2VtYXA8L2VtPiBpbmRpY2FuZG8gZWwgbWFwYSBxdWUgbG8gZGVmaW5lLCBwcmVkZWNpZG8gcG9yIGVsIGNhcmFjdMOpciA8c3Ryb25nPiM8L3N0cm9uZz4uPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MYXMgw6FyZWFzIGRlYmVuIHRlbmVyIGVsIGF0cmlidXRvIDxlbT5jb3JyZWN0PC9lbT4gaW5kaWNhbmRvIGN1w6FsZXMgw6FyZWFzIHNvbiBjb3JyZWN0YXMgbWVkaWFudGUgZWwgdmFsb3IgPGVtPnRydWU8L2VtPi48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk9wY2lvbmFsbWVudGUsIGRlZmluaXIgZWwgYXNwZWN0byBncsOhZmljbyBkZSBsb3MgbWFyY2Fkb3JlcyBhZGljaW9uYW5kbyB1bm8gbyB2YXJpb3MgZGUgbG9zIHNpZ3VpZW50ZXMgYXRyaWJ1dG9zIGEgbml2ZWwgZGVsIGNvbnRlbmVkb3IgcHJpbmNpcGFsOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZGF0YV9saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxlbT5kYXRhLW1hcmstZmlsbC1jb2xvcjwvZW0+OiBjb2xvciBhbCBpbnRlcmlvciBkZSBsYSBtYXJjYS48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGVtPmRhdGEtbWFyay1zdHJva2UtY29sb3I8L2VtPjogY29sb3IgZGVsIGJvcmRlIGRlIGxhIG1hcmNhLjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48ZW0+ZGF0YS1tYXJrLW9wYWNpdHk8L2VtPjogb3BhY2lkYWQgZGUgbGEgbWFyY2EuPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJob3Jpem9udGFsLW1lbnUgcGFnLWFjdGl2aWRhZGVzLW1hcmNhciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0PkVqZW1wbG88L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ianBpdC1hY3Rpdml0aWVzLW1hcmsiIGRhdGEtYWN0LWlkPSJtYXJjYXJfMiIgZGF0YS1tYXJrLXR5cGU9Im1hcCIgZGF0YS1tYXJrLWZpbGwtY29sb3I9ImZmZmYwMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iY29udGVudC9wYWdpbmEuanBnIiB1c2VtYXA9IiNtYXJrbWFwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hcCBuYW1lPSJtYXJrbWFwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXJlYSBzaGFwZT0icmVjdCIgY29ycmVjdD0idHJ1ZSIgY29vcmRzPSIxMCwwLDE4MCwxNTUiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFyZWEgc2hhcGU9InBvbHkiIGNvb3Jkcz0iMjQyLDksMTk5LDMwLDIwNSw3OSwyNTIsOTEsMzIyLDkyLDM2OSw4MCwzNjcsNzEsMzQzLDY3LDM0NSwxNSwyODgsMTIsMjgyLDAsMjYxLDUsMjUxLDgiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFyZWEgc2hhcGU9ImNpcmNsZSIgY29vcmRzPSI5NSwyOTAsODUiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFyZWEgc2hhcGU9InJlY3QiIGNvcnJlY3Q9InRydWUiIGNvb3Jkcz0iMTg1LDE2MCwzNjUsMzk1IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYXA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2RsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdD5IVE1MPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQ+DQo8cHJlPg0KJmx0O2RpdiBjbGFzcz0ianBpdC1hY3Rpdml0aWVzLW1hcmsiIGRhdGEtbWFyay10eXBlPSJtYXAiIGRhdGEtbWFyay1maWxsLWNvbG9yPSJmZmZmMDAiJmd0Ow0KICAgICZsdDtpbWcgc3JjPSJjb250ZW50L3BhZ2luYS5qcGciIHVzZW1hcD0iI21hcmttYXAiIC8mZ3Q7DQogICAgJmx0O21hcCBuYW1lPSJtYXJrbWFwIiZndDsNCiAgICAgICAgJmx0O2FyZWEgc2hhcGU9InJlY3QiIGNvcnJlY3Q9InRydWUiIGNvb3Jkcz0iMTAsMCwxODAsMTU1IiAvJmd0Ow0KICAgICAgICAmbHQ7YXJlYSBzaGFwZT0icG9seSIgY29vcmRzPSIyNDIsOSwxOTksMzAsMjA1LDc5LDI1Miw5MSwzMjIsOTIsMzY5LDgwLDM2Nyw3MSwzNDMsNjcsMzQ1LDE1LDI4OCwxMiwyODIsMCwyNjEsNSwyNTEsOCIgLyZndDsNCiAgICAgICAgJmx0O2FyZWEgc2hhcGU9ImNpcmNsZSIgY29vcmRzPSI5NSwyOTAsODUiIC8mZ3Q7DQogICAgICAgICZsdDthcmVhIHNoYXBlPSJyZWN0IiBjb3JyZWN0PSJ0cnVlIiBjb29yZHM9IjE4NSwxNjAsMzY1LDM5NSIgLyZndDsNCiAgICAmbHQ7L21hcCZndDsNCiZsdDsvZGl2Jmd0Ow0KPC9wcmU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0PkNTUyBwZXJzb25hbGl6YWRvPC9kdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQ+DQo8cHJlPg0KLmpwaXQtYWN0aXZpdGllcy1tYXJrIHsNCiAgICB3aWR0aDogNDAwcHg7DQogICAgbWFyZ2luOiBhdXRvOw0KfQ0KPC9wcmU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveC10ZXh0IG5vdGUiIGxhYmVsPSJOb3RhIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIEVzdGUgc2VndW5kbyB0aXBvIGRlIG1hcmNhcyBubyBzZSByZXNhbHRhbiBhbnRlcyBkZSBzZXIgc2VsZWNjaW9uYWRhcyBuaSB0aWVuZW4gZWZlY3RvIGNvbiBlbCAibW91c2Ugc29icmUiIGZ1ZXJhIGRlbCBjYW1iaW8gZW4gZWwgY3Vyc29yIGRlbCBtb3VzZS4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIiBpZD0icGFnLWFjdGl2aWRhZGVzLWZvcm0iPg0KICAgICAgICAgICAgICAgICAgICA8aDM+Rm9ybXVsYXJpbzwvaDM+DQoNCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBVbmEgYWN0aXZpZGFkIGRlIGZvcm11bGFyaW8gc2UgZGVmaW5lIGFncmVnYW5kbyBsYSBjbGFzZSA8ZW0+anBpdC1hY3Rpdml0aWVzLWZvcm08L2VtPiBhIHVuIGNvbnRlbmVkb3IgeSwgZGVudHJvIGRlIMOpbCwgY29uc3RydXllbmRvIGVsIGNvbnRlbmlkbyBIVE1MIHF1ZSBpbmNsdXlhIGNvbnRyb2xlcyBkZSBmb3JtdWxhcmlvIDxlbT50ZXh0YXJlYTwvZW0+IG8gPGVtPmlucHV0PC9lbT4gdGlwbyA8ZW0+dGV4dDwvZW0+Lg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgU2lydmUgcGFyYSByZWNpYmlyIGluZm9ybWFjacOzbiBkZWwgdXN1YXJpbyBlbiBjYW1wb3MgZGUgZm9ybXVsYXJpbyBlIGltcHJpbWlybG9zIG8gZ3VhcmRhcmxvcyAoc29sbyBwYXJhIHBhcXVldGVzIGVuIG1vZG8gU0NPUk0pLiBMb3MgY2FtcG9zIGRlIGZvcm11bGFyaW8gcHVlZGVuIHRlbmVyIGVsIGF0cmlidXRvIDxlbT5uYW1lPC9lbT4gcXVlIGNvcnJlc3BvbmRlIGFsIG5vbWJyZSBjb24gcXVlIHNlIGFsbWFjZW5hcsOhIGVsIGNhbXBvIChzaSBlbCBjYW1wbyBubyB0aWVuZSBlc3RlIGF0cmlidXRvIG5vIHNlIGFsbWFjZW5hKSB5IGVsIGF0cmlidXRvIDxlbT5mdGl0bGU8L2VtPiBxdWUgY29ycmVzcG9uZGUgYSBsYSBldGlxdWV0YSB1dGlsaXphZGEgY29tbyBzdWJ0w610dWxvIGFsIG1vbWVudG8gZGUgaW1wcmltaXIuIEVzdGEgYWN0aXZpZGFkIHNlIGNhbGlmaWNhIGFsIDEwMCUgc2ltcGxlbWVudGUgY29uIHF1ZSBlbCB1c3VhcmlvIGFsbWFjZW5lIHVuIHZhbG9yLCBubyBlcyBjYWxpZmljYWJsZSBwb3IgZWwgdmFsb3IgcXVlIHNlIGluZ3Jlc2EuDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBQYXJhIGRldGVybWluYXIgbGFzIG9wZXJhY2lvbmVzIGRpc3BvbmlibGVzIHNlIGRlYmUgaW5jbHVpciBsb3MgYXRyaWJ1dG9zOiA8ZW0+ZGF0YS1wcmludDwvZW0+IChzaSBlbCBjb250ZW5pZG8gZXMgaW1wcmltaWJsZSkgeSA8ZW0+ZGF0YS1zYXZlPC9lbT4gKHNpIHNlIGFsbWFjZW5hIGVsIHZhbG9yIGVuIGVsIHBhcXVldGUgU0NPUk0pLiBTaSB0b2RvcyBsb3MgY2FtcG9zIHNvbiBvYmxpZ2F0b3Jpb3MgZGViZSBkZWZpbmlyc2UgZWwgYXRyaWJ1dG8gPGVtPmRhdGEtcmVxdWlyZS1hbGw8L2VtPi4gQ3VhbmRvIHNlIGFsbWFjZW5hbiBsYXMgaW50ZXJhY2Npb25lcyBzZSBhbG1hY2VuYSBjb21vIHJldHJvYWxpbWVudGFjacOzbiBlbCBjb250ZW5pZG8gZGVsIGZvcm11bGFyaW8gcGVybyBzb2xhbWVudGUgbG9zIHByaW1lcm9zIDI1NiBjYXJhY3RlcmVzLCBlc28gbm8gYWx0ZXJhIGxhIGluZm9ybWFjacOzbiBxdWUgc2UgZ3VhcmRhLCBzb2xhbWVudGUgbGEgcXVlIGVzIHZpc2libGUgZW4gcHJpbWVyYSBpbnN0YW5jaWEgcGFyYSBxdWllbiByZXZpc2UgbG9zIGluZm9ybWVzIGRlbCBwYXF1ZXRlLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBQYXJhIHByb3BvcmNpb25hciBheXVkYSBzb2JyZSBsb3MgY2FtcG9zIHNlIHJlY29taWVuZGFuIGRvcyBtw6l0b2RvczogZWwgcHJpbWVybyBlcyB1dGlsaXphciBlbCBhdHJpYnV0byA8YSBocmVmPSJodHRwczovL3d3dy53M3NjaG9vbHMuY29tL3RhZ3MvYXR0X3BsYWNlaG9sZGVyLmFzcCIgdGFyZ2V0PSJfYmxhbmsiPnBsYWNlaG9sZGVyPC9hPiB5IGVsIHNlZ3VuZG8gZXMgYWdyZWdhciBheXVkYXMgdXRpbGl6YW5kbyBsb3MgdG9vbHRpcC4gRW4gZWwgZWplbXBsbyBzZSBtdWVzdHJhbiBhbWJhcyBwb3NpYmlsaWRhZGVzLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaG9yaXpvbnRhbC1tZW51Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVqZW1wbG8NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ianBpdC1hY3Rpdml0aWVzLWZvcm0iIGRhdGEtc2F2ZT0idHJ1ZSIgZGF0YS1wcmludD0idHJ1ZSIgZGF0YS1yZXF1aXJlLWFsbD0idHJ1ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaGVldCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2hlZXRfYm9keSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm9tYnJlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9Im5vbWJyZSIgZnRpdGxlPSJOb21icmUiIHBsYWNlaG9sZGVyPSJFc2NyaWJlIGVuIGVzdGUgZXNwYWNpbyB0dSBub21icmUiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPcGluacOzbjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBuYW1lPSJvcGluaW9uIiBjbGFzcz0idG9vbHRpcCIgdGl0bGU9IkVzY3JpYmUgZW4gZXN0ZSBlc3BhY2lvIHR1IG9waW5pw7NuIiBkYXRhLXBvc2l0aW9uLWF0PSJyaWdodCBib3R0b20iID48L3RleHRhcmVhPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0PkhUTUw8L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZD4NCjxwcmU+DQombHQ7ZGl2IGNsYXNzPSJqcGl0LWFjdGl2aXRpZXMtZm9ybSIgZGF0YS1zYXZlPSJ0cnVlIiBkYXRhLXByaW50PSJ0cnVlIiBkYXRhLXJlcXVpcmUtYWxsPSJ0cnVlIiZndDsNCiAgICAmbHQ7ZGl2IGNsYXNzPSJzaGVldCImZ3Q7DQogICAgICAgICZsdDtkaXYgY2xhc3M9InNoZWV0X2JvZHkiJmd0Ow0KICAgICAgICAgICAgJmx0O3AmZ3Q7DQogICAgICAgICAgICAgICAgTm9tYnJlOg0KICAgICAgICAgICAgICAgICZsdDtpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJub21icmUiIGZ0aXRsZT0iTm9tYnJlIg0KICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRXNjcmliZSBlbiBlc3RlIGVzcGFjaW8gdHUgbm9tYnJlIiAvJmd0Ow0KICAgICAgICAgICAgJmx0Oy9wJmd0Ow0KICAgICAgICAgICAgJmx0O3AmZ3Q7DQogICAgICAgICAgICAgICAgT3BpbmnDs246DQogICAgICAgICAgICAgICAgJmx0O3RleHRhcmVhIG5hbWU9Im9waW5pb24iDQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0b29sdGlwIiB0aXRsZT0iRXNjcmliZSBlbiBlc3RlIGVzcGFjaW8gdHUgb3BpbmnDs24iDQogICAgICAgICAgICAgICAgICAgIGRhdGEtcG9zaXRpb24tYXQ9InJpZ2h0IGJvdHRvbSIgJmd0OyZsdDsvdGV4dGFyZWEmZ3Q7DQogICAgICAgICAgICAmbHQ7L3AmZ3Q7DQogICAgICAgICZsdDsvZGl2Jmd0Ow0KICAgICZsdDsvZGl2Jmd0Ow0KJmx0Oy9kaXYmZ3Q7DQo8L3ByZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHQ+Q1NTIHBlcnNvbmFsaXphZG88L2R0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZD4NCjxwcmU+DQouanBpdC1hY3Rpdml0aWVzLWZvcm0gLnNoZWV0IHsNCiAgICBiYWNrZ3JvdW5kOiB1cmwoLi4vaW1nL2JnX3BhcGVsLnBuZykgcmVwZWF0LXggbGVmdCB0b3A7DQogICAgd2lkdGg6IDQxMHB4Ow0KICAgIG1hcmdpbjogYXV0bzsNCiAgICBwYWRkaW5nLXRvcDogMzVweDsNCn0NCg0KLmpwaXQtYWN0aXZpdGllcy1mb3JtIC5zaGVldF9ib2R5IHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjZmNWYyOw0KICAgIHBhZGRpbmc6IDEwcHggMjBweDsNCiAgICBib3gtc2hhZG93OiAzcHggM3B4IDBweCAjY2JjY2NjOw0KfQ0KDQouanBpdC1hY3Rpdml0aWVzLWZvcm0gaW5wdXRbdHlwZT10ZXh0XSB7DQogICAgYm9yZGVyOiAycHggZG90dGVkICNhYWFhYWE7DQogICAgd2lkdGg6IDk0JTsNCiAgICBtYXJnaW4tYm90dG9tOiAxMHB4Ow0KICAgIHBhZGRpbmc6IDVweCAzJTsNCn0NCg0KLmpwaXQtYWN0aXZpdGllcy1mb3JtIHRleHRhcmVhIHsNCiAgICB3aWR0aDogOTQlOw0KICAgIGhlaWdodDogNDBweDsNCiAgICBwYWRkaW5nOiAzJTsNCiAgICBib3JkZXI6IDJweCBkb3R0ZWQgI2FhYWFhYTsNCn0NCjwvcHJlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2RsPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvc2VjdGlvbj4NCg0KICAgICAgICAgICAgPCEtLVJlZmVyZW5jaWFzLS0+DQogICAgICAgICAgICA8c2VjdGlvbiBpZD0icGFnLXJlZmVyZW5jaWFzIiBwdGl0bGU9IjUuIFJlZmVyZW5jaWFzIj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiPg0KICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgIExvIHNpZ3VpZW50ZSBlcyB1bmEgZ3XDrWEgc3VnZXJpZGEgcGFyYSByZWZlcmVuY2lhciByZWN1cnNvcyBkaWdpdGFsZXMgY29tbyBpbcOhZ2VuZXMsIHZpZGVvcyB5IG90cm9zIGVsZW1lbnRvcyB1dGlsaXphZG9zIGNvbW8gcGFydGUgZGVsIGNvbnRlbmlkbyBlbiBlbCBtb250YWplIGRlbCBkb2N1bWVudG8gaGlwZXJtZWRpYWwuIEVsIGNvbnRlbmVkb3IgZGUgbGEgcmVmZXJlbmNpYSBkZWJlIHRlbmVyIGxhIGNsYXNlIDxlbT5hYm91dDwvZW0+LCBhZGVtw6FzIHNlIHJlY29taWVuZGEgcXVlIGVsIHJlY3Vyc28geSBzdSByZWZlcmVuY2lhIGVzdMOpbiBlbiB1biBjb250ZW5lZG9yIGNvbiBsYSBjbGFzZSA8ZW0+Ym94X21lZGlhPC9lbT4uDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94LXRleHQgZXhhbXBsZSIgbGFiZWw9IkPDs2RpZ28gZGUgZWplbXBsbyI+DQo8cHJlPg0KJmx0O2RpdiBjbGFzcz0iYm94X21lZGlhIiZndDsNCiAgICAmbHQ7aW1nIHNyYz0iY29udGVudC9lbF9iZXNvX3VkZWEucG5nIiAvJmd0Ow0KICAgICZsdDtkaXYgY2xhc3M9ImFib3V0IiZndDsNCiAgICAgICAgJmx0O3N0cm9uZyZndDtJbWFnZW4gMTogJmx0Oy9zdHJvbmcmZ3Q7DQogICAgICAgIEVsIGJlc28sIGZvdG9ncmFmw61hIGNvbiByZXRvcXVlIGRpZ2l0YWwgKDIwMTMpLg0KICAgICZsdDsvZGl2Jmd0Ow0KJmx0Oy9kaXYmZ3Q7DQo8L3ByZT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPlNpIGxhIGF1dG9yw61hIGVzIGRlbCBwcm95ZWN0bzwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxwPlNpIGVsIHJlY3Vyc28gZXMgZGUgYXV0b3LDrWEgZGVsIHByb3llY3RvLCBwb3IgZWplbXBsbyBwYXJhIGRpc2XDsW8gZGUgdmVjdG9yZXMsIGlsdXN0cmFjaW9uZXMgbyBmb3RvZ3JhZsOtYXMgZGUgYXV0b3LDrWEgZGUgdW5vIGRlIGxvcyBtaWVtYnJvcyBkZWwgZXF1aXBvIGRlIHRyYWJham8sIG8gZW4gZ2VuZXJhbCBlcyB1biBhcmNoaXZvIHByb2R1Y2lkbyBwYXJhIGxhIHJlYWxpemFjacOzbiBkZWwgcHJveWVjdG8sIHNlIGNpdGEgZGUgbGEgc2lndWllbnRlIG1hbmVyYTo8L3A+DQogICAgICAgICAgICAgICAgICAgIDxibG9ja3F1b3RlPjxzdHJvbmc+VGlwbyBkZSByZWN1cnNvICMuPC9zdHJvbmc+IE5vbWJyZSBkZWwgcmVjdXJzbyAoYcOxbykuPC9ibG9ja3F1b3RlPg0KICAgICAgICAgICAgICAgICAgICA8cD5FbiBlbCBwaWUgZGUgZm90byBubyBzZSBwb25lIGVsIGF1dG9yLCBwdWVzdG8gcXVlIHlhIGFwYXJlY2Vyw6EgZW4gbG9zIGNyw6lkaXRvcyBnZW5lcmFsZXMgZGVsIGRvY3VtZW50by48L3A+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveF9tZWRpYSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iY29udGVudC9lbF9iZXNvX3VkZWEucG5nIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWJvdXQiPjxzdHJvbmc+SW1hZ2VuIDEuIDwvc3Ryb25nPkVsIGJlc28sIGZvdG9ncmFmw61hIGNvbiByZXRvcXVlIGRpZ2l0YWwgKDIwMTMpLjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+U2kgbGEgYXV0b3LDrWEgZXMgZGUgdW4gcHJvdmVlZG9yIGFqZW5vIGFsIGVxdWlwbyBkZSB0cmFiYWpvPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPHA+U2kgZWwgcmVjdXJzbyBwcm92aWVuZSBkZSBsYSBlbXByZXNhIG8gZW50aWRhZCBhIHF1aWVuIHNlIGxlIGVzdMOhIHByZXN0YW5kbyBlbCBzZXJ2aWNpbyBkZSBwcm9kdWNjacOzbiwgZWwgcGllIGRlIGltYWdlbiBzZSB1c2EgZGUgbGEgc2lndWllbnRlIG1hbmVyYTo8L3A+DQogICAgICAgICAgICAgICAgICAgIDxibG9ja3F1b3RlPjxzdHJvbmc+VGlwbyBkZSByZWN1cnNvICMuPC9zdHJvbmc+IE5vbWJyZSBkZWwgcmVjdXJzby48YnIgLz48c3Ryb25nPkZ1ZW50ZTo8L3N0cm9uZz4gbm9tYnJlIGVudGlkYWQgcXVlIHN1bWluaXN0cmEgbGEgZm90b2dyYWbDrWEgKGHDsW8pLjwvYmxvY2txdW90ZT4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94X21lZGlhIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJjb250ZW50L2VsX2Jlc29fdWRlYS5wbmciIC8+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhYm91dCI+PHN0cm9uZz5JbWFnZW4gMi4gPC9zdHJvbmc+RWwgYmVzbywgZm90b2dyYWbDrWEgY29uIHJldG9xdWUgZGlnaXRhbC4gPGJyIC8+PHN0cm9uZz5GdWVudGU6PC9zdHJvbmc+IEJhbWJ1Q28gKDIwMTMpLjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnBhZ2UiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+U2kgbGEgYXV0b3LDrWEgZXMgZGUgYXRyaWJ1Y2nDs248L2gzPg0KICAgICAgICAgICAgICAgICAgICA8cD5TaSBlbCByZWN1cnNvIHRpZW5lIGRlcmVjaG9zIGRlIGF0cmlidWNpw7NuIGJham8gdW5hIGxpY2VuY2lhIGFiaWVydGEgY29tbyBsYSBsaWNlbmNpYSBjcmVhdGl2ZSBjb21tb25zLCBzZSBoYWNlIGxhIGNpdGEgZGVsIGF1dG9yIGRlIGxhIHNpZ3VpZW50ZSBtYW5lcmE6PC9wPg0KICAgICAgICAgICAgICAgICAgICA8YmxvY2txdW90ZT48c3Ryb25nPlRpcG8gZGUgcmVjdXJzbyAjLjwvc3Ryb25nPiBOb21icmUgZGVsIHJlY3Vyc28uIDxiciAvPjxzdHJvbmc+RnVlbnRlOjwvc3Ryb25nPiA8YSBocmVmPSIjIj5BdXRvcjwvYT4gKEHDsW8pLjwvYmxvY2txdW90ZT4NCiAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5JbXBvcnRhbnRlOjwvc3Ryb25nPiBlbCBub21icmUgZGVsIDxlbT48YSBocmVmPSIjIj5BdXRvcjwvYT4gKEHDsW8pLjwvZW0+LCBkZWJlcsOhIGVzdGFyIGhpcGVydmluY3VsYWRvLCBzaWVtcHJlIHF1ZSBzZWEgcG9zaWJsZSwgYWwgc2l0aW8gZG9uZGUgc2UgZW5jdWVudHJlIGVsIHJlY3Vyc28gZW4gSW50ZXJuZXQgbyBkb25kZSBoYXlhIGluZm9ybWFjacOzbiBhbCByZXNwZWN0by48L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPkN1YW5kbyBlbCByZWN1cnNvIHRpZW5lIGRlcmVjaG9zIGRlIDxzdHJvbmc+YXRyaWJ1Y2nDs24gbyByZWNvbm9jaW1pZW50byAoQXR0cmlidXRpb24pPC9zdHJvbmc+LCBwYXJhIHVzYXJsbyBzZSBkZWJlIGhhY2VyIHJlZmVyZW5jaWEgYSBzdSBhdXRvci48L3A+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveF9tZWRpYSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iY29udGVudC9tdWplci5wbmciIC8+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhYm91dCI+PHN0cm9uZz5JbWFnZW4gMy48L3N0cm9uZz4gSEFTSElHVUNISSBNdWplciBlbnBvbHZhbmRvc2UuIDxiciAvPjxzdHJvbmc+RnVlbnRlOjwvc3Ryb25nPiA8YSBocmVmPSJodHRwczovL2NvbW1vbnMud2lraW1lZGlhLm9yZy93aWtpL0ZpbGU6SEFTSElHVUNISV9NdWplcl9lbnBvbHZhbmRvc2UuanBnIiB0YXJnZXQ9Il9ibGFuayI+SGFzaGlndWNoaSBHb3lvPC9hPiAoMTkyMSkuPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5TaSBsYSBhdXRvcsOtYSBlcyBkZSBhdHJpYnVjacOzbiBjb24gaW50ZXJ2ZW5jacOzbiBncsOhZmljYSBvIG1vZGlmaWNhY2lvbmVzPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPHA+U2kgZWwgcmVjdXJzbyBzZSBjcmVhIGEgcGFydGlyIGRlIGxhIG1vZGlmaWNhY2nDs24gZGUgb3RybywgZXMgaW1wb3J0YW50ZSB2ZXJpZmljYXIgbG9zIGRlcmVjaG9zIGRlIGF0cmlidWNpw7NuIHkgcmVmZXJlbmNpYXIgZGUgbGEgc2lndWllbnRlIG1hbmVyYTo8L3A+DQogICAgICAgICAgICAgICAgICAgIDxibG9ja3F1b3RlPjxzdHJvbmc+VGlwbyBkZSByZWN1cnNvICMuPC9zdHJvbmc+IE5vbWJyZSBkZWwgcmVjdXJzbywgZGlzZcOxbyByZWZlcmVuY2lhZG8uIDxiciAvPjxzdHJvbmc+RnVlbnRlOjwvc3Ryb25nPiA8YSBocmVmPSIjIj5BdXRvcjwvYT4gKEHDsW8pLjwvYmxvY2txdW90ZT4NCiAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5JbXBvcnRhbnRlOjwvc3Ryb25nPiBlbCBub21icmUgZGVsIDxlbT48YSBocmVmPSIjIj5BdXRvcjwvYT4gKEHDsW8pLjwvZW0+LCBkZWJlcsOhIGVzdGFyIGhpcGVydmluY3VsYWRvLCBzaWVtcHJlIHF1ZSBzZWEgcG9zaWJsZSwgYWwgc2l0aW8gZG9uZGUgc2UgZW5jdWVudHJlIGVsIHJlY3Vyc28gZW4gSW50ZXJuZXQgbyBkb25kZSBoYXlhIGluZm9ybWFjacOzbiBhbCByZXNwZWN0by48L3A+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveF9tZWRpYSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iY29udGVudC9tdWplcjIucG5nIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWJvdXQiPjxzdHJvbmc+SW1hZ2VuIDQuPC9zdHJvbmc+IE11amVyICJuZWdhdGl2YSIsIGRpc2XDsW8gcmVmZXJlbmNpYWRvLiA8YnIgLz48c3Ryb25nPkZ1ZW50ZTo8L3N0cm9uZz4gPGEgaHJlZj0iaHR0cHM6Ly9jb21tb25zLndpa2ltZWRpYS5vcmcvd2lraS9GaWxlOkhBU0hJR1VDSElfTXVqZXJfZW5wb2x2YW5kb3NlLmpwZyIgdGFyZ2V0PSJfYmxhbmsiPkhhc2hpZ3VjaGkgR295bzwvYT4gKDE5MjEpLjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICA8cD5TaSBsYSBpbnRlbmNpw7NuIGVzIGVtcGxlYXIgdW4gcmVjdXJzbyBwYXJhIGhhY2VyIHVuYSBjb21wb3NpY2nDs24sIMO6bmljYW1lbnRlIHNlIGRlYmVyw61hbiBlbXBsZWFyIHJlY3Vyc29zIGNvbiBsaWNlbmNpYXMgcXVlIGxvIHBlcm1pdGFuLCByZXNwZXRhbmRvIGxhcyBkaWZlcmVudGVzIGNvbmRpY2lvbmVzIHBhcnRpY3VsYXJlcyBkZSBjYWRhIHVuYS48L3A+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZGF0YV9saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Eb21pbmlvIHDDumJsaWNvPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DcmVhdGl2ZSBjb21tb25zLCBxdWUgbm8gdGVuZ2EgbGEgcmVzdHJpY2Npw7NuIGRlICJzaW4gb2JyYSBkZXJpdmFkYSI8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1JVCwgR05VL0dQTCBvIHNpbWlsYXJlczwvbGk+DQogICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L3NlY3Rpb24+DQoNCiAgICAgICAgICAgIDwhLS1NYXF1ZXRhY2nDs24tLT4NCiAgICAgICAgICAgIDxzZWN0aW9uIGlkPSJwYWctbWFxdWV0YWNpb24iIHB0aXRsZT0iTWFxdWV0YWNpw7NuIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIj4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICBMYSBtYXF1ZXRhY2nDs24gZXMgbGEgbWFuZXJhIGVuIGxhIHF1ZSBzZSBkaXN0cmlidXllIGVsIGNvbnRlbmlkbyBkZWwgZG9jdW1lbnRvIHBvciBkZWZlY3RvLiBBbGd1bmFzIHBhcnRlcyBkZSBlbGxhcyBoYWNlbiBwYXJ0ZSBkZWwgY29tcG9ydGFtaWVudG8gZGVsIGRvY3VtZW50byB5IG90cmFzIMO6bmljYW1lbnRlIHNlIHV0aWxpemFuIGNvbW8gcGFydGUgZGUgbGEgZXN0cnVjdHVyYSBncsOhZmljYS4gTGFzIHBhcnRlcyB0ZW5pZGFzIGVuIGN1ZW50YSBwYXJhIGFzb2NpYXJsYXMgY29uIGFsZ8O6biBjb21wb3J0YW1pZW50bywgeSBxdWUgcG9yIGVuZGUgZGViZW4gcmVzcGV0YXIgYWxndW5hcyBjb25zaWRlcmFjaW9uZXMsIHNvbjoNCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRhdGFfbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5CYXJyYXMgZGUgbmF2ZWdhY2nDs246PC9zdHJvbmc+IGVzIG9wY2lvbmFsIHkgcHVlZGVuIGhhYmVyIG3Dumx0aXBsZXMgZW4gZWwgZG9jdW1lbnRvLiBTZSBkZWZpbmUgY29uIHVuIGVsZW1lbnRvIDxlbT5uYXY8L2VtPiBxdWUgY29udGVuZ2EgY29tbyBoaWpvIGRlIHByaW1lciBuaXZlbCB1biBlbGVtZW50byA8ZW0+bWVudTwvZW0+IGNvbXB1ZXN0byBwb3IgZWxlbWVudG9zIGRlIHRpcG8gPGVtPm1lbnVpdGVtPC9lbT4uIERlbnRybyBkZSBsb3MgZWxlbWVudG9zIDxlbT5tZW51aXRlbTwvZW0+IHB1ZWRlbiBoYWJlciBhIHN1IHZleiBvdHJvcyBlbGVtZW50b3MgPGVtPm1lbnU8L2VtPiwgaW50ZW50YW5kbyBubyBnZW5lcmFyIGRlbWFzaWFkb3MgYW5pZGFtaWVudG9zIHBhcmEgbm8gZGlmaWN1bHRhciBsYSBuYXZlZ2FjacOzbi4gTG9zIGl0ZW1zIHB1ZWRlbiB0ZW5lciB1biBhdHJpYnV0byA8ZW0+bGFiZWw8L2VtPiBxdWUgZGV0ZXJtaW5hIGVsIHRleHRvIGVuIGVsIG1lbsO6IG8gc3UgY29udGVuaWRvIGVuIGVsIG1lbsO6IHB1ZWRlIHNlciBkZWZpbmlkbyBlbiBlbCBjb250ZW5pZG8gZGVsIGVsZW1lbnRvLiBBZGVtw6FzLCBzZSBkZWZpbmUgbGEgcMOhZ2luYSBvIGFjY2nDs24gYSBsYSBjdWFsIGVzdMOhbiB2aW5jdWxhZG9zIHV0aWxpemFuZG8gZWwgYXRyaWJ1dG8gPGVtPmRhdGEtcGFnZTwvZW0+IGNvbiBlbCBpZGVudGlmaWNhZG9yIGRlIGxhIHDDoWdpbmEgY29uIGxhIHF1ZSBzZSB2aW5jdWxhIG8gZWwgYXRyaWJ1dG8gPGVtPmRhdGEtZ2xvYmFsLWlkPC9lbT4gY29uIGVsIGlkZW50aWZpY2Fkb3IgZGUgbGEgYWNjacOzbiBnbG9iYWwgcXVlIHB1ZWRlIHNlcjogPGVtPnJlc3VsdHM8L2VtPiAobW9zdHJhciB2ZW50YW5hIGRlIHNlZ3VpbWllbnRvKSwgPGVtPnJldHVybjwvZW0+IChkZSBzZXIgcG9zaWJsZSwgZW50cmFyIG8gc2FsaXIgZGUgcGFudGFsbGEgY29tcGxldGEpLCA8ZW0+Y2xvc2VfYWxsPC9lbT4gKHNhbGlyIGRlbCBkb2N1bWVudG8pLjxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFkZW3DoXMsIHNpIGEgbGEgZXRpcXVldGEgPGVtPm5hdjwvZW0+IHNlIGxlIGRlZmluZSBlbCBhdHJpYnV0byA8ZW0+ZGF0YS1vZmZzZXQ8L2VtPiBlbiA8ZW0+dHJ1ZTwvZW0+LCBsYSBwb3NpY2nDs24gZGVsIG1lbsO6IHNlIGNhbGN1bGEgcGFyYSBtYW50ZW5lcmxvIHZpc2libGUgYSBwZXNhciBkZWwgc2Nyb2xsLg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPlTDrXR1bG8gZGUgcMOhZ2luYTo8L3N0cm9uZz4gZXMgb3BjaW9uYWwsIHBlcm8gc2kgc2UgZGVmaW5lIHVuIGVsZW1lbnRvIGNvbiBsYSBjbGFzZSA8ZW0+cGFnZS10aXRsZTwvZW0+LCBhbGzDrSBzZSBjYXJnYXLDoSBkaW7DoW1pY2FtZW50ZSBlbCBjb250ZW5pZG8gZGVmaW5pZG8gZW4gZWwgYXRyaWJ1dG8gPGVtPnB0aXRsZTwvZW0+IGRlIGNhZGEgcMOhZ2luYSwgY2FkYSBxdWUgc2UgY2FtYmllIGRlIHDDoWdpbmEgY29uIGN1YWxxdWllciBtw6l0b2RvIGRlIG5hdmVnYWNpw7NuLjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHN0cm9uZz5Db250ZW5pZG86PC9zdHJvbmc+IGVsIGNvbnRlbmlkbyBkZWJlIGVzdGFyIGRlbnRybyBkZSB1biBlbGVtZW50byA8ZW0+bWFpbjwvZW0+IGRlbnRybyBkZWwgY3VhbCBkZWJlbiBoYWJlciBlbGVtZW50b3MgPGVtPnNlY3Rpb248L2VtPiBxdWUgY29ycmVzcG9uZGVuIGEgY2FkYSB1bmEgZGUgbGFzIHDDoWdpbmFzIGRlIGNvbnRlbmlkby4gTGFzIHNlY2Npb25lcyBkZWJlbiB0ZW5lciB1biA8ZW0+aWQ8L2VtPiBxdWUgZXMgZWwgdXRpbGl6YWRvIGVuIGxvcyBtZW7DunMgcGFyYSB2aW5jdWxhcmxvcyB5IHB1ZWRlbiB0ZW5lciB1biBhdHJpbnV0byA8ZW0+cHRpdGxlPC9lbT4gY29uIGVsIHRleHRvIGNvbnNpZGVyYWRvIGNvbW8gdMOtdHVsbyBkZSBsYSBww6FnaW5hIG8gc2VjY2nDs24uIExhcyBww6FnaW5hcyAoZWxlbWVudG9zIDxlbT5zZWN0aW9uPC9lbT4pLCBlc3TDoW4gY29tcHVlc3RhcyBwb3Igc3ViLXDDoWdpbmFzIHF1ZSBzb24gZWxlbWVudG9zIGNvbiBsYSBjbGFzZSA8ZW0+c3VicGFnZTwvZW0+LiBVbmEgcMOhZ2luYSBkZWJlIHRlbmVyIGNvbW8gbcOtbmltbyB1bmEgc3ViLXDDoWdpbmEuPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPkJvdG9uZXMgZGUgbmF2ZWdhY2nDs246PC9zdHJvbmc+IGxvcyBzaWd1aWVudGVzIGF0cmlidXRvcyBzb24gdXRpbGl6YWRvcyBwYXJhIG1hcmNhciBsb3MgYm90b25lcyBvIGVsZW1lbnRvcyBkZSBuYXZlZ2FjacOzbjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRhdGFfbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPkVudHJlIHDDoWdpbmFzOjwvc3Ryb25nPiBzZSBhY3RpdmEgYXNvY2lhbmRvIGEgY3VhbHF1aWVyIGVsZW1lbnRvIGVsIGF0cmlidXRvIDxlbT5kYXRhLXBhZ2U8L2VtPiBjb24gZWwgaWRlbnRpZmljYWRvciBkZSBsYSBww6FnaW5hIHF1ZSBzZSBkZWJlIGNhcmdhci4gU2llbXByZSBzZSBjYXJnYSBsYSBwcmltZXJhIHN1Yi1ww6FnaW5hIGRlIGxhIHDDoWdpbmEgdmluY3VsYWRhLjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPkFudGVyaW9yOjwvc3Ryb25nPiBzZSBhY3RpdmEgYXNvY2lhbmRvIGEgdW4gZWxlbWVudG8gZWwgYXRyaWJ1dG8gPGVtPnByZXZpb3VzLXBhZ2U8L2VtPiwgc2luIG5pbmfDum4gdmFsb3IsIHkgc2UgZW5jYXJnYSBkZSBwYXNhciBhIGxhIHDDoWdpbmEgbyBzdWItcMOhZ2luYSBwcmV2aWEsIHNlZ8O6biBsYSBjb25maWd1cmFjacOzbiBkZWwgZG9jdW1lbnRvLCBzaSBzZSBlbmN1ZW50cmEgZW4gbW9kbyBww6FnaW5hcyBvIDxlbT5zbGlkZXM8L2VtPi48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHN0cm9uZz5TaWd1aWVudGU6PC9zdHJvbmc+IHNlIGFjdGl2YSBhc29jaWFuZG8gYSB1biBlbGVtZW50byBlbCBhdHJpYnV0byA8ZW0+bmV4dC1wYWdlPC9lbT4sIHNpbiB2YWxvciwgeSBzZSBlbmNhcmdhIGRlIHBhc2FyIGEgbGEgc2lndWllbnRlIHDDoWdpbmEgbyBzdWItcMOhZ2luYSwgc2Vnw7puIGxhIGNvbmZpZ3VyYWNpw7NuIGRlbCBkb2N1bWVudG8sIHNpIHNlIGVuY3VlbnRyYSBlbiBtb2RvIHDDoWdpbmFzIG8gPGVtPnNsaWRlczwvZW0+LjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHN0cm9uZz5NZW7DuiBkZSBTdWItcMOhZ2luYXM6PC9zdHJvbmc+IGVzIHVuIGNvbnRlbmVkb3IgZG9uZGUgc2UgY2FyZ2FuIGRpbsOhbWljYW1lbnRlIGxvcyBlbmxhY2VzIGRlIG5hdmVnYWNpw7NuIGEgbGFzIHN1Yi1ww6FnaW5hcyBjdWFuZG8gc2UgZW5jdWVudHJhIGVsIGRvY3VtZW50byBlbiBtb2RvIDxlbT5zbGlkZXM8L2VtPi4gU2UgYWN0aXZhIGFkaWNpb25hbmRvIGEgdW4gZWxlbWVudG8gY29udGVuZWRvciBlbCBhdHJpYnV0byA8ZW0+c3VicGFnZXMtbWVudTwvZW0+LjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHN0cm9uZz5Ow7ptZXJvIGRlIHDDoWdpbmE6PC9zdHJvbmc+IHNpIGV4aXN0ZSB1biBjb250ZW5lZG9yIGNvbiBlbCBpZGVudGlmaWNhZG9yIDxlbT5wYWdlX251bWJlcjwvZW0+LCBlbiBlc2UgZWxlbWVudG8gc2UgY2FyZ2EgZWwgbsO6bWVybyBkZSBsYSBww6FnaW5hIGFjdHVhbCB5IGxhIGNhbnRpZGFkIGRlIHDDoWdpbmFzIHF1ZSBjb21wb25lbiBlbCBkb2N1bWVudG8uPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPlJlc3VsdGFkb3M6PC9zdHJvbmc+IHBhcmEgbGEgdmVudGFuYSBlbiBsYSBxdWUgc2UgbXVlc3RyYW4gbG9zIHJlc3VsdGFkb3MsIHNlIHByZWNpc2EgdW4gY29udGVuZWRvciBjb24gZWwgaWRlbnRpZmljYWRvciA8ZW0+cmVzdWx0c19wYWdlPC9lbT4geSBlbiBzdSBpbnRlcmlvciBkb3MgY29udGVuZWRvcmVzIGNvbiBpZGVudGlmaWNhZG9yIDxlbT5yZXN1bHRzX3BhZ2VfdmlzaXRlZDwvZW0+IHkgPGVtPnJlc3VsdHNfcGFnZV9hY3Rpdml0aWVzPC9lbT4uIFNlIHJlY29taWVuZGEgcXVlIGVzdGUgY29udGVuZWRvciB0ZW5nYSBlbCBhdHJpYnV0byA8ZW0+c3R5bGU8L2VtPiBjb24gZWwgdmFsb3IgPGVtPmRpc3BsYXk6bm9uZTs8L2VtPiBwYXJhIGV2aXRhciBxdWUgc2UgdmVhIGluZm9ybWFjacOzbiBpbm5lY2VzYXJpYSBtaWVudHJhcyBjYXJnYSBsYSBww6FnaW5hLjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHN0cm9uZz5Qw6FnaW5hIGRlIGltcHJlc2nDs246PC9zdHJvbmc+IHNlIHJlcXVpZXJlIHVuIGNvbnRlbmVkb3IgY29uIGVsIGlkZW50aWZpY2Fkb3IgPGVtPnByaW50ZW50X2NvbnRlbnQ8L2VtPiBwYXJhIGxhcyBhY3RpdmlkYWRlcyBvIGNvbnRlbmlkb3MgcXVlIHJlcXVpZXJhbiBwb25lciBlbCBkb2N1bWVudG8gZW4gbW9kbyBpbXByZXNpw7NuLiBEaWNobyBjb250ZW5lZG9yIGRlYmUgdGVuZXIgdW4gYm90b24gY29uIGlkZW50aWZpY2Fkb3IgPGVuPnByaW50ZW50X2JhY2s8L2VtPiB5IHVuIGNvbnRlbmVkb3IgY29uIGNsYXNlIDxlbT5jb250ZW50PC9lbT4uPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPkluZGljYWRvciBkZSBwcm9ncmVzbzo8L3N0cm9uZz4gZXMgZWwgZWxlbWVudG8gcXVlIG11ZXN0cmEgZWwgcG9yY2VudGFqZSBkZSBhdmFuY2UgZW4gbGEgcmV2aXNpw7NuIGRlbCBkb2N1bWVudG8sIHNlIGluY2x1eWUgYXJnZWdhbmRvIHVuIGNvbnRlbmVkb3IgY29uIGxhIGNsYXNlIDxlbT5tZWFzdXJpbmctcHJvZ3Jlc3M8L2VtPi4gU2UgcHVlZGUgaW5kaWNhciBxdcOpIHRpcG8gZGUgaW5kaWNhZG9yIHNlIHZhIGEgdXRpbGl6YXIgYWdyZWdhbmRvIHVuIGF0cmlidXRvIDxlbT5kYXRhLXR5cGU8L2VtPiBjb24gdW5vIGRlIGxvcyBzaWd1aWVudGVzIHZhbG9yZXM6IDxlbT5kZWZhdWx0PC9lbT4sIDxlbT5jaXJjbGU8L2VtPiwgPGVtPnZlcnRpY2FsPC9lbT4sIDxlbT5ob3Jpem9udGFsPC9lbT47IGVsIHRpcG8gZXMgb3BjaW9uYWwgeSBzaSBubyBzZSBpbmRpY2EsIHBvciBkZWZlY3RvIHNlIHVzYSBlbCBwb3IgZGVmZWN0by4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L3NlY3Rpb24+DQoNCiAgICAgICAgICAgIDxzZWN0aW9uIGlkPSJwYWctYmlibGlvZ3JhZmlhIiBwdGl0bGU9IkJpYmxpb2dyYWbDrWEiPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJwYWdlIj4NCiAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZGF0YV9saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICA8bGk+PGI+RHVxdWUsIEouIFAuICgyMDEwKS4gPC9iPjxpPkJpb3RlY25vbG9nw61hIFBhbm9yYW1pY2EgZGUgdW4gc2VjdG9yPC9pPiAoTC4gY3Jpc3RpbmEgU2VjbywgTC4gQmVsbG8sICYgTS4gTWFydGluZXosIEVkcy4pIChHZXNiaWJsbywpLiBFc3Bhw7FhOiBOZXRiaWJsby4gUmV0cmlldmVkIGZyb20gPGEgaHJlZj0iaHR0cHM6Ly9ib29rcy5nb29nbGUuY29tLmNvL2Jvb2tzP2lkPTc3ZVdMSEx5TU5jQyZscGc9UFAxJmRxPWxhJTIwbWV0YWJvbG9taWNhJTIwZXMlMjB1biUyMGFyZWElMjBkZSUyMGxhJTIwYmlvdGVjbm9sb2dpYSZobD1lcyZwZz1QQTMjdj1vbmVwYWdlJnEmZj1mYWxzZSIgdGFyZ2V0PSJfYmxhbmsiPmh0dHBzOi8vYm9va3MuZ29vZ2xlLmNvbS5jbzwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgIDxsaT48Yj5GbGV0Y2hlciwgTC4sIEdvc3MsIEUuLCBQaGVscHMsIFAuLCBXaGVlbGVyLCBBLiwgJiBP4oCYR3JhZHksIEguICgyMDExKS4gPC9iPjxpPkJpb3RlY2hub2xvZ3kgTGFib3JhdG9yeSBNZXRob2RzICZhbXA7IFRlY2huaXF1ZXMuPC9pPiBSZXRyaWV2ZWQgZnJvbSA8YSBocmVmPSJodHRwOi8vd3d3LmF1c3RpbmNjLmVkdS9hd2hlZWxlci9GaWxlcy9CSU9MJTIwMTQxNCUyMEZhbGwlMjAyMDExL0JJT0wxNDE0X0xhYiUyME1hbnVhbF9GYWxsJTIwMjAxMS5wZGYiIHRhcmdldD0iX2JsYW5rIj5odHRwOi8vd3d3LmF1c3RpbmNjLmVkdTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgIDxsaT48Yj5Sb2NhLCBXLiwgJiBNcm9naW5za2ksIEwuIEEuICgxOTkzKS4gPC9iPkN1bHRpdm8gZGUgdGVqaWRvcyBlbiBBcmdpY3VsdHVyYS4gRnVuZGFtZW50b3MgeSBBcGxpY2FjaW9uZXMuLCA5NzAuPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICA8bGk+PGI+TXXDsW96IGRlIE1hbGFqb3ZpY2gsIE0uIEEuICgyMDEyKS4gPC9iPjxpPkJpb3RlY25vbG9nw61hLiA8L2k+VW5pdmVyc2lkYWQgTmFjaW9uYWwgZGUgUXVpbG1lcy4gUmV0cmlldmVkIGZyb20gPGEgaHJlZj0iaHR0cDovL3d3dy5hcmdlbmJpby5vcmcvYWRjL3VwbG9hZHMvcGRmL0JJb3RlY25vbG9naWFfMmRhX2VkLnBkZiIgdGFyZ2V0PSJfYmxhbmsiPmh0dHA6Ly93d3cuYXJnZW5iaW8ub3JnL2FkYy91cGxvYWRzL3BkZi9CSW90ZWNub2xvZ2lhXzJkYV9lZC5wZGY8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICA8bGk+PGI+TmVhbCwgQy4sICYgU3Rld2FydCwgSi4gKDIwMDgpLiA8L2I+PGk+UGxhbnQgQmlvdGVjaG5vbG9neSBhbmQgR2VuZXRpY3M6IFByaW5jaXBsZXMsIFRlY2huaXF1ZXMgYW5kIEFwcGxpY2F0aW9ucy4gPC9pPlJldHJpZXZlZCBmcm9tIDxhIGhyZWY9Imh0dHA6Ly93d3cuZ29udGllcmxhYi5ldS9tZWRpYXMvZmlsZXMvMS1wbGFudC1iaW90ZWNocHJpbmNpcGxlcy10ZWNobmlxdWVzLWFuZC1hcHBsaWNhdGlvbnMxLnBkZiIgdGFyZ2V0PSJfYmxhbmsiPmh0dHA6Ly93d3cuZ29udGllcmxhYi5ldS9tZWRpYXMvZmlsZXMvMS1wbGFudC1iaW90ZWNocHJpbmNpcGxlcy10ZWNobmlxdWVzLWFuZC1hcHBsaWNhdGlvbnMxLnBkZjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgIDxsaT48Yj5TaGFybWEsIEguICgyMDA3KS4gPC9iPjxpPkJpb3RlY2hub2xvZ3kgUHJvY2VkdXJlcyBhbmQgRXhwZXJpbWVudHMgSGFuZGJvb2suPC9pPiBEYXZpZCBGLiBQYWxsYS4gUmV0cmlldmVkIGZyb20gPGEgaHJlZj0iaHR0cDovL3NpdGUuaXVnYXphLmVkdS5wcy9td2hpbmRpL2ZpbGVzL0JJT1RFQ0hOT0xPR1ktUFJPQ0VEVVJFUy1BTkQtRVhQRVJJTUVOVFMtSEFOREJPT0sucGRmIiB0YXJnZXQ9Il9ibGFuayI+aHR0cDovL3NpdGUuaXVnYXphLmVkdS5wcy9td2hpbmRpL2ZpbGVzL0JJT1RFQ0hOT0xPR1ktUFJPQ0VEVVJFUy1BTkQtRVhQRVJJTUVOVFMtSEFOREJPT0sucGRmPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvc2VjdGlvbj4NCg0KDQogICAgICAgICAgICA8IS0tQ3LDqWRpdG9zLS0+DQogICAgICAgICAgICA8c2VjdGlvbiBpZD0icGFnLWNyZWRpdG9zIiA+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VicGFnZSIgaWQ9ImNyZWRpdHNfc3VicGFnZSI+DQogICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWctY3JlZGl0cyJzcmM9ImltZy9jcmVkaXRvcy5wbmciIGFsdD0iSW1hZ2VuIGRlIGNyw6lkaXRvcyI+DQoNCg0KICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICBFbCBPYmpldG8gVmlydHVhbCBkZSBBcHJlbmRpemFqZSBBbGltZW50YWNpw7NuIENvbnNjaWVudGUsIGVzIHByb3BpZWRhZCBkZSBsYSBVbml2ZXJzaWRhZCBkZSBNZWRlbGzDrW4sIGVsIGNvbnRlbmlkbywgZGlzZcOxbw0KICAgICAgICAgICAgICAgICAgICAgIGdyw6FmaWNvIHkgZGVtw6FzIG1hdGVyaWFsIGRpZMOhY3RpY28sIGVzdMOhbiBwcm90ZWdpZG9zIHBvciBsYXMgbGV5ZXMgcXVlIHJpZ2VuIGxhIHByb3BpZWRhZCBpbnRlbGVjdHVhbC4gICAgICAgICAgICAgICAgICAgIDwvcD4NCg0KDQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9ImNyZWRpdHMtdGFibGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkV4cGVydG8gVGVtw6F0aWNvPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RXhwZXJ0byBUZW3DoXRpY288L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPiA8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5KZWZlIERlIEdydXBvPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+SnVhbiBNaWd1ZWwgw4FsdmFyZXogWWVwZXM8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkdlc3RvciBQZWRhZ8OzZ2ljbyBWaXJ0dWFsPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Q2Fyb2xpbmEgTGxhbm9zIFRvYsOzbjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+R2VzdG9yIERlIFJlY3Vyc29zIEVkdWNhdGl2b3MgRGlnaXRhbGVzPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U2VyZ2lvIFllcGVzIFBlbmE8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkdlc3RvciBEaWdpdGFsIFkgTXVsdGltZWRpYTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlNhbnRpYWdvIEhlcm7DoW5kZXogUmVzdHJlcG88L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkdlc3RvciBEZSBDb250ZW5pZG9zIFZpcnR1YWxlczwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlNlYmFzdGnDoW4gUGFuaWFndWEgSXNhemE8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkdlc3RvciBEZSBDYWxpZGFkIFZpcnR1YWw8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EYW5pZWwgSmFyYW1pbGxvIEfDs21lejwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+TWVkaWFkb3IgRGUgRWR1Y2FjacOzbiBWaXJ0dWFsPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Q2Fyb2xpbmEgTGxhbm9zIFRvYsOzbjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+TWVkaWFkb3IgRGUgVElDPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+SmVubmlmZXIgT3NwaW5hIFJhbWlyZXo8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPiA8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Mw61kZXIgRGUgRWR1Y2FjacOzbiBWaXJ0dWFsIFkgVElDPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U2FuZHJhIElzYWJlbCBBcmFuZ28gVsOhc3F1ZXo8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFzZXNvcsOtYSBUw6ljbmljYSBZIFBlZGFnw7NnaWNhPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXNlc29yw61hIFTDqWNuaWNhIFkgUGVkYWfDs2dpY2E8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjcmVkaXRzLXllYXIiPjIwMTg8L3A+DQogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9nb3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9ImltZy9zZWxsb19lZHVjYWNpb25fdmlydHVhbC5wbmciIGFsdD0iRVZ5VElDIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJpbWcvRV92aXJ0dWFsLnBuZyIgYWx0PSJFLVZpcnR1YWwiPg0KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LXNhLzQuMC8iIHRhcmdldD0iX2JsYW5rIj5PYnJhIHB1YmxpY2FkYSBiYWpvIGxpY2VuY2lhOjxiciAvPkNyZWF0aXZlIENvbW1vbnMgQXRyaWJ1Y2nDs24tQ29tcGFydGlyIElndWFsIDQuMCBJbnRlcm5hY2lvbmFsPGJyIC8+PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaW1nL2NjLnBuZyIgYWx0PSJDcmVhdGl2ZSBDb21tb25zIiAvPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+IC0tPg0KDQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgRXN0ZSBwcm95ZWN0byBwcmV0ZW5kZSBzZXIgw7p0aWwgZW4gYW1iaWVudGVzIGVkdWNhdGl2b3MsIHBlcm8gcG9yIHN1IG5hdHVyYWxlemEgdGFtYmnDqW4gc2Vyw6EgdXRpbGl6YWRvIGVuIGFtYmllbnRlcyBjb21lcmNpYWxlcy4gU2kgY29uc2lkZXJhIHF1ZSBzZSBpbmNsdXllIGFsZ28gZGUgc3UgcHJvcGllZGFkIG8gZGUgbGEgaW5zdGl0dWNpw7NuIHF1ZSByZXByZXNlbnRhIHkgcXVlIG5vIGRlc2VhIHF1ZSBzZWEgdXRpbGl6YWRvLCBwb3IgZmF2b3IgaW5kaWNhcmxvIGVuIGxhIHDDoWdpbmEgZGVsIHByb3llY3RvIG8gYWwgY29ycmVvIDxhIGhyZWY9Im1haWx0bzpkYXZpZC5iZXJuYWxAYmFtYnVjby5jbyI+ZGF2aWQuYmVybmFsQGJhbWJ1Y28uY288L2E+IHBhcmEgcXVlIHNlIGFuYWxpY2UgeSwgZW4gY2FzbyBkZSBxdWUgc2UgcmVxdWllcmEsIHNlYSByZXRpcmFkby4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgIExvcyBsb2dvcyB5L28gbm9tYnJlcyBwcmVzZW50ZXMgZW4gZXN0b3MgY3LDqWRpdG9zIG5vIHB1ZWRlbiBzZXIgdXRpbGl6YWRvcyBwYXJhIGluZGljYXIgYXV0b3LDrWEgZGUgY29udGVuaWRvcyBwb3IgZnVlcmEgZGUgbG9zIG9yaWdpbmFsZXMgeSBubyBzZSBhdHJpYnV5ZSBuaW5ndW5hIHJlc3BvbnNhYmlsaWRhZCBwb3Igc3UgdXRpbGl6YWNpw7NuIGZ1ZXJhIGRlIGxvcyBhZ3JhZGVjaW1pZW50b3MgcXVlIHNlIG90b3JnYW4gZW4gZXN0YSBwbGFudGlsbGEuIEFzw60gbWlzbW8sIGxvcyBkZXNhcnJvbGxhZG9yZXMgZSBpbnN0aXR1Y2lvbmVzIGludm9sdWNyYWRhcyBlbnRyZWdhbiBlc3RhIGhlcnJhbWllbnRhICJjb21vIGVzIiB5IG5vIHNlIGhhY2VuIHJlc3BvbnNhYmxlcyBwb3IgbG8gcXVlIHNlIGhhZ2EgY29uIGVsbGEgbmkgcG9yIGVycm9yZXMsIGZhbGxhcyB1IG90cm9zIHBlcmp1aWNpb3MgZGVyaXZhZG9zIGRlIHN1IHV0aWxpemFjacOzbi4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9zZWN0aW9uPg0KICAgICAgICA8L21haW4+DQoNCiAgICAgICAgPGZvb3RlciBjbGFzcz0ibm90X3ByaW50Ij4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZm9vdGVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lYXN1cmluZy1wcm9ncmVzcyIgZGF0YS10eXBlPSJob3Jpem9udGFsIj48L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgaWQ9InN1YnBhZ2VzX21lbnUiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ1dHRvbiIgcHJldmlvdXMtcGFnZT48L2Rpdj4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1dHRvbiIgc3VicGFnZXMtbWVudT48L3VsPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ1dHRvbiIgbmV4dC1wYWdlPjwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlX251bWJlciI+PC9kaXY+DQogICAgICAgICAgPC9kaXY+DQoNCg0KICAgICAgICA8L2Zvb3Rlcj4NCg0KICAgIDwvZGl2Pg0KDQogICAgPGRpdiBpZD0icmVzdWx0c19wYWdlIiBzdHlsZT0iZGlzcGxheTpub25lOyI+DQogICAgICAgIDxoMj5SZXN1bWVuIGRlIHN1IGF2YW5jZSBlbiBsYSBsZWN0dXJhIGRlbCBkb2N1bWVudG88L2gyPg0KICAgICAgICA8aDM+UMOhZ2luYXMgdmlzaXRhZGFzPC9oMz4NCiAgICAgICAgPHA+RW4gdmVyZGUsIGFxdWVsbGFzIHDDoWdpbmFzIHF1ZSB5YSBoYSB2aXNpdGFkby48L3A+DQogICAgICAgIDxkaXYgaWQ9InJlc3VsdHNfcGFnZV92aXNpdGVkIiBjbGFzcz0iY29udGFpbmVyIj48L2Rpdj4NCiAgICAgICAgPGJyIGNsYXNzPSJjbGVhciIgLz4NCiAgICAgICAgPGgzPkFjdGl2aWRhZGVzIGRlIGFwcmVuZGl6YWplPC9oMz4NCiAgICAgICAgPGRpdiBpZD0icmVzdWx0c19wYWdlX2FjdGl2aXRpZXMiPjwvZGl2Pg0KICAgIDwvZGl2Pg0KDQogICAgPGRpdiBpZD0icHJpbnRlbnRfY29udGVudCIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij48L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iYnV0dG9uX2NvbnRhaW5lciI+DQogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJnZW5lcmFsIGJ1dHRvbiIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij5JbXByaW1pcjwvYnV0dG9uPg0KICAgICAgICAgICAgPGJ1dHRvbiBpZD0icHJpbnRlbnRfYmFjayIgY2xhc3M9ImdlbmVyYWwgYnV0dG9uIiA+Vm9sdmVyPC9idXR0b24+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KDQo8L2JvZHk+DQo8L2h0bWw+DQo=");
        return Promise.resolve(value);
    }

    updateIndex(dco, index) {
        const key = 'index_'+dco.id;
        updateStoreKey(key, index);
    }

    updateContent(dco, content) {
        const key = 'content_'+dco.id;
        updateStoreKey(key, content);
    }

    grantAccess(dco, user) {
        let objects = getCollection('objects', []);
        let index = objects.findIndex(o => o.id == dco.id);
        if (index < 0) {
            return Promise.reject('dco.objectNotFound');
        }
        objects[index].shareWith.push(user);
        updateStoreKey('objects', objects);
        return Promise.resolve(true);
    }

    revokeAccess(dco, user) {
        let objects = getCollection('objects', []);
        let index = objects.findIndex(o => o.id == dco.id);
        if (index < 0) {
            return Promise.reject('dco.objectNotFound');
        }
        let index2 = objects[index].shareWith.findIndex(it => it.email == user.email);
        objects[index].shareWith.splice(index2, 1);
        updateStoreKey('objects', objects);
        return Promise.resolve(true);
    }

    updateAccess(dco, user) {
        let objects = getCollection('objects', []);
        let index = objects.findIndex(o => o.id == dco.id);
        if (index < 0) {
            return Promise.reject('dco.objectNotFound');
        }
        let index2 = objects[index].shareWith.findIndex(it => it.email == user.email);
        objects[index].shareWith[index2] = user;
        updateStoreKey('objects', objects);
        return Promise.resolve(true);
    }
}
