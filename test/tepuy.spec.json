export default [
{
    "name": "Plantilla b√°sica uno",
    "description": "Ejemplo de plantilla uno",
    "createdby": "Jesus Otero",
    "category": "Category one",
    "license": "CC by SA",
    "thumb": "https://boa.udea.edu.co/api/c/ruta-tic/resources/MTRFNzdCOEQtOTU4Ny00Q0MyLUI5QTgtMkY1REYwQUMyRDE4QGJvYS51ZGVhLmVkdS5jby9jb250ZW50L3Byb2Zlc29yYV9ib3JyYW5kb190YWJsZXJvLmpwZw==/!/.alternate/profesora_borrando_tablero.jpg/thumb.png",
    "preview": "https://boa.udea.edu.co/api/c/ruta-tic/resources/MTRFNzdCOEQtOTU4Ny00Q0MyLUI5QTgtMkY1REYwQUMyRDE4QGJvYS51ZGVhLmVkdS5jby9jb250ZW50L3Byb2Zlc29yYV9ib3JyYW5kb190YWJsZXJvLmpwZw==.img",
    "original": "https://boa.udea.edu.co/api/c/ruta-tic/resources/MTRFNzdCOEQtOTU4Ny00Q0MyLUI5QTgtMkY1REYwQUMyRDE4QGJvYS51ZGVhLmVkdS5jby9jb250ZW50L3Byb2Zlc29yYV9ib3JyYW5kb190YWJsZXJvLmpwZw==/!/.alternate/profesora_borrando_tablero.jpg/medium.png",
    "index": "PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICAgIDx0aXRsZT5JbmljaW88L3RpdGxlPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCBtYXhpbXVtLXNjYWxlPTEsIHVzZXItc2NhbGFibGU9bm8iPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSJpbWcvaWNvbi5zdmciPgogICAgPGxpbmsgaHJlZj0iY29tcG9uZW50cy9qcXVlcnkvY3NzL2N1c3RvbS9qcXVlcnktdWkubWluLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyI+CiAgICA8bGluayBocmVmPSJjb21wb25lbnRzL2lvbmljb25zL2Nzcy9pb25pY29ucy5taW4uY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIj4KICAgIDxsaW5rIGhyZWY9ImNzcy9zY29ybXBsYXllci5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPgoKICAgIDxzY3JpcHQgc3JjPSJjb21wb25lbnRzL2pxdWVyeS9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJjb21wb25lbnRzL2pxdWVyeS9qcXVlcnktdWkubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9hcHAuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2xhbmcuZXMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImNvbXBvbmVudHMvc2Nvcm0vcGxheWVyLmpzIj4gPC9zY3JpcHQ+Cgo8L2hlYWQ+Cjxib2R5IGRhdGEtYXV0b2xvYWQ9ImZhbHNlIiBkYXRhLWRpc3BsYXktd2luZG93PSJtb2RhbCIgZGF0YS13aW5kb3ctd2lkdGg9IjEwMCIgZGF0YS13aW5kb3ctaGVpZ2h0PSIxMDAiPgogICAgPGRpdiBpZD0iYm9keSI+CiAgICAgICAgPGhlYWRlcj4KICAgICAgICAgICAgPGgxPk5vbWJyZSBkZWwgPGJyIC8+PHNwYW4+Y29tcG9uZW50ZTwvc3Bhbj4gPHNwYW4gY2xhc3M9ImxldmVsIj5OaXZlbDwvc3Bhbj48L2gxPgogICAgICAgICAgICA8aDI+VMOtdHVsbyBkZSBsYSBhY3RpdmlkYWQ8L2gyPgogICAgICAgICAgICA8aW1nIHNyYz0iaW1nL3BvcnRhZGEucG5nIiB0aXRsZT0iSW5pY2lvIiAvPgogICAgICAgIDwvaGVhZGVyPgoKICAgICAgICA8bWFpbiBpZD0iY29udGVudCI+CiAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgPHN0cm9uZz5PYmpldGl2bzo8L3N0cm9uZz4KICAgICAgICAgICAgICAgIGV4cGxvcmFyIGVsIGVzdGlsbyBkZSBhcHJlbmRpemFqZSBwcmVkb21pbmFudGUgZGUgbG9zIHBhcnRpY2lwYW50ZXMsIGNvbiBlbCBmaW4gZGUgYXBvcnRhciBoZXJyYW1pZW50YXMgYWwgcGVuc2FtaWVudG8gY3LDrXRpY28sIHJlZmxleGl2bywgYXJndW1lbnRhdGl2byB5IGNyZWF0aXZvIHBhcmEgZ3VpYXIgbGEgZW5zZcOxYW56YS1hcHJlbmRpemFqZSBlbiBsYXMgw6FyZWFzIGRlIGxhIHNhbHVkLgogICAgICAgICAgICA8L3A+CgogICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgIDxzdHJvbmc+TW9kYWxpZGFkOjwvc3Ryb25nPgogICAgICAgICAgICAgICAgaW5kaXZpZHVhbAogICAgICAgICAgICA8L3A+CgogICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgIEVzdGEgYWN0aXZpZGFkIGVzdMOhIG9yZ2FuaXphZGEgZW4gdHJlcyBwYXJ0ZXM6CiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPG9sPgogICAgICAgICAgICAgICAgPGxpPlVuYSBicmV2ZSBpbnRyb2R1Y2Npw7NuIHJlc3BlY3RvIGEgbG9zIEVzdGlsb3MgZGUgYXByZW5kaXphamUuPC9saT4KICAgICAgICAgICAgICAgIDxsaT5VbmEgcHJ1ZWJhIGRlbCBDdWVzdGlvbmFyaW8gQ0FNRUEgcGFyYSByZWNvbm9jZXIgbGFzIGNhcmFjdGVyw61zdGljYXMgZGUgc3UgZXN0aWxvIGRlIGFwcmVuZGl6YWplIGltcGVyYW50ZSBlbiBEZXNjdWJyYSBzdSBlc3RpbG8gZGUgYXByZW5kaXphamUuPC9saT4KICAgICAgICAgICAgICAgIDxsaT5VbmEgYWN0aXZpZGFkIGRlIHJlcGFzbyBzb2JyZSBsb3MgZXN0aWxvcyBkZSBhcHJlbmRpemFqZS48L2xpPgogICAgICAgICAgICA8L29sPgoKICAgICAgICAgICAgPGRpdiBpZD0iZHVyYXRpb24iPgogICAgICAgICAgICAgICAgRHVyYWNpw7NuOgogICAgICAgICAgICAgICAgPHNwYW4+NDwvc3Bhbj4KICAgICAgICAgICAgICAgIGhvcmFzCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvbWFpbj4KICAgICAgICA8ZGl2IGlkPSJwbGF5X3Njb3JtIj48L2Rpdj4KICAgIDwvZGl2Pgo8L2JvZHk+CjwvaHRtbD4K",
    "content": ""
}
]